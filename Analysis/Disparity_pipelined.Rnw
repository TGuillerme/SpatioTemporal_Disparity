\usepackage{pdflscape}
\usepackage{fixltx2e}
\usepackage{textcomp}
\usepackage{fullpage}
\usepackage{float}
\usepackage{latexsym}
\usepackage{url}
\usepackage{epsfig}
\usepackage{graphicx}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{bm}
\usepackage{array}
\usepackage[version=3]{mhchem}
\usepackage{ifthen}
\usepackage{caption}
\usepackage{hyperref}
\usepackage{amsthm}
\usepackage{amstext}
\usepackage{enumerate}
\usepackage[osf]{mathpazo}
\usepackage{dcolumn}
\usepackage{lineno}
\usepackage{longtable}
\pagenumbering{arabic}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}
\begin{document}
<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
# set global chunk options
opts_chunk$set(fig.path='figure/minimal-', fig.align='center', fig.show='hold')
options(formatR.arrow=TRUE,width=90)
@


\title{STD pipelined analysis v2.0!}

\author{Thomas Guillerme}

\maketitle

New version of the spatio-temporal disparity analysis in mammals around the K-Pg boundary (using Beck's dataset only)

\tableofcontents

\section{Before starting}

\subsection{Loading the package}
First we need to install the packages.
Note that if the packages need to be installed manually (the following code is not evaluated, assuming you have these packages already installed).
To download them, just copy/paste the following code.

%TG: Remember to change the Claddis INSTAL PATH whenever (if) Graeme uploads my new functionalities
<<package, eval = FALSE>>=
# The latest version of devtools and ape
if(!require(devtools)) install.packages("devtools")
if(!require(ape)) install.packages("ape")

## The latest version of Claddis (on development on my own branch)
install_github("TGuillerme/Claddis")

## The latest version of dispRity 
install_github("TGuillerme/dispRity")
@

\subsection{Loading the Data}

<<data>>=
## Loading the packages
library(Claddis) ; library(dispRity)

## Loading the discrete morphological matrix
matrix <- ReadMorphNexus("../Data/2014-Beck-ProcB-matrix-morpho.nex")

## Loading the tree
tree <- read.nexus("../Data/2014-Beck-ProcB-TEM.tre")

## Making sure the tree and the matrix are matching
cleaned_data <- clean.data(matrix$matrix, tree)
tree <- cleaned_data$tree
matrix$matrix <- cleaned_data$data

## Adding node labels to the tree
tree <- makeNodeLabel(tree, method = "number", prefix = "n")

## Adding root.time to the tree
tree$root.time <- max(tree.age(tree)[,1])

## loading the first/last occurrence data
FADLAD <- read.csv("../Data/Beck2014_FADLAD.csv", row.names = 1)

@

\section{Creating the cladisto-space}

\subsection{Estimating the ancestral nodes states}

This part takes some time to calculate (between 20 and 30 minutes on a 2.2GHz clock speed processor).

<<AncStateEstMatrix_NotRun, eval = FALSE>>=
## Estimating the ancestral states (with a uncertainty threshold of 0.95)
matrix_nodes <- AncStateEstMatrix(matrix, tree, estimate.allchars = TRUE,
    uncertainty.threshold = 0.95)

## Saving the matrix
save(matrix_nodes, file = "../Data/ancestral_states_beck2014.Rda")
@

It is however possible to skip it by loading the already estimated ancestral character states as following:

<<AncStateEstMatrix>>=
## Loading the matrix
load("../Data/ancestral_states_beck2014.Rda")
## The matrix was assigned to the object matrix_nodes (see above).

## Adding the node names as row names
row.names(matrix_nodes) <- tree$node.label

## Combining the tips and the nodes in the same matrix
matrix$matrix <- rbind(matrix$matrix, matrix_nodes) 
@

To exclude sloppy ancestral estimations, we included in our matrix only states with an ancestral states estimation's scaled likelihood $>$ 0.95.
Whenever the scaled likelihood was below this level for a character, we replaced the estimated state by NA.
When applying this threshold, only 40\% of the ancestral states estimations where saved (yet these values have are all really likely).

\subsection{Calculating the distance matrix}


<<MorphDistMatrix>>=
## Calculating the Gower distance
matrix_dist <- MorphDistMatrix.fast(matrix, distance = "Gower")
@
%This version of the code might change

\subsection{Generating the cladisto-space}

<<Ordination>>=
## Ordinating the matrix
matrix_ord <- cmdscale(matrix_dist, k=nrow(matrix_dist) - 2, add=T)$points
@

\section{Disparity analysis}

\subsection{Creating the sub-samples of the cladisto-space}

First let's create sub-samples (series) corresponding to the all the possible shapes before and after the K-Pg boundary

<<Custom series>>=
## Creating the empty data frame
categories <- as.data.frame(matrix(data = rep(NA, nrow(matrix_ord)),
    nrow = nrow(matrix_ord), ncol = 2, dimnames = list(rownames(matrix_ord))))

## Adding column names
colnames(categories) <- c("KPg", "")

## Adding the factors for all mammals
categories[,2] <- rep("all", nrow(matrix_ord))

## Adding the pre/post factors for the K-Pg limit
categories[which(tree.age(tree)$age <= 66), 1] <- "pre"
categories[which(tree.age(tree)$age > 66), 1] <- "post"

## Creating the custom series
cust_series <- cust.series(matrix_ord, categories)
@

Secondly, let's create sub-samples that represent the observed disparity every 5 million years:

<<Time series>>=
## Creating the time slices
time_slices <- rev(seq(from = 0, to = 160, by = 5))

## Creating the time series
time_series <- time.series(matrix_ord, tree, method = "continuous",
    time = time_slices, model = "gradual", FADLAD = FADLAD, verbose = TRUE)
@

\subsection{Calculating disparity}

First, let's bootstrap the matrices.

<<Bootstraps>>=
## Bootstrapping the custom series
cust_series <- boot.matrix(cust_series, bootstrap = 1000)

## Bootstrapping the time series
time_series <- boot.matrix(time_series, bootstrap = 1000)
@

Second, let's calculate disparity as the median distance between each observed taxa in the sub-sample and the centroid of the sub-sample:
%TG: median centroids = average radius of the morphspace. Maybe test sum of centroids: total dispersion of the morphospace (probably sensitive to morphospace).

\begin{equation}
   \text{Disparity}=\displaystyle\sqrt{\sum{(\mathbf{v}_{n}-Centroid_{n})^2}}
   %\text{Disparity}=median{\displaystyle\sqrt{\sum{(\mathbf{v}_{n}-Centroid_{n})^2}}}
    \label{disparity}
\end{equation}
where:
\begin{equation}
    Centroid_{n}=\frac{\displaystyle\sum(\mathbf{v}_{n})}{k} 
    \label{centroid}
\end{equation}

\noindent
and $\mathbf{v}_{n}$ is any of the $n$ eigenvectors (i.e. any of the $n$ dimensions of the cladisto-space), $Centroid_{n}$ is the mean value of the $n^{th}$ eigenvector (equation \ref{centroid}) and $k$ is the total number of tips and nodes.

<<Disparity>>=
## Calculating disparity in the custom series
disparity_cust <- dispRity(cust_series, metric = centroids)
disparity_cust_cen <- dispRity(cust_series, metric = centroids,
							   centroid = rep(0, ncol(matrix_ord)))
med_disparity_cust <- dispRity(disparity_cust, metric = median)
med_disparity_cust_cen <- dispRity(disparity_cust_cen, metric = median)

## Calculating disparity in the time series
disparity_time <- dispRity(time_series, metric = centroids)
disparity_time_cen <- dispRity(time_series, metric = centroids,
							   centroid = rep(0, ncol(matrix_ord)))
med_disparity_time <- dispRity(disparity_time, metric = median)
med_disparity_time_cen <- dispRity(disparity_time_cen, metric = median)
@

\subsection{Displaying the results}

<<Summary>>=
## Disparity in the custom series:
summary(disparity_cust)
summary(disparity_cust_cen)

## Disparity in the time series:
summary(disparity_time)
summary(disparity_time_cen)
@

<<Plotting1>>=
## Graphical parameters
op <- par(mfrow = c(2,2), bty = "n")

## Plotting the median disparity in the custom (within the groups)
plot(med_disparity_cust, type = "polygon", main = "Med_dis within groups")
## Plotting the median disparity in the custom (within the groups)
plot(med_disparity_cust_cen, type = "polygon", main = "Med_dis from center")

## Plotting the disparity in the time series:
plot(med_disparity_time, main = "Med_dis within groups")
## Plotting the median disparity in the custom (within the groups)
plot(med_disparity_time_cen, main = "Med_dis from center")
@

\section{Differences in disparity around the K-Pg boundary}

First, let's check if there are any differences between all the taxa before and after the K-Pg event.
I am not sure if this test is necessary since it's binning stuff that have not much to do with each other (i.e. it's probably silly to compare both the disparity in the paleogene and the present to the disparity in the jurassic and cretaceous combined).

<<distribution overlap>>=
# How much do the distributions overlap?
test.dispRity(disparity_cust, test = bhatt.coeff)
@

Though interestingly, there seems to be not much of a difference after and before the K-Pg (distributions nearly always fully overlap - Bhattacharyya Coefficient $>$ 0.95).

Second, let's test that statistically with a \texttt{t.test} (and correcting for multiple tests using bonferronni).

<<distribution_test>>=
# Is the disparity before and after K-Pg siginificatively different?
test.dispRity(disparity_cust, test = t.test, correction = "bonferroni")
@

Note that they all come out as significant but with huge degrees of freedom (the parameters in the results).
This is because in effect, we are here comparing not just the disparity of the two distributions but of all the 1000 bootstraps!
One solution is to apply the test to all the pairs of bootstraps and look at the quantiles of the results.

<<distribution_test2>>=
# Is the disparity before and after K-Pg siginificatively different?
test.dispRity(disparity_cust, test = t.test, correction = "bonferroni",
			  concatenate = FALSE)
@

Here we can see that the post-K-Pg disparity is always different than the overall disparity and that both post and pre are different in at least 75\% of the cases.

<<sequential_test1>>=
# Difference between each series?
sequential_t_test <- test.dispRity(disparity_time, test = t.test,
	correction = "bonferroni", comparisons = "sequential", concatenate = FALSE)


@

<<seq.test>>=
# Sequential test
sequential_test <- test.dispRity(disparity_time, test = sequential.test,
							     family = gaussian)
plot(disparity_time)
plot(sequential_test, add = TRUE,
	lines.args = list(col = "red", lty = 3, lwd = 1.5),
	token.args = list(cex = 0.6))



# Difference after K-Pg
test.dispRity(get.dispRity(disparity_time, what = c(19:33)), test = t.test,
			  comparisons = "referential")
test.dispRity(get.dispRity(med_disparity_time, what = c(19:33)), test = t.test,
			  comparisons = "referential")
test.dispRity(get.dispRity(disparity_time, what = c(19:33)), test = t.test,
			  comparisons = "referential", concatenate = FALSE)
@

%Add sample size effect!

\end{document}

