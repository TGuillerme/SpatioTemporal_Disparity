%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Main_results.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Thomas Guillerme
%%CreationDate: 10/6/15
%%BoundingBox: 0 0 504 504
%%HiResBoundingBox: 0 0 504 504
%%CropBox: 0 0 504 504
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x409 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 15988 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFD19FF7DFFFFFFA8FD07FFA8FD10FFA8FD1CFFA8FD%09FFA8FFFFFFA8FD1BFFA8FD1AFF5227527D5252527D7D52527DA87D527D%7D7D527D7D5252A85252527D7D7D277DFD1AFF2727277D7D527D5252A852%52527D5252527D5252527D527D7DA8527D7DA85252527D527D7D7D525252%7D2752A8FD09FFA827A8FD0DFF7D275227525252F8525252277D7D522752%27FD05522752275227FD0452FD1AFF522752275227522752525227522752%5252277D27522752277D7D52275227FD0552275227522727275252FD0AFF%7DF87DFD0DFFFD05A8FFA8FFA8FFA8FFFFA852A8A8FFA8FFA8FFA8A8A8FF%A8FFA8FF7DA8FD1AFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFFFA852A8FFA8A8FFA8A8A8FFA8FFA8FFA8FFA8A8FD0BFF27A8FD7D%FFA852A8FD7DFFA8F87DFD7DFFA8277DFD43FFA87DA8FD38FF27A8FD04FF%7DFD3EFFA8527DFFFFA8FD2BFF7D527DFD06FFA82752FFFFFF7DF87DFFA8%A8A8FD16FFCAA1FD09FFA8FFA8FFA8FD13FF7D527DFFA8A8A8FFA8FD15FF%CAFD0BFFA8FFA8FFA8FFFF7D27A8FD07FF27A8FD04FFA8FFFFFFA8A8FD12%FFA8FFA8FF76A1A8A8FD06FFA8FFA8FFA8FD15FF7DFD04FFFD04A8FD07FF%A8FD0BFFCACAFD0AFFA8FFA8FFA8FFFFFF7D7D7DFD07FFA8A8FD09FF7DFD%09FFA8FFA8FFA8A87D7D527D527D527D4B7D527D7DA87DA8FD047D527DA8%FFA8FFFF7D27A8FD12FF7DFF7DA87DFD05A852A8A8FFFD05A8FFA8A8A8FF%C3FFFFFFA8FFA8FFA8FFA8A87DFD04A8FD0CFF27A8FD08FFA8A8FD06FFA8%FFFD04A87D7D7DA8A8FFA8FFFFA8CACAFFFFFD067DFD04A87DFFA8A8FFFF%7D277DFD11FFA8FFA852527D7DFFA8FF7D7D7DFFA8FFA8FFA8FFA8FFA8FF%CACAA8FFA8FFA8FFA8FFA8FD047DA8A8FD0CFFA8277DFD09FF7DFD05FFA8%A8A87D527D52A87DA8A8FD05FFA8FFA1FFFFFFA8FFA8A8A8FFA8A8A8FFA8%FD04FFA827A8FD0CFFA8A8A8FFFFFFA8FFA87D7D7DA8A8527DA87D7DFFFD%04A87DA8527DA8A8A1AFA8A8A8FFA8A87D7D7DFD06A8FD0CFF27A8FD09FF%A8FD04FFA8FFA87D7DFD04A8FD08FFA8CACAAFFD05FFA8A8A8FD05FFA8FD%12FFA87D7DFFFF7DA8FFFFA8FF7D7D7DFD04A87D7DA8A8A8527D7DA87DA8%A8CAA8FFA8FFA8A87D7D7DFFA8FFA8FFA8FD08FFA852FFFFA8277DFFFFFF%7D277DFFA8A87DFFFFFFA8A87D7D7DFD04A8FD09FFA8FFA1A8FD06FFA8FD%06FFA8A8FD11FF7D527DFFA8A87DFFA8A87DA87DFFFD04A87D7D527D52FD%05A852CAA1A8A8FF7D7D52FD04A8FD04FFA8A8FD07FF52F8A8FF7D27FD04%FFA87DA8FFFFA8A8FD04FFA87DA8FFA8FFA8FD09FF7DFFFFCAA8FD0DFFA8%FD13FFA8FD04FFA8FD04FFA8FFA8A8A8FFA8FFA8A87DA8A8FFA8FFA87DA1%A1A8FFA87D7DFFA8FFA8FD05FFA8FD08FF5227FFFFA87DA8FD09FFA8FFFF%FF7D7D7DFFA8A8FFFFA8FD07FFA8A8A8FFCAA8A8FD0CFFA8A8FD17FFA8FF%FFFFFD05A8FFFFFD0BA87DA14BA8A87D7DFFA8A8A8FD06FFA8A8FD07FF52%52A8FFFFF87DFD08FFA8A8FFFFFF7D527DA8FFA8FD0BFFA8A8FFCAFFA8FD%0CFFA8FD17FFA8A8FD04FFA8FFA8FFA8FF7DFFA8FFA8FFA8FFA8FFA88452%A1597D7DFFA8FFA8FD07FFA8FD08FFA827FFFFA8277DFD09FF7DFFA8A87D%7D7DA8A8FD0BFFA8FFA8FFC4FFA8FD0CFFA8A8FFFFFFA8FD0DFFA8A8A8FF%FFFF7DFFFFFFA8A8A8FFA8FFFFFD06A8FFFFFFA8FF7D52A17D7DFD05A8FF%A8A8FD04FFA8A8FFFFA87DFFFFFF5227A8FFFF27A8FD09FFA8FFFF7D7DA8%FFA8FD0FFFCACAFFFFA8FD0BFFA8FFFFFF7D527DFD0CFFA852FFFFFF7DA8%FD04FFA8FD05FFA8FFA8FFA8FD06FFA8A1CAA8A8A8FFA8FFFFFFA8FFA8FF%FFFFA8FFFFFF7D277DFFFFA87DFFFFA8277DFFFFFFA8277DFFA87D7DFFA8%7D7DA8A8A8FD0AFFA8A8A8FFFFFFCAFFA8A8FD0BFFA87DFFFF7DF8A8FD0C%FFA87DA8FFFFA87DFFFFFFA8A8A8FFA8FFFFA8A8FFA8A8A8FD05FFA8A8A1%AEFD05A8FFA8FFFFA8A8A8FFA87DFFFF7D277DFFFF5252A8FFA8F87DFD04%FF7DA8FFFFA8A8FF7D7D7DA8FFA8FD10FFCAFFFFA8FD0BFFA8FFFFFF7D52%7DFD0DFFA8FD04FFA8FD04FFA8FFFFA8A8FFA8A8FD0AFFA8CAA8A8A8FFA8%FFFFA8A8FD05FFA8FFFFFFA8A8A8FFFF7D52FFFFA8277DFD09FFA8FF527D%7DA8A8A8FD0AFFA8FD05FFCAFFA8A8FD0BFFA8A8FD17FFA8FFFFFFA8A8FF%FFA8FFFFFFA8FD07FFFD04A8A1FD05A8FFFFA8FD06FFA8A8FD07FF5252A8%FFFF27A8FD09FFA8FF7D52A8A8FFA8FD10FFCAFFFFA8FD0BFFA8FD18FFA8%FD04FFA8FFFFA8FFFFA8FD08FFA8A8FFA8CAA8FFA8FD04FFA8FD06FFA8FD%08FF7DF8FFFF7DF87DFD09FFA8FF7D527DA8A8FD0BFFA8FD05FFCAFFFFA8%A8FD0AFFA8A8FD11FFA8A8A8FFFFFFA8FFFFFFA8A8FFFFA8FD0BFFA8A8A8%CAA1AFA8FD04FFA8A8FD06FFA8A8FD07FFA87DFFFFFF52A8FD09FFA8A87D%7DFD04A8FD09FF7DFD05FFCACAFD0EFFA8FD12FF7DF87DFFFF7DA8FD04FF%A8FD05FFA8FD08FFA8A8FFA8CAA8A8A8FFFFFFA8FD07FFA8FD08FFA852FF%FFA8A8A8FFFFFF7D5252FFA8A87DA87DA87DA8A8FD09FFA8FD07FFC4FFFF%FFA8FD0AFFA8A8FD11FF7D277DFFFFA87DFD04FFA8FFFFA8FFFFFFA8FD07%FFA8FFA8A8A1AFA8FFFFFFA8FD08FFA8A8FD07FF5227A8FFFF27A8FFFFFF%A87DA8FFFFA8FFA8A8A8FFA8FD11FFCACAFD04FFA8FD09FFA8FD18FFA8FD%06FF7DFFFFFFA8FD05FFA8A8FFA8A8FFA8CAA8FD0DFFA8FD08FF52F8A8FF%A8277DFD09FFA8A87DFD04A8FD08FFA8A8FD07FFCAFD05FFA8FD08FFA8A8%FFFFA87DFD13FF7DFD05FF7DA8A8FFFFFFA8FD04FFA87DFFA8FFA8A8A1AF%A8FFFFFFA8FD08FFA8A8FD07FF527DFFFFA8F87DFD09FFFD04A8FFA8FD09%FFA8FD08FFCAFD0EFFA8A8FFFF7D277DFD12FFA8FD04FFA8FD06FFA8FD04%FFA8FFA8FFA8FFA8CAA8FD15FFA87D7DFFFF7D277DFD09FFA8FF7DFD04A8%FD07FF7DFD09FFCAFD05FFA8FD08FFA8A8FFFF7D527DFD12FFA8FD04FFA8%7DFD05FFA8FFFFFFA8A8FD04FFA8A8A1A8A8FFFFA8A8FD08FFA8A8FFFF7D%27A8FFFF2727A8FFFF27A8FD09FFFD04A8FFA8FD12FFCAFD21FFA8277DFF%FF7DA8FD04FFA8FD06FFA8FD04FFA8FFFFFFA8FFA8CAA8FFFFFFA8FD09FF%A8A8FFFF7D52A8FFFFA87DFFFFA8277DFFFFFFA8A8A8FFA8A8A8FF7DA8A8%FD08FFA8A8FD09FFCAFD06FFA8FD07FFA8A8FD11FFA87D7DFFA8A8A8FD0B%FFA8FFFFFFA8FD05FFA8CAA1A8A8FFA8A8FD09FFA8A8FFFFA852A8FFFF7D%7DFFFFFF27A8FFFFFFA8527DFFFF7DA8FFA8A8FD09FFA8FD09FFCACAFD06%FFA8FD07FFA8FD17FFA8A8FD0AFFA8A8FFFFFFA8FD05FFA8A8CAA8FFFFFF%A8FD12FF7D27FFFFA8277DFD05FFA8FFFFFFA8FF7DA8A8FD05FFA8A87DFD%0BFFC4FD07FFA8A8A8FFA8FFFFA8A8FD17FF7DFD0CFFA8A8FFA8FD05FFA8%A8A1AFA8FF7DFD0AFFA8A8FD07FF7D52FFFFFF7DFD09FFA8A8FFA8A8FD06%FFA8FD0CFFCACAFD0AFFA8A8A8FD19FFA8A8FD15FFA8A8CAA8FD0DFFA8FD%08FF5227FFFFA8277DFD09FFA8FFA8A8FD04FFA8A8FD0EFFCAFD0EFFA8A8%FD17FF7DFD0DFFA8FFA8FD05FFA8A8A1AFFFFFA8FD0AFFA8A8FD07FF5252%FFFFFF27A8FD09FFFD04A8FD05FFA8FD0EFFCAFD12FFA8A8A8FD0CFFA827%7DFFFF7DA8FD0EFFA8FD06FFA8A8CAA8FD16FF7D27FFFF7DF852FFFFFFA8%A8A8FFA8A8A8FF7DFD05FFA8FD0FFFCAFD0EFFA8A8FFFF7D277DFD0CFFA8%527DFFA8A87DFD0DFFA8A8FD06FFA8A8A1AFFFA8A8FD0AFFA8A8FD07FF7D%27A8FFFF27A8FFFFFFA852A8FFFF7DA8A8A8FD15FFCAFD12FF7D52A8FD12%FFA8FD16FF7DCAA8FD16FF7D52FFFFA8527DFD09FFA8FFA8FFFFFFA8A8A8%FD0FFFCAFD12FFA87DFD13FFA8FD15FFA8A1A1A8FFA8A8FD0AFFA8A8FD07%FF2752FFFFFF27A8FD08FFFD04A8FD14FFCACAFD26FFA8A8FD16FFA8CAA8%FFA8FD0FFFA8A8A8FFFFFFA8FFFFA8527DFD09FFA8FFA8FFA8A8A8FD11FF%C4FD27FF7DFD16FFCBA1A87DFD0CFFA8A8FFFF7D277DFD06FFA852A8FD09%FFA8FFFF7DFD13FFCACAFD21FF7D52FFFFFF7DA8FD16FFCACAA8FD0DFFA8%A8FFFF7D52A8FD06FFA8527DFFFFFFA87DA8FFFFA87DA87DFD15FFCAFD21%FFA8A8A8FD1BFFA17DA8FD10FFA87DFD08FF27A8FFFFFFA8277DFFFF7DFF%A8FD16FFCAFD3FFFCAFD1BFFA82752FFFFFFA8FD06FFA87DA8A8A87DA8A8%A87DA87DA87DA8A8A87DA8A8A87DA8A1A87DA87DA87DA8A8A87DFD04A8FD%1AFFA87DA8A8A87DA8A8A87DA87DA87DA8A8A87DA8A8A87DA8A1A87DA87D%A87DA8A8A87DFD04A8FD0EFF7DA8FD0AFF7DFD04FFA8A8FFA8FFA8A8FD04%FF7DFD05FF7DFFA8FFFFA8A8FFFFFFA8A8FFFFA8A8FD1AFF7DFD04FFA8A8%FFA8FFA8A8FD04FF7DFD05FF7DFFA8FFFFA8A8FFFFFFA8A8FFFFA8A8FD0D%FFA8527DFD0BFFA8FFFFFFA8FD05FFA8FD05FFA8FFFFFFA8FD05FFA8FD05%FFA8FFFFFFA8FD1BFFA8FFFFFFA8FD05FFA8FD05FFA8FFFFFFA8FD05FFA8%FD05FFA8FFFFFFA8FD0EFF27A8FD7DFFA82727FD08FFA87D7D7DA8FD06FF%A8A87D7DA8FD07FF7D7D7DFFFFFF7D7DFFFFA87D7DA8FFA87DFD18FFA87D%7D7DA8FD06FFA8A87D7DA8FD07FF7D7D7DFFFFFF7D7DFFFFA87D7DA8FFA8%7DFD0DFF7D27A8FD08FF7D7D7D5252FD06FFA85252277DFD07FF52277DFF%FF522727FFFFFF27277DFF7D27A8FD17FF7D7D7D5252FD06FFA85252277D%FD07FF52277DFFFF522727FFFFFF27277DFF7D27A8FD0CFF527DA8FD09FF%7DA87D7DFD06FFA87D527DA8FD07FFA87D7DFFFFA87D7DFFFFA87D7DA8FF%A87DFD19FF7DA87D7DFD06FFA87D527DA8FD07FFA87D7DFFFFA87D7DFFFF%A87D7DA8FFA87DFDFCFFFDABFF7D7DA8FD04FF7D7DA8A8A8FD34FF7D7DA8%FD04FF7D7DA8A8A8FD34FF7D2752272727A827F8F8527DFD34FF7D275227%2727A827F8F8527DFD34FFA8A87D7D527DA852527D527DFD34FFA8A87D7D%527DA852527D527DFDFCFFFDFCFFFD35FFA8A8FD12FFA8FFFFFFA8FD21FF%A8FD0BFFA8FD13FFA8FD24FFA852527D7D52277D527D527D52FF527D527D%527D52527D7D525252FD1FFF7D27277D5252527D527D7D7DFD05527D7D52%527D527D52FF7D7D527D527D7D27527D527D27A8FD0CFFA827A8FD10FF27%52525227525227527D52277D7D272752522752275252275252A8FD1EFFA8%2752272727525252275227522727527D27FD0452272727A87D5227527DF8%522752275252527DFD0CFF7DF87DFD10FFA8A8FFA8FFA8FFA8FFA8FFA8FF%7D5252FFA8FFA8FFA8FFA8FF7DFD1FFFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFFFFFA8FFA8FFA8FFA87D27FFA8FFA8FFA8FFA8FF7DFD0EFF27A8%FD7DFFA852A8FD7DFFA8F87DFD7DFFA8277DFD43FFA87DA8FD38FF27A8FD%04FF7DFD3EFFA8527DFFFFA8FD2BFF7D527DFD06FFA82752FFFFFF7DF87D%FFA8A8A8FD16FFCAA1FD0DFFA8FD13FF7D527DFFA8A8A8FFA8FD15FFCAFD%0DFFA8FFA8FFFF7D27A8FD07FF27A8FD04FFA8FD04FFA8FD11FFA8A8FFA8%A852A17DA8A8FFA8FD07FFA8FD15FF7DFFFFFFFD05A8FFFFFFA8FFFFFFA8%FD0BFFCACAFD08FFA8FFFFFFA8FFA8FFFFFF7D7D7DFD07FFA8A8FD09FF7D%FFFFFFA8FFFFFFA8FFA8A8A8FF7D7D527D527D527D7D7D76A87D7D527D52%A87DA87DFFA8A8A8FFA8FFFF7D27A8FD12FFA8FF527D7DFD05A8527DFD0C%A8A1FFFFFFA8A8A8FFFD09A8FD0CFF27A8FD08FFA8A8FD06FFA8FF7D7D7D%A87D7DA8A8A8FD04FFAFCACAFFFFA8FFA8A8FD067D52FFA8A8FFFF7D277D%FD11FFA8FFA8FD047DFFA8A87DA852FFA8FFA8FFA8FFA8A8A8FFA8CAA8FF%A8FFA8FFA8A87D7D7DA87DA8A8FD0CFFA8277DFD09FF7DFFFFFFA8FFA8A8%FD047D527DA8FD07FFA8FFA1FD05FFFD06A87DA8FD05FFA827A8FD0CFFA8%A8A8FFFFFFA8FFA8FD057D52A8A87D7DFFFD04A87D7D527DA8A8A1AFFD04%A87D7D52A87D7D7DFD04A8FD0CFF27A8FD08FFA8A8FFFFA8A8FFA87D7DA8%FFA8FFA8FD08FFA8CACAAFFD05FFA8A8A8FFA8FFA8FFA8FD12FF7D2752FF%FF7DA8FFFFA8FF7D7D7DFD04A87D7DA8A8A8527D7DFF7DA8A8CAA8FFA8A8%52A87DA8A8FFA8FFA8FFA8FD08FFA852FFFFA8277DFFFFFF7D277DFFA8A8%7DFFA8A8A8FF7D5252FFFFFFA8FD09FFA8FFA1A8FD06FFA8FFFD04A8FFA8%A8FD11FF7D527DFFA8A87DFFFFFFA8A87DFFA8A8A8FFA87D527D52A8A8FF%A8A852A19BA8A8A8527DA8FFA8FFA8A8A8FFFFA8A8FD07FF52F8A8FF7D27%FD04FFA87DA8FFFFA8A8FFFFFD06A8FD0CFF7DFFFFCAA8FD0DFFA8FD18FF%A8FD04FFA8FFA8A8A8FFA8FFA8A87DA8A8FFA8FFA8A85276A8FF7D7DA8FF%A8FFFFFFA8FFFFFFA8FD08FF5227FFFFA87DA8FD09FFA8FFA8FF527D7DA8%A8FD0BFFA8A8A8FFCAA8A8FD0CFFA8A8FD17FFA8FFFFFFFD05A8FFFFFD0A%A8FFA8CA767D527DFD05A8FD06FFA8A8FD07FF5252A8FFFFF87DFD08FFA8%A8FFFFA87D527DA8FD0DFFA8A8FFCAFFA8FD0CFFA8FD17FFA8A8FD04FFA8%FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFAFA8A152A8A8FFA8FFA8FD07FFA8%FD08FFA827FFFFA8277DFD09FF7DFF7D527D7D52FFA8FD0BFFA8FFA8FFC4%FFA8FD0CFFA8A8FFFFFFA8FD0DFFA8527DFFFFFF7DFFFFFFA8FFFFFFA8FF%FFA8FFFFA8A8A8FD05FFA8A8A1FD04A8FD04FFA8A8FD04FFA8A8FFFFA87D%FFFFFF5227A8FFFF27A8FD09FFA8FF7D52A87DA8A8FD0FFFCACAFFFFA8FD%0BFFA8FFFFFF7D527DFD0CFFA87DFFFFFF7DA8FD0AFFA8FFFFFFA8FD07FF%A8CAA8FFA8FD05FFA8FFA8FFFFFFA8FFFFFF7D277DFFFFA87DFFFFA8277D%FFFFFFA8277DFFA87D7DFF7DA8A8FFA8A8A8FD09FFA8A8A8FFFFFFCAFFA8%A8FD0BFFA87DFFFF7DF8A8FD0CFFA8527DFFFFA87DFFFFFFA8A8FFFFA8FF%FFA8A8FFA8A8FD06FFA8A8A1AFA8A8A8FFFFFFA8FFFFA8A8A8FFA87DFFFF%7D277DFFFF5252A8FFA8F87DFD04FF7DA8FFFFA8A8A87DA8A8A8FFA8FD10%FFCAFFFFA8FD0BFFA8FFFFFF7D527DFD12FFA8FD04FFA8FFFFA8A8FFA8FD%0BFFA8CAA8FFA8FD04FFA8A8FD05FFA8FFFFFFA8A8A8FFFF7D52FFFFA827%7DFD09FFA8A852FD06A8FD09FFA8FD05FFCAFFA8A8FD0BFFA8A8FD17FFA8%FFFFFFA8A8FFFFA8FFFFFFA8FD07FFA8A8AFA8A1FD04A8FFFFFFA8FD06FF%A8A8FD07FF5252A8FFFF27A8FD09FFA8A87DA8A8A8FFA8FD10FFCAFFFFA8%FD0BFFA8FD18FFA8FD04FFA8FFFFA8FFFFA8FD08FFA8A8FFCACAA8FFA8FD%04FFA8FD06FFA8FD08FF7DF8FFFF7DF87DFD09FFA8A87DFD06A8FD09FFA8%FD05FFCAFFFFA8A8FD0AFFA8A8FD11FF7D527DFFFFFFA8FFFFFFA8A8FFFF%A8FD0BFFA8A8FFFFA1A8A8FD04FFA8A8FD06FFA8A8FD07FFA87DFFFFFF52%A8FD0AFFFD05A8FFA8FD09FF7DFD05FFCACAFD0EFFA8FD12FFA827A8FFFF%7DA8FD04FFA8FD05FFA8FD08FFA8A8FFCACAA8FD05FFA8FD07FFA8FD08FF%A852FFFFA8A8A8FFFFFF7D5252FFA87D7DA87DFD06A8FD07FFA8FD07FFC4%FFFFFFA8FD0AFFA8A8FD11FFA852A8FFFFFF7DFD04FFA8FFFFA8FFFFFFA8%FD07FFA8FFFFFFA1A8A8FFFFFFA8FD08FFA8A8FD07FF5227A8FFFF27A8FF%FFFFA87DA8FFFFA8FFA8A8A8FFA8FFA8FD0FFFCACAFD04FFA8FD09FFA8FD%17FFA8A8FD06FF7DFFFFFFA8FD05FFA8A8FFA8A8FFFFCAA8FD0DFFA8FD08%FF52F8A8FFA8277DFD09FFFD07A8FFA8FD06FFA8A8FD07FFCAFD05FFA8FD%08FFA8A8FFFFA87DFD13FF7DFD05FF7DA8A8FFFFFFA8FD04FFA87DFFA8FF%FFFFA1AFA8FFFFFFA8FD08FFA8A8FD07FF527DFFFFA8F87DFD09FFFD04A8%FFA8FD09FFA8FD08FFCAFD0EFFA8A8FFFF7D277DFD12FFA8FD04FFA8FD06%FFA8FD04FFA8FFA8FFA8FFFFCAA8FD15FFA87D7DFFFF7D277DFD09FFA8FF%A8A8A8FFA8FD07FF7DFD09FFCAFD05FFA8FD08FFA8A8FFFF7D527DFD0CFF%A87DA8FFA8A87DFD04FFA87DFD05FFA8FFFFFFA8A8FD04FFA8FFA1A8A8FF%FFA8A8FD08FFA8A8FFFF7D27A8FFFF2727A8FFFF27A8FD09FFA8FFFFA8FD%14FFCAFD21FFA8F87DFFFF7DA8FD04FFA8FD06FFA8FD04FFA8FFFFFFA8FF%FFCAA8FFFFFFA8FD09FFA8A8FFFF7D52A8FFFFA87DFFFFA8277DFFFFFFA8%A8A8FFA8A8A8FFA8A8A8FD08FFA8A8FD09FFCAFD06FFA8FD07FFA8A8FD17%FFA8FD0BFFA8FFFFFFA8FD05FFA8FFA1A8A8FFA8A8FD09FFA8A8FFFFA852%A8FFFF7D7DFFFFFF27A8FFFFFFA8527DFFFFA8A8FFA8A8FD09FFA8FD09FF%CACAFD06FFA8FD07FFA8FD17FFA8A8FD0AFFA8A8FFFFFFA8FD05FFA8FFCA%A8FFFFFFA8FD12FF7D27FFFFA8277DFD05FFA8FFFFFF7DFFA8A8A8FD05FF%A8A87DFD0BFFC4FD07FFA8A8A8FFA8FFFFA8A8FD17FF7DFD0CFFA8A8FFA8%FD05FFA8FFA1AFA8FF7DFD0AFFA8A8FD07FF7D52FFFFFF7DFD09FFA8A8FD%09FFA8FD0CFFCACAFD0AFFA8A8A8FD1AFFA8FD15FFA8FFCAA8FD0DFFA8FD%08FF5227FFFFA8277DFD09FFA8FFA8FD05FFA8A8FD0EFFCAFD0EFFA8A8FD%11FFA87DA8FFFFA87DFD0DFFA8FFA8FD05FFA8FFA1AFFFFFA8FD0AFFA8A8%FD07FF5252FFFFFF27A8FD09FFA8A8FD07FFA8FD0EFFCAFD12FFA8A8A8FD%0CFF7DF87DFFFF7DA8FD0EFFA8FD06FFA8CACAA8FD16FF7D27FFFF7DF852%FFFFFFA8A8A8FFA8A8A8FFA8FD05FFA8FD0FFFCAFD0EFFA8A8FFFF7D277D%FD0CFFA8FD05FFA8FD0DFFA8A8FD06FFA8CAA1AFFFA8A8FD0AFFA8A8FD07%FF7D27A8FFFF27A8FFFFFFA852A8FFFF7DA8FD17FFCAFD12FF7D52A8FD12%FFA8FD16FFA1CAA8FD16FF7D52FFFFA8527DFD09FFA8FFA8FFFFFFA8A8A8%FD0FFFCAFD12FFA87DFD13FFA8FD15FFA8A8A1A8FFA8A8FD0AFFA8A8FD07%FF2752FFFFFF27A8FD08FFA8A8FD16FFCACAFD26FFA8A8FD17FFCAA8FFA8%FD0FFFA8A8A8FFFFFFA8FFFFA8527DFD09FF7DFFFFFFA8A8A8FD11FFC4FD%21FFA8A8A8FFFFA87DFD17FFA1A87DFD0CFFA8A8FFFF7D277DFD06FFA852%A8FD09FFA8FFFF7DFD13FFCACAFD21FF7D52A8FFFF7DFD18FFCAA8FD0DFF%A8A8FFFF7D52A8FD06FFA8527DFFFFFFA87DA8FFFFA87DFFA8FD15FFCAFD%3FFFA17DA8FD10FFA87DFD08FF27A8FFFFFFA8277DFFFF7DFFA8FD16FFCA%FD3FFFCAFD1BFFA82752FFFFFFA8FD06FFA87DA8A8A87DA8A8A87DA87DA8%7DA8A8A87DA8A8A87DA8A1A87DA87DA87DA8A8A87DFD04A8FD1AFFA87DA8%A8A87DA8A8A87DA87DA87DA8A8A87DA8A8A87DA8A1A87DA87DA87DA8A8A8%7DFD04A8FD0EFF7DA8FD0AFF7DFD04FFA8A8FFA8FFA8A8FD04FF7DFD05FF%7DFFA8FFFFA8A8FFFFFFA8A8FFFFA8A8FD1AFF7DFD04FFA8A8FFA8FFA8A8%FD04FF7DFD05FF7DFFA8FFFFA8A8FFFFFFA8A8FFFFA8A8FD0DFFA8527DFD%0BFFA8FFFFFFA8FD05FFA8FD05FFA8FFFFFFA8FD05FFA8FD05FFA8FFFFFF%A8FD1BFFA8FFFFFFA8FD05FFA8FD05FFA8FFFFFFA8FD05FFA8FD05FFA8FF%FFFFA8FD0EFF27A8FD7DFFA82727FD08FFA87D7D7DA8FD06FFA8A87D7DA8%FD07FF7D7D7DFFFFFF7D7DFFFFA87D7DA8FFA87DFD18FFA87D7D7DA8FD06%FFA8A87D7DA8FD07FF7D7D7DFFFFFF7D7DFFFFA87D7DA8FFA87DFD0DFF7D%27A8FD08FF7D7D7D5252FD06FFA85252277DFD07FF52277DFFFF522727FF%FFFF27277DFF7D27A8FD17FF7D7D7D5252FD06FFA85252277DFD07FF5227%7DFFFF522727FFFFFF27277DFF7D27A8FD0CFF527DA8FD09FF7DA87D7DFD%06FFA87D527DA8FD07FFA87D7DFFFFA87D7DFFFFA87D7DA8FFA87DFD19FF%7DA87D7DFD06FFA87D527DA8FD07FFA87D7DFFFFA87D7DFFFFA87D7DA8FF%A87DFDFCFFFDABFF7D7DA8FD04FF7D7DA8A8A8FD34FF7D7DA8FD04FF7D7D%A8A8A8FD34FF7D2752272727A827F8F8527DFD34FF7D2752272727A827F8%F8527DFD34FFA8A87D7D527DA852527D527DFD34FFA8A87D7D527DA85252%7D527DFD19FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Quartz %d</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2015-09-22T15:15:23+01:00</xap:CreateDate>
         <xap:ModifyDate>2015-10-06T16:33:24+01:00</xap:ModifyDate>
         <xap:MetadataDate>2015-10-06T16:33:24+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWBeVfzVg178wdZ8&#xA;mC0gjuNGjllluILtbiqpJEiVQRoFL+qagMxQqQwFVqqz3FXYq7FXiUk/58afq3mO5sbG7vwb29XT&#xA;ILh7NrY2sn1r6m0Ia4Rvgf6tyqoPDl1OKunuP+ckbG4vprS3j1BC0kMUVytsB6f1nUJFnh4TL8aw&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:EB768613CF62E511A86DF50CA9A47E9B</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:7FE1664BDA6DE511A597963F0A337A54</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>177.800000</stDim:w>
            <stDim:h>177.800000</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.06</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Arial-BoldMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Bold</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.06</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial Bold.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Groupe de nuances par défaut</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -504 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 504 li
504 504 li
504 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
47.8081 204.192 mo
204.192 204.192 li
204.192 47.8081 li
47.8081 47.8081 li
47.8081 204.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
53.6001 134.751 mo
57.8589 102.091 li
62.1177 120.396 li
66.3765 83.2065 li
70.6353 91.3936 li
74.894 76.2832 li
79.1528 76.8643 li
83.4116 71.9404 li
87.6704 68.8633 li
91.9292 68.9048 li
96.1885 69.2886 li
100.447 65.6821 li
104.706 65.9199 li
108.965 64.7993 li
113.224 62.2349 li
117.482 61.2397 li
121.741 60.0703 li
126 61.355 li
130.259 60.1177 li
134.518 61.6484 li
138.776 59.729 li
143.035 59.1855 li
147.294 60.3359 li
151.553 59.751 li
155.812 62.8022 li
160.071 64.0928 li
164.33 63.4443 li
168.588 64.5435 li
172.847 64.1797 li
177.106 62.5996 li
181.365 62.0962 li
185.624 62.6436 li
189.882 62.6948 li
194.141 62.7061 li
198.4 62.8931 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
@
grestore
gsave
0 504 mo
504 504 li
504 0 li
0 0 li
0 504 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.8081 198.4 mo
47.8081 53.1035 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
47.8081 198.4 mo
41.832 198.4 li
@
47.8081 174.184 mo
41.832 174.184 li
@
47.8081 149.968 mo
41.832 149.968 li
@
47.8081 125.752 mo
41.832 125.752 li
@
47.8081 101.536 mo
41.832 101.536 li
@
47.8081 77.3198 mo
41.832 77.3198 li
@
47.8081 53.1035 mo
41.832 53.1035 li
@
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ArialMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 54 /six putdef/FontBBox {-665 -325 2000 1006} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings8 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3ABC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A10425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E31D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A5B546505C954A88> |-/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92FE1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-/three <1C60D8A8C9B7EF322B10FC2B166D2172609B896A28AF8161ACE0368AFE548E0A1C2891C9468F6CF8001203B3D0EAEFD5067EEA36A5DE0843B3FA3DD10C10DEDE7ECC4B1F205F8D09B2A1084955D8410715DAE41E60E9BEA3731CCA7698FDFAB2F6C5BD853C3D3957C1C3A42CED93CA60AD0CBA44CB0A07053B47ECAA14A0E56199A33A25603E5DB2CC6A470C6EFBC4EF226D2F67623C83F45C93E2C02C0A9A0974576F8175C7B2D4E9F1C9319763C8100AFBFF1D8FFF8EB10F2B0608AF6A0E137303863C59034E23F8CA0DCA04C3BBA93B80F099> |-/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-/five <1C60D8A8C9B7EF322B11AFD4001C6D393B64E9DE4ADCB9C7DBD29001BCD9C24204BCA349E6D6727DDD519B4607896591269B0F423E62F04083C8D4AAB63F3153F8354DAF7BF13702FC0166656CF2542F30CE9F35F189C04CCF389EF200B50CB6EEE2DB668946DD84852A4BE0E462B71D963D0D41B1A42CCC4B98AFEC49372EF96DD9EB13A793559C13CFDFE477> |-/six <1C60D8A8C9B7EF3224364F35F160A7435603F347AEE370EA008402323F12980EBCF3CB26E2D43E59A0756C6206EFA3FA7F3CF2F0DCAFEBCCFFA3BC8BFA30490E649BC066EACB91D06D39C41CF4418FDA94B94D65C0F6F28F44C8CF193628C8B12F204AFE672CF6576AC3AB52C05B059D0EB4764306E7B6C88FB8AE766FA7D7475CE80EAE625C3D4B3B8AD5F700C1E5123D83D6C3B46406191458255140B2BB2B7285E8760BEB4CAD56CDB5D69E1D01DE82A2FE0C6D1807BC278045A69D91DDA3546299406BFBCDD14522D29A47E391C26AA1D66EE72A60> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/OZLZKD+ArialMT /ArialMT findfont ct_VMDictPut/OZLZKD+ArialMT*1 [48{/.notdef}rp /zero /one /two /three /four /five /six 201{/.notdef}rp]OZLZKD+ArialMT nfOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf33.4648 201.169 mo(0)sh33.4658 176.954 mo(1)sh33.4658 152.737 mo(2)sh33.4658 128.521 mo(3)sh33.4658 104.306 mo(4)sh33.4648 80.0889 mo(5)sh33.4658 55.873 mo(6)shgrestore
gsave
0 252 mo
252 252 li
252 0 li
0 0 li
0 252 li
cp
clp
false sop
0.858823 0.85098 0.788235 1 cmyk
%ADOBeginSubsetFont: Arial-BoldMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Arial-BoldMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 69 /E putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 104 /h putdup 105 /i putdup 110 /n putdup 112 /p putdup 114 /r putdup 116 /t putdup 117 /u putdef/FontBBox {-628 -376 2000 1018} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings16 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/space <1C60D8A8C9B854D00D> |-/parenleft <1C60D8A8C9B81F2C3A38FE2380A125A3D62A2B0F4BC8C0A2696756F8DA43B0889958C87C94E22D1A3213B46963E9329DE74757B6B3A525736D1B5EF52A1F5DA4AB3530EF8C585FE2B823D2C3202FD1D141> |-/parenright <1C60D8A8C9B81F2C3AAF50C85EC663E0CCB811D457CFC013664AB412D10018FBA420C16D8F84D8F6E7BA7121948DF6CD1C73671ADC1920E6D6FF996F7B703AB39EFF7B605E03487B46179AEA4BBEE9CF34960D70C11D2E> |-/E <1C60D8A8C9B64EDFFB871F4BC81FBDF202F74A2A9990666F4653F156EEAFD5D786BB69DEDB8B2E0A95C5AFB0A097> |-/a <1C60D8A8C9B7EF322B767253CD3BE18E6883E9BFEE680E471A3E543E6B629FFE599C78BF6E9BC360B4FD3F4193BE88F8A133134BAA650EBC31A9DBCA73D443463241F1A95A036612031AED6950283B0D14D29C497685C55C7946BF118B40E370FC30C35C6DDC0B89863AEC8E7000DED8B394346462262BD43999923C02BB76E45D38F5FACA7247DBA2EBA6371EEFDE7DB20E4C849532AD601D5FE565E2F9524F3166F0EDA1C9CBD6F2D9FAE6CBD991E5FC9CACD3E5ACCC612FA46CAB683778C9E93119C2E309BBBA2FB6B108D4ACC24630A4E27912F2F48E37DD6F256C920ECC30772CD6DD1CCCB84D330E3FAA> |-/c <1C60D8A8C9B7EF32242001ABD2AFBBD336641D8D7284783472C96CFCC434DFC100FC24422711A9090DEA4D32109037578992AFF27835B7F260887A799CBA44C497ED942D76A3A4BD63536DE6F757481EB22D2DEF055F331ED9622202739AC583596554B76ADC212E19C7FBCE810B4022B5DAB3AF3C114AF2730DCBE9D35CB6B42E872730D77BAB> |-/d <1C60D8A8C9B7D8BE1937528A8A04A3F08B6D80EAB145BDD9DBE53FB1B70A6DDBF10422FFF8F4C48F788DD104B24EA5229392446A977753676010F47763954952B19E372D9318BC5C7A48B7A85FDEA74862756E58887CA2F53B9D7C319DD7A84656FBF89C0C66533E86D0B18AA2C13EC41ADA69D4E07EF68978C6DC11D8A9705A6EC736D21DD4607DF3> |-/e <1C60D8A8C9B7EF322BF270AB151730C1576B3DBF6DAC6B05EF7C7C2AC3550E4D7D76EEB5EC00E2AE0B63EA674701E41362C9EF4C943E6044930A81C0288C730E9CD4222EC82D37FE43450E9A846C17FEBAA9742B3180B655FFA4E0E014EF214E09E7DE6E45A7476C6DEA21B47E198DDC2AD648DA39E6CBF2981071855AA94524E4E0809AB2B25573430347DD> |-/h <1C60D8A8C9B7D8BE30E20DCA6EE6AB6CC3B52F6392A45738EC6E57C5FD4B5006DD4CC13130165A71E6C8AD32848FD70F464465300BAF67B8EDC5E52749AF8D970E7EFFDCC8EF63F6AB31364E59004A6FCF5A143C0BB48A0AC6C4FDED1312DDD5BAEDEFE14256E656A094680FE5979938> |-/i <1C60D8A8C9B854D0F456B21D2F64F910BA7B8B592C84A4B1CA21D58F6678BEC800D8864E53D53A> |-/n <1C60D8A8C9B7D8BE193B13518E6892DBA9B266D0A17D5C8CBB8FCA3DEC31FFDE21FB19188C5C709BB859EE16635D8123C09E9F6380448F624FEDEAFC78CB8E4436A865BB0CB81152FE1F90E6EB1DE7D9B62F15D5F2855507D6B695B1CC6AFD11F003818163793142F6A0F46BD84EFADF> |-/p <1C60D8A8C9B7D8BE2E8563B32C07DCC3804272870E069E443B687857C9ACB5C7CA1CF4F6A17C25172CC3E3E31B65AB87A5F695EADCB9429C1CB7981C750B5DB31D41989E5AF25C22D1AF173045FD1E2E798D136DAECB194448D3991450715E7374AE8B43D8B50AD9D750A67743A1F2A35DFF73BE71D039D15D8530023A7DA074A0D1B66504E092406A88A86DBDD558> |-/r <1C60D8A8C9B7361F02EEC91E54B85D1C77E667FE2BCF3D09A421FBF63CB630EA2A0B7B19FFD8078B4DB5A7731C633809BCAB3FF296D65B89F29DE6B6DB35AA635F12FEC0F1664A8FB613C79352FA72> |-/t <1C60D8A8C9B81F2C3AD0BF8CA40D7105A9B3D27345F202DEBDE44606EFD0E90137AE13DC9D19FB7B4ABCA40FDADEB59FF02A690A47D6F26E8BDAADCFC0513C14FCD80BF39C6AFCEFE1132622D45FBB576E32F86682C5BCCAD00B4E7E375350009EFCA5AC835906F56B697B29> |-/u <1C60D8A8C9B7D8BE193D97D4CEC9E264886B4FEB6039471A932F20C88E939BABF490859EEC52AD38B7ED294F8DF2A47649EF77BF43349A736D065D0A253D952638D54F7BA1B47314F68FC1495C51454777F8F9475426838BE461BAFE9BF3E443E03AAD9292AF57449A5275904AD9> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/OZLZKE+Arial-BoldMT /Arial-BoldMT findfont ct_VMDictPut/OZLZKE+Arial-BoldMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 27{/.notdef}rp /E 27{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp /h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r /.notdef /t /u 138{/.notdef}rp]OZLZKE+Arial-BoldMT nfOZLZKE+Arial-BoldMT*1 [11.952 0 0 -11.952 0 0 ]msf64.2471 28.1816 mo(Eutheria \(punctuated\))[7.97168 7.30078 3.97998 7.30078 6.64697 4.65137 3.3208 6.64697 3.3208 3.97998 7.30078 7.30078 7.30078 6.64697 3.97998 7.30078 6.64697 3.97998 6.64697 7.30078 0 ]xsh%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOZLZKD+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/parenleft <1C60D8A8C9B81F2C3A069EC278D0AA8AE7E32C29FB8AFD2B6368260D302C905A973F0B3449ED9E18E81E16B7B273530E9BC14ED76D4376A01C0A577DC235F833AFCC30669C812FBF097879E1> |-/parenright <1C60D8A8C9B81F2C3A30D3A3F0A8D738E712823A2480470C32A2885DCE4A77E926C520C7B7E1016BB28443D8E7B8AC0F7C4F3BD721C19F19D4714AF52ABD0227B6CDD854C568D5A6F3817645C5> |-/M <1C60D8A8C9B6B41CBB4B6664BFFC865F56E6FEAFA79E7B90883C1C68AFB379AC174B0F8DCC9294E2C26BD06BBA9FD3867F8768651EF4BA798B4F538FCE8F80AF5A83421F8F> |-/T <1C60D8A8C9B7D8BE16D2C1CA7ED2E06F707C0E9530AE37D06FF7501A595D3927> |-/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177B5D88A> |-/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D36548FE63FC8465B1B685766E782F0> |-/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D9621458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37295284C077711C162623860AACA404F650F8D516970257> |-/f <1C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C5663BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61CF3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |-/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B171C8A80AB> |-/m <1C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519AD5BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD99C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176AFB9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D55C54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE37B> |-/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5203A8015DD09B7CE> |-/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A987875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F518C54BB58C51D6FB6D0C8> |-/p <1C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B96470F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F436330DC4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F556CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672C1E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |-/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619ADD420F549AB7C795751D32E8EE6> |-/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F4172D53C8FCAF4D28F2B78D3A4BF03> |-/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F5C42C88FB43C> |-systemdict /gcheck known {setglobal} if end {end} ifendOZLZKD+ArialMT /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 77 /M putdup 84 /T putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 105 /i putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putpop%ADOEndSubsetFont
/OZLZKD+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six 22{/.notdef}rp /M 6{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t 139{/.notdef}rp]OZLZKD+ArialMT nfOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf103.315 249.609 mo(Time \(Ma\))[6.08398 2.21289 8.29688 5.53906 2.76709 3.31689 8.29688 5.53906 0 ]xshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf9.56152 228.146 mo(Tips and nodes median distance from centroid)[-6.08398 -2.21289 -5.53906 -4.97998 -2.76709 -5.53906 -5.53906 -5.53906 -2.76709 -5.53906 -5.53906 -5.53906 -5.53906 -4.97998 -2.76709 -8.29688 -5.53906 -5.53906 -2.21289 -5.53906 -5.53906 -2.76709 -5.53906 -2.21289 -4.97998 -2.76709 -5.53906 -5.53906 -4.97998 -5.53906 -2.76709 -2.76709 -3.31689 -5.53906 -8.29688 -2.76709 -4.97998 -5.53906 -5.53906 -2.76709 -3.31689 -5.53906 -2.21289 0 ]yshgrestore
gsave
0 504 mo
504 504 li
504 0 li
0 0 li
0 504 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
53.6001 204.192 mo
198.4 204.192 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
53.6001 204.192 mo
53.6001 210.168 li
@
74.894 204.192 mo
74.894 210.168 li
@
96.1885 204.192 mo
96.1885 210.168 li
@
117.482 204.192 mo
117.482 210.168 li
@
138.776 204.192 mo
138.776 210.168 li
@
160.071 204.192 mo
160.071 210.168 li
@
181.365 204.192 mo
181.365 210.168 li
@
198.4 204.192 mo
198.4 210.168 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOZLZKD+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B7EF32245185D6A5516F33DB78352C4AC565B22360E031CB3B71A1D11654727B1436E7590FC689EA5F1279CA132C8529B81FF9BDC95FE0F55546101EE3> |-systemdict /gcheck known {setglobal} if end {end} ifendOZLZKD+ArialMT /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
/OZLZKD+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six /seven 21{/.notdef}rp /M 6{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t 139{/.notdef}rp]OZLZKD+ArialMT nfOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf45.291 225.705 mo(170)[5.53906 5.53906 0 ]xsh87.8794 225.705 mo(120)[5.53906 5.53906 0 ]xsh133.237 225.705 mo(70)[5.53906 0 ]xsh154.531 225.705 mo(45)[5.53906 0 ]xsh175.825 225.705 mo(20)[5.53906 0 ]xsh195.63 225.705 mo(0)shgrestore
gsave
47.8081 204.192 mo
204.192 204.192 li
204.192 47.8081 li
47.8081 47.8081 li
47.8081 204.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
74.1826 64.0986 mo
75.1387 63.1426 li
false sop
0.203922 0.14902 0.145098 0 cmyk
@
71.0562 68.4976 mo
76.2119 63.3423 li
@
66.0381 74.7886 mo
77.2852 63.5415 li
@
65.6182 76.481 mo
78.3584 63.7412 li
@
65.1982 78.1738 mo
79.5264 63.8457 li
@
64.7783 79.8667 mo
80.9663 63.6787 li
@
64.3584 81.5591 mo
82.4063 63.5117 li
@
63.9385 83.252 mo
84.0889 63.1016 li
@
63.519 84.9443 mo
86.3345 62.1289 li
@
63.0991 86.6372 mo
88.0854 61.6509 li
@
57.8452 93.1636 mo
58.1343 92.875 li
@
62.6792 88.3301 mo
89.1099 61.8994 li
@
57.7007 94.5811 mo
61.1138 91.168 li
@
62.2593 90.0225 mo
90.1343 62.1475 li
@
57.5562 95.9985 mo
91.1582 62.396 li
@
57.4111 97.416 mo
92.27 62.5571 li
@
57.2666 98.8335 mo
93.6479 62.4521 li
@
57.1221 100.251 mo
95.0259 62.3472 li
@
56.9771 101.668 mo
96.4907 62.1553 li
@
56.8325 103.086 mo
98.4238 61.4946 li
@
56.688 104.503 mo
100.357 60.834 li
@
56.543 105.921 mo
101.738 60.7261 li
@
56.3984 107.338 mo
103.091 60.6455 li
@
56.2539 108.756 mo
104.445 60.5645 li
@
56.1089 110.173 mo
87.1245 79.1582 li
@
88.1743 78.1079 mo
105.855 60.4272 li
@
55.9644 111.591 mo
86.5249 81.0303 li
@
88.7275 78.8276 mo
107.279 60.2764 li
@
55.8198 113.008 mo
85.9258 82.9023 li
@
89.2803 79.5479 mo
108.703 60.125 li
@
55.6748 114.426 mo
85.3267 84.7744 li
@
89.8335 80.2676 mo
110.51 59.5903 li
@
55.5303 115.843 mo
84.7271 86.6465 li
@
90.3862 80.9873 mo
112.404 58.9692 li
@
55.3857 117.261 mo
84.1279 88.5186 li
@
90.9395 81.707 mo
113.888 58.7583 li
@
55.2407 118.678 mo
83.5283 90.3906 li
@
91.4922 82.4268 mo
115.059 58.8604 li
@
55.0962 120.096 mo
79.0771 96.1152 li
@
92.1475 83.0444 mo
100.434 74.7583 li
@
100.474 74.7178 mo
116.229 58.9629 li
@
54.9512 121.513 mo
78.8755 97.5894 li
@
93.189 83.2759 mo
99.3394 77.1255 li
@
102.682 73.7827 mo
117.4 59.0649 li
@
54.8066 122.931 mo
78.6738 99.064 li
@
94.2305 83.5068 mo
98.2451 79.4927 li
@
104.942 72.7949 mo
119.134 58.6035 li
@
54.6621 124.349 mo
78.4722 100.538 li
@
95.272 83.7383 mo
97.1509 81.8594 li
@
107.78 71.23 mo
120.911 58.0991 li
@
54.5171 125.766 mo
78.2705 102.013 li
@
111.437 68.8467 mo
122.369 57.9146 li
@
54.3726 127.184 mo
78.0688 103.487 li
@
114.914 66.6421 mo
123.546 58.0093 li
@
54.228 128.601 mo
77.8672 104.961 li
@
117.726 65.1035 mo
124.725 58.1045 li
@
54.083 130.019 mo
77.666 106.436 li
@
119.744 64.3579 mo
125.902 58.1992 li
@
53.9385 131.436 mo
77.4644 107.91 li
@
121.75 63.624 mo
127.228 58.147 li
@
53.7939 132.854 mo
77.2627 109.384 li
@
122.652 63.9951 mo
128.566 58.0811 li
@
53.6489 134.271 mo
77.061 110.859 li
@
123.553 64.3667 mo
129.905 58.0151 li
@
53.6001 135.593 mo
76.8594 112.333 li
@
124.455 64.7378 mo
131.012 58.1807 li
@
53.6001 136.865 mo
76.6577 113.808 li
@
125.356 65.1094 mo
132.037 58.4287 li
@
53.6001 138.138 mo
76.4561 115.282 li
@
126.777 64.9609 mo
133.061 58.6772 li
@
53.6001 139.411 mo
76.2549 116.756 li
@
129.496 63.5156 mo
134.086 58.9253 li
@
53.6001 140.684 mo
76.0532 118.231 li
@
130.873 63.4111 mo
135.555 58.729 li
@
53.6001 141.957 mo
75.8516 119.705 li
@
131.726 63.8306 mo
137.349 58.208 li
@
53.6001 143.229 mo
75.6499 121.18 li
@
132.58 64.2495 mo
139.095 57.7349 li
@
53.6001 144.502 mo
75.4482 122.654 li
@
133.434 64.6689 mo
140.655 57.4473 li
@
53.6001 145.775 mo
75.2466 124.128 li
@
134.287 65.0884 mo
142.216 57.1597 li
@
53.6001 147.048 mo
75.0449 125.603 li
@
137.156 63.4917 mo
143.529 57.1191 li
@
53.6001 148.321 mo
74.7852 127.136 li
@
139.602 62.3193 mo
144.568 57.3525 li
@
53.6001 149.593 mo
74.3501 128.843 li
@
141.097 62.0972 mo
145.607 57.5864 li
@
53.6001 150.866 mo
73.9155 130.551 li
@
142.591 61.875 mo
146.646 57.8198 li
@
53.6001 152.139 mo
73.4805 132.258 li
@
143.637 62.1021 mo
147.818 57.9209 li
@
53.6001 153.412 mo
73.0454 133.966 li
@
144.493 62.5186 mo
149.209 57.8027 li
@
53.6001 154.685 mo
72.6108 135.674 li
@
145.35 62.9351 mo
150.6 57.6846 li
@
53.6001 155.958 mo
72.1758 137.381 li
@
146.206 63.3521 mo
151.88 57.6772 li
@
53.6001 157.23 mo
71.7412 139.089 li
@
147.062 63.7686 mo
152.919 57.9111 li
@
53.6001 158.503 mo
71.3062 140.797 li
@
148.372 63.731 mo
153.958 58.1445 li
@
53.6001 159.776 mo
70.8716 142.504 li
@
149.852 63.5234 mo
154.998 58.3779 li
@
53.6001 161.049 mo
69.6729 144.976 li
@
151.332 63.3164 mo
156.054 58.5952 li
@
53.6001 162.321 mo
67.5674 148.354 li
@
152.047 63.874 mo
157.168 58.7529 li
@
53.6001 163.594 mo
65.8936 151.301 li
@
152.629 64.5654 mo
158.283 58.9111 li
@
53.6001 164.867 mo
64.7813 153.686 li
@
153.21 65.2568 mo
159.398 59.0688 li
@
53.6001 166.14 mo
63.6694 156.07 li
@
153.792 65.9482 mo
160.643 59.0967 li
@
53.6001 167.413 mo
62.5571 158.455 li
@
154.373 66.6396 mo
162.085 58.9272 li
@
53.6001 168.686 mo
62.0234 160.262 li
@
154.954 67.3311 mo
163.528 58.7573 li
@
53.6001 169.958 mo
61.8672 161.691 li
@
155.536 68.0225 mo
164.941 58.6172 li
@
53.6001 171.231 mo
61.7114 163.12 li
@
156.254 68.5762 mo
166.316 58.5146 li
@
53.6001 172.504 mo
61.5552 164.548 li
@
157.098 69.0054 mo
167.692 58.4121 li
@
53.6001 173.776 mo
61.3994 165.978 li
@
157.942 69.4346 mo
168.981 58.3955 li
@
53.6001 175.049 mo
61.2432 167.406 li
@
158.786 69.8633 mo
170.108 58.5415 li
@
53.6001 176.322 mo
61.0874 168.835 li
@
159.63 70.2925 mo
171.235 58.687 li
@
53.6001 177.595 mo
60.9312 170.264 li
@
160.69 70.5049 mo
172.362 58.8325 li
@
53.6001 178.868 mo
60.7754 171.692 li
@
161.987 70.481 mo
177.455 55.0127 li
@
53.6001 180.141 mo
60.6191 173.121 li
@
163.283 70.457 mo
178.907 54.833 li
@
53.6001 181.413 mo
60.4629 174.55 li
@
164.483 70.5298 mo
180.36 54.6533 li
@
53.6001 182.686 mo
60.3071 175.979 li
@
165.281 71.0049 mo
181.866 54.4199 li
@
53.6001 183.959 mo
60.1509 177.408 li
@
166.079 71.4805 mo
183.494 54.0645 li
@
53.6001 185.231 mo
59.9951 178.836 li
@
166.876 71.9556 mo
185.122 53.7095 li
@
53.6001 186.504 mo
59.8389 180.266 li
@
167.673 72.4312 mo
186.38 53.7246 li
@
53.6001 187.777 mo
59.6831 181.694 li
@
168.471 72.9063 mo
187.473 53.9048 li
@
53.6001 189.05 mo
59.5269 183.123 li
@
169.203 73.4468 mo
188.565 54.085 li
@
53.6001 190.323 mo
59.3711 184.552 li
@
169.925 73.998 mo
189.658 54.2651 li
@
53.6001 191.596 mo
59.2148 185.98 li
@
170.646 74.5498 mo
190.847 54.3486 li
@
53.6001 192.868 mo
59.0591 187.409 li
@
171.367 75.1011 mo
192.061 54.4077 li
@
53.6001 194.141 mo
58.9028 188.838 li
@
172.088 75.6528 mo
193.274 54.4668 li
@
53.6001 195.414 mo
58.7471 190.267 li
@
172.81 76.2041 mo
194.542 54.4727 li
@
53.6001 196.687 mo
58.5908 191.696 li
@
173.62 76.667 mo
195.941 54.3452 li
@
53.6001 197.959 mo
58.4351 193.125 li
@
174.435 77.125 mo
197.341 54.2183 li
@
54.4321 198.4 mo
58.2788 194.554 li
@
175.25 77.583 mo
198.4 54.4321 li
@
55.7051 198.4 mo
58.123 195.982 li
@
176.064 78.041 mo
180.053 74.0522 li
@
182.417 71.688 mo
198.4 55.7051 li
@
56.978 198.4 mo
57.9668 197.411 li
@
176.879 78.499 mo
177.748 77.6304 li
@
184.267 71.1113 mo
198.4 56.978 li
@
185.933 70.7178 mo
198.4 58.251 li
@
187.095 70.8286 mo
198.4 59.5234 li
@
188.257 70.9395 mo
198.4 60.7964 li
@
189.418 71.0508 mo
198.4 62.0693 li
@
191.189 70.5527 mo
198.4 63.3418 li
@
193.365 69.6499 mo
198.4 64.6147 li
@
194.679 69.6084 mo
198.4 65.8877 li
@
195.516 70.0444 mo
198.4 67.1602 li
@
196.352 70.481 mo
198.4 68.4331 li
@
197.188 70.917 mo
198.4 69.7061 li
@
198.025 71.3535 mo
198.4 70.9785 li
@
53.6001 198.4 mo
57.8589 198.4 li
62.1177 159.398 li
66.3765 150.265 li
70.6353 143.432 li
74.894 126.708 li
79.1528 95.5591 li
83.4116 90.7554 li
87.6704 77.4521 li
91.9292 82.9961 li
96.1885 83.9419 li
100.447 74.7295 li
104.706 72.9258 li
108.965 70.5767 li
113.224 67.5957 li
117.482 65.1929 li
121.741 63.6201 li
126 65.3745 li
130.259 63.1099 li
134.518 65.2017 li
138.776 62.4419 li
143.035 61.8091 li
147.294 63.8818 li
151.553 63.2856 li
155.812 68.3516 li
160.071 70.5166 li
164.33 70.438 li
168.588 72.9766 li
172.847 76.2329 li
177.106 78.6265 li
181.365 72.0161 li
185.624 70.688 li
189.882 71.0947 li
194.141 69.3276 li
198.4 71.5488 li
198.4 54.1221 li
194.141 54.5088 li
189.882 54.3018 li
185.624 53.6001 li
181.365 54.5293 li
177.106 55.0562 li
172.847 58.8955 li
168.588 58.3447 li
164.33 58.6631 li
160.071 59.1641 li
155.812 58.561 li
151.553 57.604 li
147.294 57.9653 li
143.035 57.0083 li
138.776 57.7935 li
134.518 59.0303 li
130.259 57.9976 li
126 58.2075 li
121.741 57.8638 li
117.482 59.0723 li
113.224 58.7007 li
108.965 60.0977 li
104.706 60.5488 li
100.447 60.8032 li
96.1885 62.2583 li
91.9292 62.583 li
87.6704 61.5503 li
83.4116 63.395 li
79.1528 63.8892 li
74.894 63.0972 li
70.6353 69.0898 li
66.3765 73.4248 li
62.1177 90.5928 li
57.8589 93.0327 li
53.6001 134.751 li
53.6001 198.4 li
@
65.7451 81.8696 mo
66.8218 80.793 li
0.301961 0.227451 0.215686 0 cmyk
@
74.709 72.9063 mo
75.25 72.3647 li
@
65.0073 84.3047 mo
67.3423 81.9697 li
@
74.1528 75.1592 mo
76.3174 72.9946 li
@
64.2695 86.7393 mo
67.8628 83.1465 li
@
73.5972 77.4121 mo
77.3848 73.624 li
@
57.7144 94.9917 mo
59.0415 93.6646 li
@
63.5317 89.1743 mo
68.3828 84.3232 li
@
73.041 79.665 mo
78.4526 74.2534 li
@
82.5303 70.1758 mo
84.0972 68.6089 li
@
57.5186 96.8848 mo
60.6465 93.7568 li
@
62.7939 91.6089 mo
68.9033 85.4995 li
@
72.4854 81.918 mo
87.8228 66.5806 li
@
57.3228 98.7773 mo
69.4238 86.6763 li
@
71.9292 84.1709 mo
74.4536 81.6465 li
@
76.0342 80.0659 mo
89.2441 66.856 li
@
57.127 100.67 mo
69.9443 87.853 li
@
71.3735 86.4238 mo
73.9185 83.8784 li
@
77.4194 80.3774 mo
90.6655 67.1318 li
@
56.9307 102.563 mo
70.4644 89.0298 li
@
70.8179 88.6768 mo
73.3838 86.1108 li
@
78.8047 80.6895 mo
83.5181 75.9766 li
@
88.959 70.5352 mo
92.1343 67.3599 li
@
56.7349 104.456 mo
72.8486 88.3428 li
@
90.6123 70.5791 mo
93.9839 67.2075 li
@
56.5391 106.349 mo
72.3135 90.5752 li
@
92.2358 70.6528 mo
95.833 67.0557 li
@
56.3433 108.242 mo
71.7783 92.8071 li
@
93.7402 70.8447 mo
100.936 63.6499 li
@
56.1475 110.135 mo
71.2432 95.0391 li
@
95.2451 71.0371 mo
102.271 64.0112 li
@
55.9517 112.028 mo
70.708 97.2715 li
@
98.6499 69.3296 mo
103.606 64.373 li
@
55.7554 113.921 mo
70.3496 99.3271 li
@
101.938 67.7383 mo
105.146 64.5303 li
@
55.5596 115.814 mo
70.0186 101.355 li
@
103.989 67.3848 mo
107.641 63.7329 li
@
55.3638 117.707 mo
69.688 103.383 li
@
106.366 66.7051 mo
111.174 61.897 li
@
55.168 119.6 mo
69.3569 105.411 li
@
108.918 65.8501 mo
114.229 60.5381 li
@
54.9722 121.493 mo
69.0264 107.438 li
@
112.191 64.2734 mo
116.011 60.4531 li
@
54.7764 123.386 mo
68.6953 109.466 li
@
114.961 63.2007 mo
117.888 60.2739 li
@
54.5801 125.279 mo
68.3647 111.494 li
@
117.493 62.3657 mo
120.213 59.6455 li
@
54.3843 127.171 mo
68.0337 113.522 li
@
119.767 61.7886 mo
122.25 59.3057 li
@
54.1885 129.064 mo
67.7031 115.55 li
@
121.912 61.3413 mo
123.736 59.5166 li
@
53.9927 130.958 mo
67.3721 117.578 li
@
123.204 61.7461 mo
125.222 59.728 li
@
53.7969 132.851 mo
67.041 119.606 li
@
124.497 62.1509 mo
126.937 59.7104 li
@
53.6011 134.743 mo
66.7104 121.634 li
@
125.789 62.5557 mo
128.903 59.4409 li
@
53.6001 136.441 mo
66.3794 123.662 li
@
128.377 61.6641 mo
130.659 59.3818 li
@
53.6001 138.138 mo
64.0195 127.719 li
@
130.649 61.0894 mo
131.948 59.79 li
@
53.6001 139.835 mo
62.0186 131.417 li
@
131.805 61.6304 mo
133.237 60.1982 li
@
53.6001 141.532 mo
61.5234 133.609 li
@
132.96 62.1719 mo
134.535 60.5977 li
@
53.6001 143.229 mo
61.0288 135.801 li
@
134.116 62.7134 mo
137.143 59.686 li
@
53.6001 144.927 mo
60.5337 137.993 li
@
137.05 61.4766 mo
139.548 58.978 li
@
53.6001 146.624 mo
60.0391 140.185 li
@
139.806 60.4175 mo
141.613 58.6104 li
@
53.6001 148.321 mo
59.5444 142.376 li
@
141.662 60.2593 mo
143.452 58.4683 li
@
53.6001 150.018 mo
59.0498 144.568 li
@
143.367 60.2505 mo
144.793 58.8252 li
@
53.6001 151.715 mo
58.5547 146.76 li
@
144.646 60.668 mo
146.133 59.1816 li
@
53.6001 153.412 mo
58.0601 148.952 li
@
145.926 61.0859 mo
147.559 59.4531 li
@
53.6001 155.109 mo
57.7622 150.947 li
@
147.206 61.5034 mo
149.538 59.1709 li
@
53.6001 156.806 mo
57.5986 152.807 li
@
149.031 61.3755 mo
151.517 58.8892 li
@
53.6001 158.503 mo
57.4355 154.667 li
@
150.896 61.2065 mo
152.71 59.3931 li
@
53.6001 160.2 mo
57.2725 156.527 li
@
152.2 61.6001 mo
153.888 59.9121 li
@
53.6001 161.897 mo
57.1094 158.388 li
@
153.198 62.2993 mo
155.066 60.4307 li
@
53.6001 163.594 mo
56.9463 160.248 li
@
154.196 62.998 mo
156.286 60.9077 li
@
53.6001 165.291 mo
56.7832 162.108 li
@
155.194 63.6973 mo
157.577 61.3145 li
@
53.6001 166.988 mo
56.6201 163.968 li
@
156.327 64.2617 mo
158.868 61.7207 li
@
53.6001 168.686 mo
56.4565 165.829 li
@
157.677 64.6084 mo
160.231 62.0537 li
@
53.6001 170.382 mo
56.2935 167.689 li
@
159.027 64.9556 mo
162.599 61.3828 li
@
53.6001 172.08 mo
56.1304 169.549 li
@
160.487 65.1924 mo
164.787 60.8926 li
@
53.6001 173.776 mo
55.9673 171.409 li
@
162.32 65.0566 mo
166.485 60.8911 li
@
53.6001 175.474 mo
55.8042 173.27 li
@
164.153 64.9204 mo
168.184 60.8901 li
@
53.6001 177.17 mo
55.6411 175.129 li
@
165.536 65.2354 mo
169.701 61.0698 li
@
53.6001 178.868 mo
55.478 176.99 li
@
166.87 65.5977 mo
171.162 61.3062 li
@
53.6001 180.564 mo
55.3145 178.85 li
@
168.204 65.9604 mo
172.623 61.5425 li
@
53.6001 182.262 mo
55.1514 180.71 li
@
169.489 66.3721 mo
174.378 61.4834 li
@
53.6001 183.959 mo
54.9883 182.57 li
@
170.755 66.8037 mo
176.188 61.3711 li
@
53.6001 185.656 mo
54.8252 184.431 li
@
172.021 67.2354 mo
178.033 61.2227 li
@
53.6001 187.353 mo
54.6621 186.291 li
@
174.257 66.6963 mo
179.917 61.0366 li
@
53.6001 189.05 mo
54.499 188.151 li
@
178.01 64.6401 mo
181.934 60.7163 li
@
53.6001 190.747 mo
54.3359 190.011 li
@
181.031 63.3164 mo
184.399 59.9478 li
@
53.6001 192.444 mo
54.1724 191.872 li
@
182.7 63.3438 mo
186.423 59.6211 li
@
53.6001 194.141 mo
54.0093 193.731 li
@
184.202 63.5396 mo
188.011 59.7305 li
@
53.6001 195.838 mo
53.8462 195.592 li
@
185.712 63.7256 mo
189.598 59.8398 li
@
53.6001 197.535 mo
53.6831 197.452 li
@
187.387 63.7485 mo
191.338 59.7969 li
@
189.062 63.771 mo
193.112 59.7207 li
@
190.76 63.7695 mo
194.777 59.7524 li
@
192.482 63.7446 mo
196.293 59.9326 li
@
194.2 63.7236 mo
197.81 60.1133 li
@
195.824 63.7964 mo
198.4 61.2207 li
@
197.449 63.8691 mo
198.4 62.9175 li
@
53.6001 198.4 mo
57.8589 149.843 li
62.1177 130.977 li
66.3765 123.681 li
70.6353 97.5752 li
74.894 79.8096 li
79.1528 80.7676 li
83.4116 76.1162 li
87.6704 70.501 li
91.9292 70.6138 li
96.1885 71.1577 li
100.447 67.9951 li
104.706 67.2612 li
108.965 65.834 li
113.224 63.7744 li
117.482 62.3687 li
121.741 61.2881 li
126 62.6216 li
130.259 60.9063 li
134.518 62.9014 li
138.776 60.5054 li
143.035 60.1421 li
147.294 61.5322 li
151.553 61.1475 li
155.812 64.1294 li
160.071 65.2236 li
164.33 64.9072 li
168.588 66.0649 li
172.847 67.5176 li
177.106 65.0361 li
181.365 63.1699 li
185.624 63.7246 li
189.882 63.7822 li
194.141 63.7207 li
198.4 63.9116 li
198.4 60.1836 li
194.141 59.6763 li
189.882 59.8594 li
185.624 59.5664 li
181.365 60.8936 li
177.106 61.314 li
172.847 61.5786 li
168.588 60.8896 li
164.33 60.8931 li
160.071 62.0996 li
155.812 60.7583 li
151.553 58.8843 li
147.294 59.4907 li
143.035 58.3574 li
138.776 59.1157 li
134.518 60.6035 li
130.259 59.2549 li
126 59.8389 li
121.741 59.2329 li
117.482 60.3833 li
113.224 60.5859 li
108.965 63.3096 li
104.706 64.6709 li
100.447 63.5176 li
96.1885 67.0264 li
91.9292 67.3765 li
87.6704 66.5508 li
83.4116 69.0034 li
79.1528 74.667 li
74.894 72.1548 li
70.6353 89.4155 li
66.3765 79.7861 li
62.1177 93.8413 li
57.8589 93.5967 li
53.6001 134.751 li
53.6001 198.4 li
@
53.6001 134.751 mo
57.8589 102.091 li
62.1177 120.396 li
66.3765 83.2065 li
70.6353 91.3936 li
74.894 76.2832 li
79.1528 76.8643 li
83.4116 71.9404 li
87.6704 68.8633 li
91.9292 68.9048 li
96.1885 69.2886 li
100.447 65.6821 li
104.706 65.9199 li
108.965 64.7993 li
113.224 62.2349 li
117.482 61.2397 li
121.741 60.0703 li
126 61.355 li
130.259 60.1177 li
134.518 61.6484 li
138.776 59.729 li
143.035 59.1855 li
147.294 60.3359 li
151.553 59.751 li
155.812 62.8022 li
160.071 64.0928 li
164.33 63.4443 li
168.588 64.5435 li
172.847 64.1797 li
177.106 62.5996 li
181.365 62.0962 li
185.624 62.6436 li
189.882 62.6948 li
194.141 62.7061 li
198.4 62.8931 li
0.858823 0.85098 0.788235 1 cmyk
@
grestore
gsave
47.8081 204.192 mo
204.192 204.192 li
204.192 47.8081 li
47.8081 47.8081 li
47.8081 204.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[4 4 ] 0 dsh
true sadj
53.6001 198.4 mo
57.8589 194.78 li
62.1177 191.16 li
66.3765 183.92 li
70.6353 187.54 li
74.894 176.68 li
79.1528 180.3 li
83.4116 165.82 li
87.6704 158.58 li
91.9292 154.96 li
96.1885 158.58 li
100.447 151.34 li
104.706 140.48 li
108.965 133.24 li
113.224 118.76 li
117.482 122.38 li
121.741 100.66 li
126 100.66 li
130.259 78.9399 li
134.518 93.4199 li
138.776 53.6001 li
143.035 53.6001 li
147.294 82.5601 li
151.553 86.1802 li
155.812 111.52 li
160.071 126 li
164.33 126 li
168.588 140.48 li
172.847 151.34 li
177.106 154.96 li
181.365 154.96 li
185.624 158.58 li
189.882 158.58 li
194.141 158.58 li
198.4 158.58 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
grestore
gsave
0 504 mo
504 504 li
504 0 li
0 0 li
0 504 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[4 4 ] 0 dsh
true sadj
204.192 173.06 mo
204.192 64.46 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
204.192 173.06 mo
210.168 173.06 li
@
204.192 136.86 mo
210.168 136.86 li
@
204.192 100.66 mo
210.168 100.66 li
@
204.192 64.46 mo
210.168 64.46 li
@
OZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf225.705 178.599 mo(10)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf225.706 142.4 mo(20)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf225.706 106.199 mo(30)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf225.706 69.9995 mo(40)[-5.53906 0 ]yshgrestore
gsave
47.8081 204.192 mo
204.192 204.192 li
204.192 47.8081 li
47.8081 47.8081 li
47.8081 204.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
143.035 204.192 mo
143.035 47.8081 li
false sop
0 0.945098 0.937255 0 cmyk
@
grestore
gsave
299.808 204.192 mo
456.192 204.192 li
456.192 47.8081 li
299.808 47.8081 li
299.808 204.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
305.6 65.9175 mo
309.858 64.2222 li
314.117 66.1294 li
318.377 63.4604 li
322.636 75.2241 li
326.895 71.3936 li
331.153 71.4458 li
335.412 67.396 li
339.671 61.8301 li
343.93 64.0415 li
348.188 75.4136 li
352.447 73.6743 li
356.706 79.3765 li
360.965 78.9634 li
365.224 75.1758 li
369.482 71.2886 li
373.741 72.6704 li
378 72.2783 li
382.259 67.2192 li
386.518 75.9263 li
390.776 94.0366 li
395.035 82.1909 li
399.294 91.3613 li
403.553 88.9136 li
407.812 86.4629 li
412.07 79.7847 li
416.329 77.3301 li
420.588 74.2681 li
424.847 73.3418 li
429.105 71.3677 li
433.364 66.063 li
437.623 65.3525 li
441.883 65.0913 li
446.142 64.9116 li
450.4 65.0884 li
false sop
0 0 0 0 cmyk
@
grestore
gsave
0 504 mo
504 504 li
504 0 li
0 0 li
0 504 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
299.808 191.268 mo
299.808 51.1274 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
299.808 191.268 mo
293.832 191.268 li
@
299.808 167.911 mo
293.832 167.911 li
@
299.808 144.554 mo
293.832 144.554 li
@
299.808 121.197 mo
293.832 121.197 li
@
299.808 97.8408 mo
293.832 97.8408 li
@
299.808 74.4844 mo
293.832 74.4844 li
@
299.808 51.1274 mo
293.832 51.1274 li
@
OZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf285.465 194.036 mo(7)sh%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOZLZKD+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF320BBFC2657E9B35A6705AFBBFAA1C93BB40418E3C071A4B65F9256C97D19A81FC1920D97D74BDC10680B006C358F4A055E8EB310D17DB36B82D07BF6EC33DD32B1D55F043C26D6FDD8A81CBAE4C8F71815B896A63B1FDB98A0F7ECF9E837B10C378B26EDC5928C7E8B3799AB2CD264A8AEAC999F603BC4D805ED282A00B545281ED6B9C18B6DFE4AB08C5EA70E73FE4832D8BDE5A7EFB46CDDEE476E8817925C1CEAE85568DE92FBFB771DE6BBC3B6BB104C95219571FA1AFECF133380FB1F1E150D70FC591604EE1D20E2A6F50D40957F263D48A1A19A5D671D3A632D7FED2532ACF68D20DD9EC4B411696AEE5583B5D2BC1304A55977C35> |-systemdict /gcheck known {setglobal} if end {end} ifendOZLZKD+ArialMT /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/OZLZKD+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight 20{/.notdef}rp /M 6{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t 139{/.notdef}rp]OZLZKD+ArialMT nfOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf285.465 170.681 mo(8)sh%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOZLZKD+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/nine <1C60D8A8C9B7EF322B1E3B1A79A1DA03E10E600D068C6F2A2C380B0F6DEBD4D4DD1CC12D66AEECD714986D0BB404BEEE797B931765A09DB6972620435C3E53C33E82E82293552FE3F4B4A9CF87D2D3960A335325D9064F969F569869D5BECFFFACFCA41CE671D232207B2A9F695CAD03F11715AE00BA6E4E4DDB0F807E169B9324CB5646DCC83A5DE270DE3BAEFD03D20E077B3A9C59CEC5C162A3BD3072425BBF0BAF6222E938CACE57A2C4D75634AE3A010D0148B506BD06198AAAA27D1742624D1FE8845D19FF21CDB94B022766F89FD7433D600DF30C7FA27B03E17188994F16> |-systemdict /gcheck known {setglobal} if end {end} ifendOZLZKD+ArialMT /Encoding getdup 57 /nine putpop%ADOEndSubsetFont
/OZLZKD+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 19{/.notdef}rp /M 6{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t 139{/.notdef}rp]OZLZKD+ArialMT nfOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf285.466 147.323 mo(9)shOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf285.466 126.736 mo(10)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf285.466 103.38 mo(11)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf285.466 80.0234 mo(12)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf285.465 56.667 mo(13)[-5.53906 0 ]yshgrestore
gsave
252 252 mo
504 252 li
504 0 li
252 0 li
252 252 li
cp
clp
false sop
0.858823 0.85098 0.788235 1 cmyk
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOZLZKE+Arial-BoldMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/M <1C60D8A8C9B6B41CBB10CBFB014CB2DAA60D1E6213C9A6221D8277F76E5B198F877B8BD7F16B9ED33B8CC69F5CB1810DCABD4C90C49E0AA0E1EE> |-/f <1C60D8A8C9B81F2C5A71D50B9B0701F5A31E22DDFBF554FF2D149AB14DDEFC1B9ADBD8105EC88497FBC09B03794C95967111EB4354C8578F0E042075107F9743D9A4F26007EA81109EB5443BB577E4EC9F8677529403BA64E3F5> |-/l <1C60D8A8C9B854D0F4565C5D96D196F316A2594284F4> |-/m <1C60D8A8C9B59F85D96BFFA227AFC88923A0D1805E73B422C61096C748C37D1E540D36A22F2B6BC6A899BC0DDFB70F833AC344264273BAAFC893B1FC9ED217D777A23EE663B8B086E0514F75141042C5D3D73DD911F2D1CAF8A5CBE36BAF59E972B9B495DB672C658FCC56CEAEBD4AEC19A01E1468C48C0E75D0E664717269A1A74C27B1C65DA4B01A0679EBF4AA6549A7814A2C66FB097D4B1C6FCCF629A056E668289EBF7379F0E89EA139501E> |-/o <1C60D8A8C9B7D8BE34A30C11766266259B98A0BA89715D82F7092153A6228252D7594BDD75B2A7C57DC89088F8B1FFC43993725AE434A67B356F5F6B64D528A1696640F00DD016EBC232B8C863EA85B4B724E805002B9447A61792050E5F2AB51B8800BF6303526C74FB360B7027D54FFCEDAF13BF8EA7CB1A81691C0A4FB25E1EA64C0904433C6A5F35BBF9DD5C4CBFC1A5> |-/s <1C60D8A8C9B7EF322FE651D521834CDC537E3DD6EDE0ABF561677B8E076DDC9728066ABB56D1B743872DFE7AE020F0764CE3958A51AA0338BC1551D98AE3FB37FA10E152AF1ED0A626D6C892D666067C463296034FB47068E23F64D99406EC5C2C17229C4A63CE0EFA8720ACDB7F7406ADA1BC78971EA6415F061291692781A355051246F6EE6DC9DD910EE9B57ECB7AA0A970570176A3D15D1E3F2012D47AFFA014792503A125E8700D4C4B9A85575792648D6CE60E59BBF3015C0285B0> |-systemdict /gcheck known {setglobal} if end {end} ifendOZLZKE+Arial-BoldMT /Encoding getdup 77 /M putdup 102 /f putdup 108 /l putdup 109 /m putdup 111 /o putdup 115 /s putpop%ADOEndSubsetFont
/OZLZKE+Arial-BoldMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 27{/.notdef}rp /E 7{/.notdef}rp /M 19{/.notdef}rp /a /.notdef /c /d /e /f /.notdef /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]OZLZKE+Arial-BoldMT nfOZLZKE+Arial-BoldMT*1 [11.952 0 0 -11.952 0 0 ]msf291.333 28.1816 mo(Mammaliaformes \(punctuated\))[9.95605 6.64746 10.627 10.627 6.64746 3.32031 3.32031 6.64746 3.98047 7.30078 4.65137 10.627 6.64746 6.64746 3.32031 3.98047 7.30078 7.30078 7.30078 6.64746 3.98047 7.30078 6.64746 3.98047 6.64746 7.30078 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf355.315 249.609 mo(Time \(Ma\))[6.08398 2.21289 8.29688 5.53906 2.76758 3.31641 8.29688 5.53906 0 ]xshgrestore
gsave
0 504 mo
504 504 li
504 0 li
0 0 li
0 504 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
305.6 204.192 mo
450.4 204.192 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
305.6 204.192 mo
305.6 210.168 li
@
326.895 204.192 mo
326.895 210.168 li
@
348.188 204.192 mo
348.188 210.168 li
@
369.482 204.192 mo
369.482 210.168 li
@
390.776 204.192 mo
390.776 210.168 li
@
412.07 204.192 mo
412.07 210.168 li
@
433.364 204.192 mo
433.364 210.168 li
@
450.4 204.192 mo
450.4 210.168 li
@
OZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf297.291 225.705 mo(170)[5.53906 5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf339.879 225.705 mo(120)[5.53906 5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf385.237 225.705 mo(70)[5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf406.531 225.705 mo(45)[5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf427.825 225.705 mo(20)[5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf447.631 225.705 mo(0)shgrestore
gsave
299.808 204.192 mo
456.192 204.192 li
456.192 47.8081 li
299.808 47.8081 li
299.808 204.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
305.6 59.0356 mo
307.655 56.9805 li
false sop
0.203922 0.14902 0.145098 0 cmyk
@
305.6 60.3086 mo
309.895 56.0137 li
@
305.6 61.5815 mo
310.849 56.3325 li
@
305.6 62.854 mo
311.803 56.6514 li
@
305.6 64.127 mo
312.757 56.9702 li
@
305.6 65.3999 mo
313.711 57.2891 li
@
305.6 66.6724 mo
314.978 57.2949 li
@
305.6 67.9453 mo
316.478 57.0679 li
@
305.6 69.2183 mo
317.978 56.8408 li
@
305.6 70.4907 mo
318.865 57.2256 li
@
305.6 71.7637 mo
319.531 57.832 li
@
305.6 73.0366 mo
320.198 58.4385 li
@
305.6 74.3091 mo
320.864 59.0449 li
@
305.6 75.582 mo
321.53 59.6519 li
@
305.696 76.7583 mo
322.196 60.2583 li
@
307.774 75.9536 mo
323.256 60.4717 li
@
309.852 75.1489 mo
325.073 59.9272 li
@
310.472 75.8013 mo
326.89 59.3833 li
@
311.087 76.459 mo
328.238 59.3076 li
@
311.702 77.1167 mo
329.585 59.2334 li
@
312.317 77.7744 mo
330.933 59.1592 li
@
312.933 78.4321 mo
332.337 59.0278 li
@
313.548 79.0898 mo
316.385 76.252 li
@
318.491 74.1465 mo
333.752 58.8848 li
@
318.631 75.2788 mo
335.168 58.7422 li
@
318.771 76.4111 mo
337.387 57.7964 li
@
318.912 77.5435 mo
339.719 56.7368 li
@
319.053 78.6758 mo
340.846 56.8828 li
@
319.193 79.8081 mo
341.972 57.0293 li
@
319.333 80.9404 mo
343.099 57.1753 li
@
319.474 82.0728 mo
344.078 57.4683 li
@
319.614 83.2051 mo
344.646 58.1738 li
@
319.755 84.3374 mo
345.213 58.8789 li
@
319.896 85.4697 mo
345.78 59.5845 li
@
320.035 86.6021 mo
346.349 60.2896 li
@
320.176 87.7344 mo
346.916 60.9951 li
@
320.316 88.8672 mo
347.483 61.7002 li
@
320.457 89.9995 mo
348.051 62.4058 li
@
320.598 91.1318 mo
350.073 61.6558 li
@
320.738 92.2642 mo
338.415 74.5869 li
@
340.354 72.6479 mo
352.49 60.5117 li
@
320.878 93.3965 mo
336.953 77.3213 li
@
341.148 73.126 mo
353.419 60.8555 li
@
321.019 94.5288 mo
335.492 80.0552 li
@
341.943 73.604 mo
354.349 61.1987 li
@
321.159 95.6611 mo
334.271 82.5493 li
@
342.738 74.082 mo
355.278 61.5425 li
@
321.3 96.7935 mo
326.563 91.5303 li
@
328.326 89.7666 mo
333.064 85.0288 li
@
343.533 74.5601 mo
356.207 61.8857 li
@
321.44 97.9258 mo
326.15 93.2158 li
@
330.111 89.2539 mo
331.856 87.5088 li
@
344.003 75.3628 mo
357.597 61.7695 li
@
321.58 99.0581 mo
325.737 94.9014 li
@
344.149 76.4893 mo
359.518 61.1206 li
@
321.721 100.19 mo
325.324 96.5874 li
@
344.296 77.6157 mo
361.397 60.5137 li
@
321.861 101.323 mo
324.911 98.2729 li
@
344.442 78.7422 mo
363.15 60.0332 li
@
322.002 102.455 mo
324.498 99.959 li
@
344.589 79.8682 mo
364.904 59.5532 li
@
322.143 103.587 mo
324.085 101.645 li
@
344.735 80.9946 mo
366.226 59.5039 li
@
322.282 104.72 mo
323.672 103.33 li
@
344.882 82.1211 mo
367.451 59.5513 li
@
322.423 105.853 mo
323.26 105.016 li
@
345.028 83.2476 mo
368.677 59.5981 li
@
322.563 106.984 mo
322.847 106.702 li
@
345.174 84.374 mo
369.791 59.7573 li
@
345.32 85.5 mo
370.689 60.1313 li
@
345.467 86.6265 mo
371.589 60.5054 li
@
345.613 87.7529 mo
372.487 60.8794 li
@
345.76 88.8794 mo
373.386 61.2534 li
@
345.906 90.0054 mo
374.449 61.4624 li
@
346.053 91.1318 mo
375.621 61.564 li
@
346.199 92.2583 mo
376.792 61.6655 li
@
346.346 93.3848 mo
377.963 61.7676 li
@
346.492 94.5107 mo
380.602 60.4014 li
@
346.639 95.6372 mo
382.692 59.584 li
@
346.785 96.7637 mo
383.822 59.7261 li
@
346.932 97.8901 mo
352.29 92.5317 li
@
352.566 92.2549 mo
384.953 59.8682 li
@
347.078 99.0166 mo
351.812 94.2827 li
@
352.93 93.1646 mo
386.084 60.0103 li
@
347.225 100.143 mo
351.334 96.0332 li
@
353.293 94.0742 mo
386.777 60.5898 li
@
347.371 101.269 mo
350.855 97.7842 li
@
353.656 94.9839 mo
387.198 61.4419 li
@
347.518 102.396 mo
350.378 99.5352 li
@
354.02 95.8936 mo
387.619 62.2935 li
@
347.664 103.522 mo
349.9 101.286 li
@
354.383 96.8027 mo
388.04 63.1455 li
@
347.811 104.648 mo
349.422 103.037 li
@
354.746 97.7124 mo
388.461 63.9971 li
@
347.957 105.774 mo
348.944 104.787 li
@
355.109 98.6221 mo
388.882 64.8486 li
@
348.104 106.901 mo
348.466 106.538 li
@
355.473 99.5317 mo
389.304 65.7007 li
@
355.835 100.441 mo
389.725 66.5522 li
@
356.198 101.351 mo
390.146 67.4043 li
@
356.562 102.261 mo
390.566 68.2559 li
@
357.602 102.494 mo
369.248 90.8477 li
@
370.319 89.7764 mo
395.697 64.3979 li
@
359.086 102.282 mo
368.744 92.6235 li
@
372.111 89.2563 mo
397.541 63.8271 li
@
360.569 102.071 mo
368.241 94.3989 li
@
373.813 88.8276 mo
399.326 63.314 li
@
361.51 102.404 mo
367.738 96.1748 li
@
374.604 89.3101 mo
399.993 63.9199 li
@
362.253 102.934 mo
367.235 97.9507 li
@
375.394 89.7925 mo
400.66 64.5259 li
@
362.995 103.464 mo
366.732 99.7266 li
@
376.185 90.2749 mo
381.453 85.0059 li
@
382.356 84.1025 mo
401.327 65.1318 li
@
363.738 103.994 mo
366.229 101.502 li
@
376.975 90.7573 mo
379.95 87.7817 li
@
382.539 85.1934 mo
401.994 65.7373 li
@
364.48 104.524 mo
365.727 103.278 li
@
377.765 91.2397 mo
378.447 90.5576 li
@
382.721 86.2842 mo
402.661 66.3433 li
@
382.902 87.3745 mo
403.328 66.9492 li
@
405.001 65.2764 mo
408.235 62.0415 li
@
383.085 88.4653 mo
408.885 62.666 li
@
383.268 89.5562 mo
409.533 63.29 li
@
383.449 90.6465 mo
410.182 63.9141 li
@
383.631 91.7373 mo
410.83 64.5381 li
@
383.813 92.8281 mo
411.479 65.1626 li
@
383.995 93.9189 mo
413.741 64.1729 li
@
384.178 95.0093 mo
417.156 62.0308 li
@
384.359 96.1001 mo
418.114 62.3457 li
@
384.542 97.1909 mo
419.071 62.6611 li
@
384.724 98.2813 mo
420.029 62.9766 li
@
384.906 99.3721 mo
421.037 63.2407 li
@
385.088 100.463 mo
422.118 63.4331 li
@
385.271 101.553 mo
423.198 63.626 li
@
385.452 102.644 mo
424.278 63.8184 li
@
385.635 103.735 mo
425.612 63.7568 li
@
385.816 104.826 mo
427.229 63.4126 li
@
385.999 105.916 mo
428.847 63.0679 li
@
430.553 61.3618 mo
434.095 57.8203 li
@
386.181 107.007 mo
436.44 56.7476 li
@
386.363 108.098 mo
439.24 55.2202 li
@
386.527 109.206 mo
442.125 53.6079 li
@
386.589 110.417 mo
443.4 53.6055 li
@
386.651 111.628 mo
444.676 53.603 li
@
386.713 112.838 mo
445.951 53.6006 li
@
386.775 114.049 mo
447.215 53.6094 li
@
386.837 115.26 mo
448.477 53.6206 li
@
386.899 116.471 mo
449.738 53.6318 li
@
386.962 117.682 mo
450.4 54.2427 li
@
387.023 118.892 mo
450.4 55.5156 li
@
387.086 120.103 mo
450.4 56.7886 li
@
387.147 121.313 mo
450.4 58.061 li
@
387.21 122.524 mo
450.4 59.334 li
@
387.271 123.735 mo
450.4 60.6069 li
@
387.334 124.946 mo
450.4 61.8799 li
@
387.396 126.156 mo
428.371 85.1816 li
@
434.383 79.1699 mo
450.4 63.1523 li
@
387.458 127.367 mo
424.418 90.4077 li
@
437.217 77.6084 mo
438.239 76.5859 li
@
442.843 71.9819 mo
450.4 64.4253 li
@
387.52 128.578 mo
423.684 92.4146 li
@
443.975 72.123 mo
450.4 65.6982 li
@
387.582 129.789 mo
394.979 122.393 li
@
395.082 122.289 mo
422.949 94.4214 li
@
445.107 72.2637 mo
450.4 66.9707 li
@
387.645 131 mo
394.896 123.747 li
@
395.148 123.495 mo
422.216 96.4282 li
@
446.236 72.4072 mo
450.4 68.2437 li
@
387.706 132.21 mo
394.815 125.102 li
@
395.216 124.701 mo
421.481 98.4351 li
@
447.335 72.5811 mo
450.4 69.5166 li
@
387.769 133.421 mo
394.733 126.456 li
@
395.282 125.907 mo
420.747 100.442 li
@
448.435 72.7549 mo
450.4 70.7891 li
@
387.83 134.632 mo
394.651 127.81 li
@
395.349 127.113 mo
418.646 103.816 li
@
449.533 72.9287 mo
450.4 72.062 li
@
387.893 135.842 mo
394.57 129.165 li
@
395.416 128.319 mo
416.109 107.625 li
@
387.954 137.053 mo
394.488 130.519 li
@
395.482 129.525 mo
407.459 117.549 li
@
410.998 114.01 mo
412.769 112.239 li
@
388.017 138.264 mo
394.407 131.874 li
@
395.549 130.731 mo
406.89 119.391 li
@
388.078 139.475 mo
394.325 133.228 li
@
395.616 131.938 mo
406.32 121.233 li
@
388.141 140.686 mo
394.243 134.583 li
@
395.683 133.144 mo
405.751 123.075 li
@
388.203 141.896 mo
394.162 135.937 li
@
395.749 134.35 mo
405.182 124.917 li
@
388.265 143.107 mo
394.08 137.291 li
@
395.816 135.556 mo
404.612 126.759 li
@
388.327 144.317 mo
393.999 138.646 li
@
395.883 136.762 mo
404.043 128.602 li
@
388.389 145.528 mo
393.917 140 li
@
395.949 137.967 mo
403.541 130.376 li
@
388.451 146.739 mo
393.835 141.354 li
@
396.017 139.174 mo
403.456 131.733 li
@
388.513 147.95 mo
393.754 142.709 li
@
396.083 140.379 mo
403.372 133.091 li
@
388.575 149.16 mo
393.672 144.063 li
@
396.149 141.586 mo
403.287 134.449 li
@
388.637 150.371 mo
393.591 145.417 li
@
396.217 142.792 mo
403.202 135.806 li
@
388.699 151.582 mo
393.509 146.772 li
@
396.283 143.998 mo
403.117 137.164 li
@
388.761 152.792 mo
393.428 148.126 li
@
396.35 145.204 mo
403.032 138.521 li
@
388.823 154.003 mo
393.346 149.481 li
@
396.417 146.41 mo
402.948 139.879 li
@
388.886 155.214 mo
393.264 150.835 li
@
396.483 147.616 mo
402.863 141.236 li
@
388.947 156.425 mo
393.183 152.19 li
@
396.551 148.822 mo
402.778 142.594 li
@
389.01 157.636 mo
393.101 153.544 li
@
396.617 150.028 mo
402.693 143.952 li
@
389.071 158.846 mo
393.02 154.898 li
@
396.684 151.234 mo
402.608 145.309 li
@
389.134 160.057 mo
392.938 156.253 li
@
396.75 152.44 mo
402.524 146.667 li
@
389.195 161.268 mo
392.855 157.607 li
@
396.817 153.646 mo
402.439 148.024 li
@
389.258 162.479 mo
392.774 158.962 li
@
396.884 154.852 mo
402.354 149.382 li
@
389.319 163.689 mo
392.692 160.316 li
@
396.951 156.058 mo
402.27 150.739 li
@
389.382 164.9 mo
392.611 161.671 li
@
397.018 157.264 mo
402.185 152.097 li
@
389.444 166.11 mo
392.529 163.025 li
@
397.084 158.47 mo
402.101 153.454 li
@
389.506 167.321 mo
392.447 164.38 li
@
397.151 159.676 mo
402.016 154.812 li
@
389.568 168.532 mo
392.366 165.734 li
@
397.218 160.882 mo
401.931 156.169 li
@
389.63 169.743 mo
392.284 167.088 li
@
397.284 162.088 mo
401.846 157.527 li
@
389.692 170.954 mo
392.203 168.443 li
@
397.352 163.294 mo
401.761 158.885 li
@
389.754 172.164 mo
392.121 169.797 li
@
397.418 164.5 mo
401.677 160.242 li
@
389.816 173.375 mo
392.039 171.152 li
@
397.484 165.707 mo
401.592 161.6 li
@
389.878 174.586 mo
391.958 172.506 li
@
397.552 166.913 mo
401.507 162.957 li
@
389.94 175.796 mo
391.876 173.861 li
@
397.618 168.119 mo
401.422 164.314 li
@
390.003 177.007 mo
391.795 175.215 li
@
397.685 169.325 mo
401.338 165.672 li
@
390.064 178.218 mo
391.713 176.569 li
@
397.752 170.531 mo
401.253 167.03 li
@
390.127 179.429 mo
391.631 177.924 li
@
397.818 171.737 mo
401.168 168.387 li
@
390.188 180.64 mo
391.55 179.278 li
@
397.885 172.943 mo
401.083 169.745 li
@
390.251 181.85 mo
391.468 180.633 li
@
397.952 174.149 mo
400.998 171.103 li
@
390.313 183.061 mo
391.387 181.987 li
@
398.019 175.355 mo
400.914 172.46 li
@
390.375 184.271 mo
391.305 183.342 li
@
398.086 176.561 mo
400.829 173.817 li
@
390.437 185.482 mo
391.223 184.696 li
@
398.152 177.767 mo
400.744 175.175 li
@
390.499 186.693 mo
391.142 186.05 li
@
398.219 178.973 mo
400.659 176.533 li
@
390.561 187.904 mo
391.06 187.405 li
@
398.286 180.179 mo
400.574 177.89 li
@
390.623 189.114 mo
390.979 188.759 li
@
398.353 181.385 mo
400.49 179.248 li
@
390.686 190.325 mo
390.896 190.114 li
@
398.419 182.591 mo
400.405 180.605 li
@
390.747 191.536 mo
390.815 191.468 li
@
398.486 183.797 mo
400.32 181.963 li
@
398.553 185.003 mo
400.235 183.32 li
@
398.619 186.209 mo
400.15 184.678 li
@
398.687 187.416 mo
400.066 186.036 li
@
398.753 188.622 mo
399.981 187.393 li
@
398.819 189.828 mo
399.896 188.75 li
@
398.887 191.034 mo
399.812 190.108 li
@
398.953 192.24 mo
399.728 191.466 li
@
399.02 193.446 mo
399.643 192.823 li
@
399.087 194.652 mo
399.558 194.181 li
@
399.153 195.858 mo
399.473 195.538 li
@
399.221 197.064 mo
399.388 196.896 li
@
399.287 198.27 mo
399.304 198.253 li
@
305.6 76.7954 mo
309.858 75.146 li
314.117 79.6992 li
318.377 73.2246 li
322.636 107.563 li
326.895 90.1777 li
331.153 88.9551 li
335.412 80.2056 li
339.671 72.2373 li
343.93 74.7983 li
348.188 107.555 li
352.447 91.9556 li
356.706 102.621 li
360.965 102.015 li
365.224 105.054 li
369.482 90.019 li
373.741 88.7837 li
378 91.3833 li
382.259 83.5181 li
386.518 109.023 li
390.776 192.107 li
395.035 121.447 li
399.294 198.4 li
403.553 130.187 li
407.812 116.407 li
412.07 113.203 li
416.329 107.321 li
420.588 100.877 li
424.847 89.2334 li
429.105 84.3364 li
433.364 79.731 li
437.623 77.3843 li
441.883 71.8628 li
446.142 72.3926 li
450.4 73.0659 li
450.4 53.6377 li
446.142 53.6001 li
441.883 53.6084 li
437.623 56.2065 li
433.364 58.1543 li
429.105 63.0127 li
424.847 63.9199 li
420.588 63.1606 li
416.329 61.7583 li
412.07 65.7319 li
407.812 61.6338 li
403.553 67.1533 li
399.294 63.2847 li
395.035 64.6025 li
390.776 68.6812 li
386.518 60.0649 li
382.259 59.5293 li
378 61.7705 li
373.741 61.4009 li
369.482 59.6294 li
365.224 59.4653 li
360.965 60.6323 li
356.706 62.0703 li
352.447 60.4961 li
348.188 62.5767 li
343.93 57.2832 li
339.671 56.7305 li
335.412 58.7178 li
331.153 59.147 li
326.895 59.3818 li
322.636 60.6577 li
318.377 56.7803 li
314.117 57.4253 li
309.858 56.002 li
305.6 57.8931 li
305.6 76.7954 li
@
305.6 63.7026 mo
306.282 63.0205 li
0.301961 0.227451 0.215686 0 cmyk
@
305.6 65.3999 mo
310.448 60.5508 li
@
305.6 67.0967 mo
311.472 61.2251 li
@
306.763 67.6313 mo
312.494 61.8994 li
@
309.221 66.8706 mo
313.518 62.5732 li
@
310.713 67.0747 mo
315.343 62.4453 li
@
311.867 67.6182 mo
318.305 61.1797 li
@
313.021 68.1611 mo
318.863 62.3188 li
@
314.34 68.5396 mo
319.362 63.5171 li
@
318.419 66.1572 mo
319.86 64.7153 li
@
318.849 67.4248 mo
320.359 65.9136 li
@
319.278 68.6924 mo
320.858 67.1118 li
@
319.708 69.9595 mo
321.357 68.3105 li
@
320.137 71.2271 mo
321.855 69.5088 li
@
320.566 72.4946 mo
322.354 70.707 li
@
320.996 73.7622 mo
327.282 67.4766 li
@
321.426 75.0298 mo
328.934 67.522 li
@
321.855 76.2969 mo
330.585 67.5679 li
@
322.285 77.5645 mo
334.705 65.144 li
@
337.065 62.7847 mo
339.932 59.9175 li
@
327.184 74.3638 mo
341.205 60.3418 li
@
328.823 74.4209 mo
342.478 60.7666 li
@
330.463 74.4775 mo
343.75 61.1909 li
@
340.351 66.2871 mo
344.372 62.2656 li
@
341.61 66.7241 mo
344.888 63.4473 li
@
342.87 67.1616 mo
345.403 64.6284 li
@
343.998 67.7305 mo
345.919 65.8101 li
@
344.432 68.9941 mo
346.435 66.9912 li
@
344.865 70.2578 mo
346.95 68.1729 li
@
345.299 71.5215 mo
347.466 69.3545 li
@
345.732 72.7852 mo
347.981 70.5356 li
@
346.166 74.0488 mo
349.585 70.6294 li
@
346.599 75.3125 mo
351.916 69.9951 li
@
347.032 76.5762 mo
353.142 70.4673 li
@
347.466 77.8394 mo
354.04 71.2656 li
@
347.899 79.103 mo
354.938 72.064 li
@
349.373 79.3267 mo
355.837 72.8623 li
@
352.528 77.8687 mo
356.76 73.6372 li
@
353.13 78.9639 mo
358.365 73.7285 li
@
353.732 80.0586 mo
359.971 73.8203 li
@
354.334 81.1538 mo
362.256 73.2324 li
@
354.937 82.2485 mo
365.906 71.2783 li
@
355.538 83.3438 mo
369.936 68.9463 li
@
356.141 84.4385 mo
371.23 69.3486 li
@
356.841 85.4355 mo
372.525 69.751 li
@
359.056 84.9175 mo
365.048 78.9253 li
@
365.531 78.4414 mo
373.852 70.1216 li
@
370.442 75.228 mo
375.668 70.002 li
@
372.272 75.0947 mo
377.485 69.8823 li
@
374.079 74.9849 mo
382.76 66.3052 li
@
375.792 74.9692 mo
383.37 67.3911 li
@
377.505 74.9536 mo
379.988 72.4702 li
@
382.431 70.0283 mo
383.981 68.4771 li
@
382.949 71.2061 mo
384.593 69.563 li
@
383.469 72.3843 mo
385.204 70.6489 li
@
383.987 73.5625 mo
385.814 71.7349 li
@
384.506 74.7402 mo
386.426 72.8208 li
@
385.025 75.9185 mo
387.021 73.9219 li
@
385.544 77.0967 mo
387.614 75.0264 li
@
386.063 78.2744 mo
388.207 76.1304 li
@
386.546 79.4888 mo
388.8 77.2349 li
@
386.775 80.9565 mo
389.393 78.3389 li
@
387.005 82.4243 mo
389.985 79.4434 li
@
387.234 83.8921 mo
390.578 80.5474 li
@
387.464 85.3599 mo
395.081 77.7417 li
@
387.692 86.8276 mo
395.898 78.6216 li
@
387.922 88.2954 mo
396.715 79.502 li
@
388.151 89.7632 mo
397.532 80.3823 li
@
388.381 91.231 mo
398.349 81.2622 li
@
388.609 92.6987 mo
399.166 82.1426 li
@
388.839 94.1665 mo
400.559 82.4473 li
@
389.068 95.6343 mo
402.058 82.6445 li
@
389.298 97.1021 mo
394.995 91.4048 li
@
395.088 91.3115 mo
403.563 82.8374 li
@
389.527 98.5698 mo
394.341 93.7559 li
@
395.94 92.1563 mo
406.643 81.4541 li
@
389.756 100.038 mo
393.687 96.1069 li
@
396.793 93.0005 mo
413.879 75.9146 li
@
389.985 101.505 mo
393.033 98.458 li
@
397.646 93.8452 mo
418.531 72.9595 li
@
390.215 102.973 mo
392.379 100.809 li
@
398.498 94.6899 mo
422.063 71.126 li
@
390.444 104.441 mo
391.725 103.16 li
@
399.324 95.5605 mo
424.322 70.5625 li
@
390.674 105.909 mo
391.07 105.511 li
@
399.781 96.8003 mo
412.956 83.6255 li
@
417.602 78.9805 mo
427.04 69.5415 li
@
400.239 98.0396 mo
407.809 90.4702 li
@
420.03 78.2485 mo
434.49 63.7881 li
@
400.696 99.2793 mo
407.221 92.7549 li
@
422.113 77.8628 mo
436.329 63.6475 li
@
401.154 100.519 mo
406.634 95.0391 li
@
424.093 77.5801 mo
438.345 63.3281 li
@
401.611 101.758 mo
406.046 97.3237 li
@
427.019 76.3521 mo
431.941 71.4282 li
@
434.509 68.8618 mo
440.786 62.5835 li
@
402.069 102.998 mo
405.459 99.6084 li
@
437.986 67.0811 mo
442.989 62.0781 li
@
402.526 104.238 mo
404.871 101.893 li
@
439.932 66.833 mo
444.997 61.7671 li
@
402.984 105.477 mo
404.283 104.178 li
@
441.877 66.5845 mo
446.792 61.6694 li
@
403.441 106.717 mo
403.696 106.462 li
@
443.639 66.52 mo
448.305 61.8535 li
@
445.399 66.4561 mo
449.817 62.0381 li
@
447.112 66.4399 mo
450.4 63.1523 li
@
448.792 66.458 mo
450.4 64.8496 li
@
305.6 67.9912 mo
309.858 66.6729 li
314.117 68.6772 li
318.377 66.0317 li
322.636 78.5981 li
326.895 74.3535 li
331.153 74.502 li
335.412 70.0195 li
339.671 66.0508 li
343.93 67.5293 li
348.188 79.9453 li
352.447 77.7217 li
356.706 85.4668 li
360.965 84.4707 li
365.224 78.6865 li
369.482 75.2979 li
373.741 74.9883 li
378 74.9492 li
382.259 69.6392 li
386.518 79.3057 li
390.776 106.568 li
395.035 91.2588 li
399.294 95.479 li
403.553 107.019 li
407.812 90.4585 li
412.07 84.7446 li
416.329 79.3638 li
420.588 78.0806 li
424.847 77.4722 li
429.105 75.2744 li
433.364 69.4985 li
437.623 67.1274 li
441.883 66.584 li
446.142 66.4292 li
450.4 66.4751 li
450.4 62.1089 li
446.142 61.5898 li
441.883 62.2495 li
437.623 63.5479 li
433.364 63.8745 li
429.105 68.7031 li
424.847 70.4316 li
420.588 71.4932 li
416.329 74.5293 li
412.07 76.937 li
407.812 80.9287 li
403.553 82.8418 li
399.294 82.2808 li
395.035 77.6919 li
390.776 80.916 li
386.518 72.9834 li
382.259 65.4155 li
378 69.8486 li
373.741 70.1289 li
369.482 68.8052 li
365.224 71.751 li
360.965 73.877 li
356.706 73.6338 li
352.447 69.8506 li
348.188 71.0098 li
343.93 61.251 li
339.671 59.8301 li
335.412 64.6592 li
331.153 67.5835 li
326.895 67.4658 li
322.636 71.3813 li
318.377 61.1494 li
314.117 62.9688 li
309.858 60.1621 li
305.6 63.5654 li
305.6 67.9912 li
@
305.6 65.9175 mo
309.858 64.2222 li
314.117 66.1294 li
318.377 63.4604 li
322.636 75.2241 li
326.895 71.3936 li
331.153 71.4458 li
335.412 67.396 li
339.671 61.8301 li
343.93 64.0415 li
348.188 75.4136 li
352.447 73.6743 li
356.706 79.3765 li
360.965 78.9634 li
365.224 75.1758 li
369.482 71.2886 li
373.741 72.6704 li
378 72.2783 li
382.259 67.2192 li
386.518 75.9263 li
390.776 94.0366 li
395.035 82.1909 li
399.294 91.3613 li
403.553 88.9136 li
407.812 86.4629 li
412.07 79.7847 li
416.329 77.3301 li
420.588 74.2681 li
424.847 73.3418 li
429.105 71.3677 li
433.364 66.063 li
437.623 65.3525 li
441.883 65.0913 li
446.142 64.9116 li
450.4 65.0884 li
0.858823 0.85098 0.788235 1 cmyk
@
grestore
gsave
299.808 204.192 mo
456.192 204.192 li
456.192 47.8081 li
299.808 47.8081 li
299.808 204.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[4 4 ] 0 dsh
true sadj
305.6 53.6001 mo
309.858 62.6499 li
314.117 71.7002 li
318.377 89.7998 li
322.636 144.1 li
326.895 126 li
331.153 135.05 li
335.412 80.75 li
339.671 71.7002 li
343.93 89.7998 li
348.188 153.15 li
352.447 153.15 li
356.706 171.25 li
360.965 171.25 li
365.224 153.15 li
369.482 126 li
373.741 135.05 li
378 135.05 li
382.259 107.9 li
386.518 153.15 li
390.776 180.3 li
395.035 171.25 li
399.294 198.4 li
403.553 189.35 li
407.812 180.3 li
412.07 153.15 li
416.329 144.1 li
420.588 126 li
424.847 116.95 li
429.105 98.8501 li
433.364 89.7998 li
437.623 98.8501 li
441.883 98.8501 li
446.142 98.8501 li
450.4 98.8501 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
grestore
gsave
0 504 mo
504 504 li
504 0 li
0 0 li
0 504 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[4 4 ] 0 dsh
true sadj
456.192 189.35 mo
456.192 53.6001 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
456.192 189.35 mo
462.168 189.35 li
@
456.192 144.1 mo
462.168 144.1 li
@
456.192 98.8501 mo
462.168 98.8501 li
@
456.192 53.6001 mo
462.168 53.6001 li
@
OZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf477.705 194.888 mo(10)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf477.705 149.638 mo(15)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf477.705 104.388 mo(20)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf477.705 59.1377 mo(25)[-5.53906 0 ]ysh%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOZLZKD+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/N <1C60D8A8C9B6079F629170873C67115641D0B6890161EC48F71E8D2106F3AC927984C1E464F121F968> |-/b <1C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D06742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A81A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648CF626A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CADA1EAAF79B76AA2B52CCF0307B360E6D> |-/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793990906DA8D7F8ACFF6D70790F06B02> |-systemdict /gcheck known {setglobal} if end {end} ifendOZLZKD+ArialMT /Encoding getdup 78 /N putdup 98 /b putdup 117 /u putpop%ADOEndSubsetFont
/OZLZKD+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 19{/.notdef}rp /M /N 5{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]OZLZKD+ArialMT nfOZLZKD+ArialMT*1 [0 -9.6 -9.6 0 0 0 ]msf495.633 180.966 mo(Number of tips and nodes)[-6.93262 -5.33887 -7.99707 -5.33887 -5.33887 -3.19727 -2.66699 -5.33887 -2.66699 -2.66699 -2.66699 -2.13281 -5.33887 -4.7998 -2.66699 -5.33887 -5.33887 -5.33887 -2.66699 -5.33887 -5.33887 -5.33887 -5.33887 0 ]yshgrestore
gsave
299.808 204.192 mo
456.192 204.192 li
456.192 47.8081 li
299.808 47.8081 li
299.808 204.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
395.035 204.192 mo
395.035 47.8081 li
false sop
0 0.945098 0.937255 0 cmyk
@
grestore
gsave
47.8081 456.192 mo
204.192 456.192 li
204.192 299.808 li
47.8081 299.808 li
47.8081 456.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
53.6001 386.585 mo
57.8589 343.872 li
62.1177 348.669 li
66.3765 333.08 li
70.6353 348.414 li
74.894 325.914 li
79.1528 330.173 li
83.4116 319.722 li
87.6704 318.521 li
91.9292 317.76 li
96.1885 320.829 li
100.447 319.815 li
104.706 314.607 li
108.965 313.811 li
113.224 314.129 li
117.482 314.218 li
121.741 311.228 li
126 311.549 li
130.259 312.06 li
134.518 311.998 li
138.776 311.017 li
143.035 310.713 li
147.294 310.386 li
151.553 311.2 li
155.812 312.803 li
160.071 311.791 li
164.33 312.345 li
168.588 315.327 li
172.847 315.482 li
177.106 317.48 li
181.365 314.633 li
185.624 318.646 li
189.882 317.515 li
194.141 317.319 li
198.4 314.297 li
false sop
0 0 0 0 cmyk
@
grestore
gsave
0 504 mo
504 504 li
504 0 li
0 0 li
0 504 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.8081 450.4 mo
47.8081 304.724 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
47.8081 450.4 mo
41.832 450.4 li
@
47.8081 426.121 mo
41.832 426.121 li
@
47.8081 401.842 mo
41.832 401.842 li
@
47.8081 377.562 mo
41.832 377.562 li
@
47.8081 353.282 mo
41.832 353.282 li
@
47.8081 329.003 mo
41.832 329.003 li
@
47.8081 304.724 mo
41.832 304.724 li
@
OZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf33.4658 453.169 mo(0)shOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf33.4658 428.89 mo(1)shOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf33.4658 404.61 mo(2)shOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf33.4653 380.331 mo(3)shOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf33.4653 356.052 mo(4)shOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf33.4653 331.772 mo(5)shOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf33.4653 307.493 mo(6)shgrestore
gsave
0 504 mo
252 504 li
252 252 li
0 252 li
0 504 li
cp
clp
false sop
0.858823 0.85098 0.788235 1 cmyk
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOZLZKE+Arial-BoldMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/g <1C60D8A8C9B7D8BE2780ECF91BB8FE73517B0190DDC8DBC9897295332E6D8EF13268DE217D7EA63F2C2488BA6624154001DFCD86A24A51CFE6922F8614F4FD4481342B3992244B419F0D448BA14CBCD530939FD538BD00615A031E3CBF1609B0E4C3D7F5A051C575D052C1A51F88B318CA9D0C7CFDFA53AA8FB2F2EE274EE2F4C85657CA9E748262BB03EF446591D320994414EE439D72B9883F38366A41CF501DCE32006C591422CCF439307E4D3088D90FF7CD2955301C96A46D1D1545AF9D499025D541CB2077BD42919F91257F222D868E80527F0D65> |-systemdict /gcheck known {setglobal} if end {end} ifendOZLZKE+Arial-BoldMT /Encoding getdup 103 /g putpop%ADOEndSubsetFont
/OZLZKE+Arial-BoldMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 27{/.notdef}rp /E 7{/.notdef}rp /M 19{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]OZLZKE+Arial-BoldMT nfOZLZKE+Arial-BoldMT*1 [11.952 0 0 -11.952 0 0 ]msf74.8657 280.182 mo(Eutheria \(gradual\))[7.97168 7.30078 3.97998 7.30078 6.64697 4.65137 3.3208 6.64697 3.3208 3.97998 7.30078 4.65137 6.64697 7.30078 7.30078 6.64697 3.3208 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf103.315 501.61 mo(Time \(Ma\))[6.08398 2.21289 8.29688 5.53906 2.76709 3.31689 8.29688 5.53906 0 ]xshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf9.56152 480.146 mo(Tips and nodes median distance from centroid)[-6.08398 -2.21289 -5.53906 -4.97998 -2.76709 -5.53906 -5.53906 -5.53906 -2.76709 -5.53906 -5.53906 -5.53906 -5.53906 -4.97998 -2.76709 -8.29688 -5.53906 -5.53906 -2.21289 -5.53906 -5.53906 -2.76709 -5.53906 -2.21289 -4.97998 -2.76709 -5.53906 -5.53906 -4.97998 -5.53906 -2.76709 -2.76709 -3.31689 -5.53906 -8.29688 -2.76709 -4.97998 -5.53906 -5.53906 -2.76709 -3.31689 -5.53906 -2.21289 0 ]yshgrestore
gsave
0 504 mo
504 504 li
504 0 li
0 0 li
0 504 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
53.6001 456.192 mo
198.4 456.192 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
53.6001 456.192 mo
53.6001 462.168 li
@
74.894 456.192 mo
74.894 462.168 li
@
96.1885 456.192 mo
96.1885 462.168 li
@
117.482 456.192 mo
117.482 462.168 li
@
138.776 456.192 mo
138.776 462.168 li
@
160.071 456.192 mo
160.071 462.168 li
@
181.365 456.192 mo
181.365 462.168 li
@
198.4 456.192 mo
198.4 462.168 li
@
OZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf45.291 477.706 mo(170)[5.53906 5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf87.8794 477.706 mo(120)[5.53906 5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf133.237 477.706 mo(70)[5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf154.531 477.706 mo(45)[5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf175.825 477.706 mo(20)[5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf195.63 477.706 mo(0)shgrestore
gsave
47.8081 456.192 mo
204.192 456.192 li
204.192 299.808 li
47.8081 299.808 li
47.8081 456.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
66.2397 313.858 mo
66.3965 313.702 li
false sop
0.203922 0.14902 0.145098 0 cmyk
@
64.9463 316.425 mo
66.5874 314.784 li
@
63.6528 318.991 mo
66.7778 315.866 li
@
62.3594 321.558 mo
66.9688 316.948 li
@
60.9409 324.249 mo
67.1597 318.03 li
@
59.4941 326.969 mo
67.3501 319.112 li
@
58.0469 329.688 mo
67.541 320.194 li
@
57.0117 331.996 mo
67.7319 321.276 li
@
74.8916 314.116 mo
74.9023 314.105 li
@
56.0386 334.242 mo
67.9224 322.358 li
@
74.6123 315.669 mo
75.8584 314.423 li
@
55.0649 336.489 mo
68.1133 323.44 li
@
74.3325 317.222 mo
76.8145 314.739 li
@
54.0913 338.735 mo
68.3037 324.522 li
@
74.0527 318.773 mo
77.7705 315.057 li
@
53.6001 340.499 mo
68.4946 325.604 li
@
73.7734 320.326 mo
78.7261 315.373 li
@
53.6001 341.772 mo
68.6855 326.687 li
@
73.4937 321.879 mo
82.1582 313.214 li
@
53.6001 343.045 mo
68.876 327.769 li
@
73.2139 323.431 mo
84.3721 312.272 li
@
53.6001 344.317 mo
69.0669 328.851 li
@
72.9346 324.983 mo
85.6211 312.297 li
@
53.6001 345.591 mo
69.2578 329.933 li
@
72.6548 326.536 mo
86.8696 312.321 li
@
53.6001 346.863 mo
69.4482 331.015 li
@
72.3755 328.088 mo
88.2334 312.23 li
@
53.6001 348.136 mo
69.6392 332.097 li
@
72.0957 329.641 mo
89.8022 311.935 li
@
53.6001 349.409 mo
69.8296 333.18 li
@
71.8159 331.192 mo
91.3711 311.638 li
@
53.6001 350.682 mo
70.0205 334.262 li
@
71.5366 332.745 mo
92.4785 311.804 li
@
53.6001 351.955 mo
70.2114 335.344 li
@
71.2568 334.298 mo
93.3306 312.224 li
@
53.6001 353.228 mo
70.4019 336.426 li
@
70.9775 335.85 mo
94.1831 312.645 li
@
53.6001 354.5 mo
70.5928 337.508 li
@
70.6978 337.402 mo
95.0356 313.064 li
@
53.6001 355.772 mo
95.8882 313.485 li
@
53.6001 357.046 mo
96.9189 313.727 li
@
53.6001 358.318 mo
98.0469 313.871 li
@
53.6001 359.592 mo
83.3652 329.826 li
@
87.856 325.336 mo
99.1748 314.017 li
@
53.6001 360.864 mo
83.2588 331.205 li
@
88.7598 325.704 mo
100.303 314.161 li
@
53.6001 362.137 mo
83.1523 332.585 li
@
89.6636 326.073 mo
104.904 310.833 li
@
53.6001 363.41 mo
83.0454 333.964 li
@
90.5679 326.442 mo
106.113 310.897 li
@
53.6001 364.683 mo
82.939 335.344 li
@
91.4717 326.811 mo
107.321 310.961 li
@
53.6001 365.955 mo
82.8325 336.723 li
@
92.3569 327.198 mo
108.53 311.024 li
@
53.6001 367.229 mo
82.7261 338.102 li
@
93.2231 327.605 mo
109.834 310.994 li
@
53.6001 368.501 mo
82.6196 339.481 li
@
94.0889 328.012 mo
111.191 310.909 li
@
53.6001 369.773 mo
82.5132 340.86 li
@
94.9551 328.419 mo
112.549 310.825 li
@
53.6001 371.047 mo
82.4067 342.24 li
@
95.8213 328.825 mo
113.83 310.816 li
@
53.6001 372.319 mo
82.3003 343.619 li
@
96.916 329.003 mo
103.965 321.954 li
@
106.029 319.89 mo
115.035 310.884 li
@
53.6001 373.592 mo
82.1934 344.998 li
@
98.1797 329.012 mo
102.706 324.486 li
@
108.278 318.914 mo
116.241 310.951 li
@
53.6001 374.865 mo
82.0869 346.378 li
@
99.4434 329.021 mo
101.447 327.018 li
@
110.12 318.345 mo
117.446 311.019 li
@
53.6001 376.138 mo
81.9805 347.757 li
@
111.783 317.954 mo
119.777 309.961 li
@
53.6001 377.41 mo
81.874 349.137 li
@
113.363 317.647 mo
121.923 309.087 li
@
53.6001 378.684 mo
81.7676 350.516 li
@
114.405 317.878 mo
122.999 309.285 li
@
53.6001 379.956 mo
81.6611 351.895 li
@
115.447 318.109 mo
124.073 309.482 li
@
53.6001 381.229 mo
81.5547 353.274 li
@
116.488 318.34 mo
125.148 309.681 li
@
53.6001 382.502 mo
81.4482 354.653 li
@
119.061 317.04 mo
126.268 309.833 li
@
53.6001 383.774 mo
81.3413 356.033 li
@
122.788 314.587 mo
127.563 309.812 li
@
53.6001 385.047 mo
81.2349 357.412 li
@
123.923 314.724 mo
128.857 309.79 li
@
53.6001 386.32 mo
81.1284 358.791 li
@
125.059 314.861 mo
130.152 309.769 li
@
53.6001 387.593 mo
81.022 360.171 li
@
126.206 314.987 mo
131.397 309.795 li
@
53.6001 388.865 mo
80.9155 361.55 li
@
127.413 315.053 mo
132.638 309.827 li
@
53.6001 390.139 mo
80.8091 362.93 li
@
128.619 315.119 mo
133.879 309.858 li
@
53.6001 391.411 mo
80.7026 364.309 li
@
129.826 315.186 mo
135.266 309.745 li
@
53.6001 392.684 mo
80.5957 365.688 li
@
131.097 315.187 mo
136.807 309.478 li
@
53.6001 393.957 mo
80.4893 367.067 li
@
132.405 315.151 mo
138.347 309.21 li
@
53.6001 395.229 mo
80.3828 368.446 li
@
133.712 315.117 mo
139.732 309.097 li
@
53.6001 396.502 mo
66.1865 383.916 li
@
66.6597 383.442 mo
80.2764 369.826 li
@
135.208 314.895 mo
141.059 309.044 li
@
53.6001 397.775 mo
65.9717 385.403 li
@
66.9795 384.396 mo
80.1699 371.205 li
@
137.002 314.373 mo
142.385 308.99 li
@
53.6001 399.048 mo
65.7573 386.891 li
@
67.2993 385.349 mo
74.7534 377.895 li
@
75.0645 377.583 mo
80.0635 372.585 li
@
138.794 313.854 mo
143.832 308.816 li
@
53.6001 400.32 mo
65.5425 388.378 li
@
67.6191 386.302 mo
74.3584 379.563 li
@
75.543 378.378 mo
79.957 373.964 li
@
140.313 313.608 mo
145.394 308.526 li
@
53.6001 401.594 mo
65.3276 389.865 li
@
67.939 387.255 mo
73.9639 381.229 li
@
76.021 379.172 mo
79.8506 375.343 li
@
141.831 313.362 mo
146.957 308.236 li
@
53.6001 402.866 mo
65.1133 391.353 li
@
68.2588 388.208 mo
73.5688 382.897 li
@
76.4995 379.967 mo
79.7437 376.723 li
@
143.292 313.174 mo
148.07 308.396 li
@
53.6001 404.139 mo
64.8984 392.841 li
@
68.5786 389.16 mo
73.1743 384.564 li
@
76.9775 380.762 mo
79.6372 378.102 li
@
144.532 313.207 mo
149.059 308.68 li
@
53.6001 405.412 mo
64.6841 394.328 li
@
68.8984 390.113 mo
72.7793 386.232 li
@
77.4561 381.556 mo
79.5308 379.481 li
@
145.772 313.239 mo
150.048 308.964 li
@
53.6001 406.685 mo
57.8164 402.468 li
@
57.9888 402.296 mo
64.4692 395.815 li
@
69.2183 391.066 mo
72.3848 387.9 li
@
77.9341 382.351 mo
79.4243 380.86 li
@
147.013 313.271 mo
151.037 309.247 li
@
53.6001 407.957 mo
57.6938 403.863 li
@
58.3657 403.191 mo
64.2544 397.303 li
@
69.5381 392.02 mo
71.9897 389.567 li
@
78.4126 383.145 mo
79.3179 382.239 li
@
148.169 313.389 mo
152.116 309.441 li
@
53.6001 409.23 mo
57.5708 405.26 li
@
58.7427 404.088 mo
64.04 398.79 li
@
69.8579 392.973 mo
71.5952 391.235 li
@
78.8906 383.939 mo
79.2114 383.619 li
@
149.3 313.529 mo
153.293 309.537 li
@
53.6001 410.503 mo
57.4482 406.655 li
@
59.1196 404.983 mo
63.8252 400.277 li
@
70.1777 393.926 mo
71.2002 392.902 li
@
150.432 313.671 mo
154.47 309.633 li
@
53.6001 411.775 mo
57.3252 408.051 li
@
59.4966 405.879 mo
63.6108 401.765 li
@
70.4971 394.879 mo
70.8057 394.57 li
@
151.559 313.816 mo
155.647 309.729 li
@
53.6001 413.049 mo
57.2026 409.446 li
@
59.873 406.775 mo
63.396 403.253 li
@
152.236 314.413 mo
156.931 309.718 li
@
53.6001 414.321 mo
57.0801 410.842 li
@
60.25 407.671 mo
63.1812 404.74 li
@
152.912 315.009 mo
158.232 309.689 li
@
53.6001 415.594 mo
56.957 412.237 li
@
60.627 408.567 mo
62.9668 406.228 li
@
153.589 315.605 mo
159.533 309.661 li
@
53.6001 416.867 mo
56.8345 413.633 li
@
61.0039 409.463 mo
62.752 407.715 li
@
154.265 316.202 mo
160.822 309.645 li
@
53.6001 418.14 mo
56.7114 415.028 li
@
61.3809 410.359 mo
62.5376 409.202 li
@
154.942 316.798 mo
162.104 309.636 li
@
53.6001 419.412 mo
56.5889 416.424 li
@
61.7573 411.255 mo
62.3228 410.689 li
@
155.618 317.395 mo
163.386 309.627 li
@
53.6001 420.686 mo
56.4658 417.819 li
@
156.864 317.422 mo
164.66 309.626 li
@
53.6001 421.958 mo
56.3433 419.215 li
@
158.337 317.221 mo
165.911 309.647 li
@
53.6001 423.23 mo
56.2207 420.61 li
@
159.811 317.02 mo
167.162 309.67 li
@
53.6001 424.504 mo
56.0977 422.006 li
@
161.067 317.037 mo
168.412 309.691 li
@
53.6001 425.776 mo
55.9751 423.401 li
@
162.276 317.1 mo
169.437 309.939 li
@
53.6001 427.049 mo
55.8521 424.797 li
@
163.486 317.163 mo
170.425 310.225 li
@
53.6001 428.322 mo
55.7295 426.192 li
@
164.485 317.438 mo
171.413 310.51 li
@
53.6001 429.595 mo
55.6064 427.588 li
@
164.999 318.196 mo
172.4 310.795 li
@
53.6001 430.868 mo
55.4839 428.983 li
@
165.513 318.955 mo
173.451 311.017 li
@
53.6001 432.141 mo
55.3613 430.379 li
@
166.027 319.714 mo
174.553 311.188 li
@
53.6001 433.413 mo
55.2383 431.775 li
@
166.541 320.473 mo
175.655 311.357 li
@
53.6001 434.686 mo
55.1157 433.17 li
@
167.055 321.231 mo
176.758 311.528 li
@
53.6001 435.959 mo
54.9927 434.566 li
@
167.569 321.99 mo
178.475 311.084 li
@
53.6001 437.231 mo
54.8701 435.962 li
@
168.083 322.749 mo
180.476 310.355 li
@
53.6001 438.504 mo
54.7476 437.357 li
@
168.601 323.504 mo
181.824 310.28 li
@
53.6001 439.777 mo
54.6245 438.753 li
@
169.331 324.046 mo
182.65 310.727 li
@
53.6001 441.05 mo
54.502 440.148 li
@
170.062 324.589 mo
183.477 311.173 li
@
53.6001 442.323 mo
54.3789 441.544 li
@
170.792 325.131 mo
184.304 311.619 li
@
53.6001 443.596 mo
54.2563 442.939 li
@
171.522 325.673 mo
185.13 312.065 li
@
53.6001 444.868 mo
54.1333 444.335 li
@
172.253 326.216 mo
186.137 312.332 li
@
53.6001 446.142 mo
54.0107 445.73 li
@
172.999 326.742 mo
187.41 312.331 li
@
53.6001 447.414 mo
53.8882 447.126 li
@
173.813 327.201 mo
188.683 312.331 li
@
53.6001 448.687 mo
53.7651 448.521 li
@
174.626 327.661 mo
189.983 312.304 li
@
53.6001 449.96 mo
53.6426 449.917 li
@
175.439 328.12 mo
191.716 311.844 li
@
176.253 328.579 mo
193.449 311.383 li
@
195.756 309.076 mo
198.4 306.433 li
@
177.067 329.038 mo
177.467 328.639 li
@
181.564 324.541 mo
198.4 307.705 li
@
181.949 325.43 mo
198.4 308.978 li
@
182.333 326.318 mo
198.4 310.251 li
@
182.717 327.207 mo
198.4 311.523 li
@
183.101 328.096 mo
198.4 312.796 li
@
183.485 328.984 mo
198.4 314.069 li
@
183.869 329.873 mo
198.4 315.342 li
@
184.253 330.762 mo
198.4 316.614 li
@
184.637 331.65 mo
198.4 317.888 li
@
185.021 332.539 mo
188.384 329.176 li
@
190.44 327.12 mo
198.4 319.16 li
@
185.406 333.428 mo
186.623 332.21 li
@
191.097 327.736 mo
198.4 320.434 li
@
191.752 328.354 mo
198.253 321.853 li
@
192.409 328.97 mo
197.124 324.255 li
@
193.065 329.587 mo
195.994 326.657 li
@
193.721 330.203 mo
194.864 329.06 li
@
53.6001 450.4 mo
57.8589 401.986 li
62.1177 412.111 li
66.3765 382.6 li
70.6353 395.29 li
74.894 377.3 li
79.1528 384.375 li
83.4116 329.223 li
87.6704 325.26 li
91.9292 326.998 li
96.1885 328.998 li
100.447 329.028 li
104.706 320.464 li
108.965 318.616 li
113.224 317.616 li
117.482 318.561 li
121.741 314.46 li
126 314.976 li
130.259 315.209 li
134.518 315.096 li
138.776 313.856 li
143.035 313.167 li
147.294 313.279 li
151.553 313.812 li
155.812 317.564 li
160.071 316.984 li
164.33 317.208 li
168.588 323.494 li
172.847 326.657 li
177.106 329.061 li
181.365 324.078 li
185.624 333.932 li
189.882 326.596 li
194.141 330.598 li
198.4 321.54 li
198.4 305.6 li
194.141 311.199 li
189.882 312.33 li
185.624 312.332 li
181.365 310.032 li
177.106 311.582 li
172.847 310.924 li
168.588 309.694 li
164.33 309.62 li
160.071 309.65 li
155.812 309.742 li
151.553 309.396 li
147.294 308.174 li
143.035 308.964 li
138.776 309.136 li
134.518 309.875 li
130.259 309.767 li
126 309.838 li
121.741 309.053 li
117.482 311.021 li
113.224 310.783 li
108.965 311.048 li
104.706 310.822 li
100.447 314.18 li
96.1885 313.633 li
91.9292 311.532 li
87.6704 312.336 li
83.4116 312.254 li
79.1528 315.515 li
74.894 314.103 li
70.6353 337.749 li
66.3765 313.588 li
62.1177 322.037 li
57.8589 330.042 li
53.6001 339.869 li
53.6001 450.4 li
@
66.0513 331.867 mo
66.6118 331.306 li
0.301961 0.227451 0.215686 0 cmyk
@
74.605 323.313 mo
75.3916 322.526 li
@
65.4102 334.204 mo
67.0752 332.54 li
@
74.1479 325.467 mo
76.1777 323.438 li
@
57.7705 343.541 mo
58.3052 343.007 li
@
64.7695 336.542 mo
67.5381 333.773 li
@
73.6909 327.621 mo
76.9639 324.348 li
@
82.5166 318.796 mo
84.8809 316.431 li
@
57.5884 345.421 mo
59.2266 343.782 li
@
64.1289 338.88 mo
68.0015 335.008 li
@
73.2339 329.775 mo
77.75 325.259 li
@
81.3086 321.7 mo
86.8633 316.146 li
@
57.4063 347.3 mo
60.1475 344.559 li
@
63.4883 341.218 mo
68.4648 336.241 li
@
72.7769 331.93 mo
74.7495 329.956 li
@
75.1875 329.519 mo
78.5361 326.17 li
@
80.1006 324.605 mo
88.7383 315.968 li
@
57.2241 349.179 mo
61.0684 345.335 li
@
62.8477 343.556 mo
66.2446 340.158 li
@
66.71 339.693 mo
68.9282 337.475 li
@
72.3198 334.084 mo
74.3228 332.08 li
@
76.0532 330.35 mo
82.9624 323.44 li
@
84.7935 321.609 mo
90.54 315.863 li
@
57.0425 351.058 mo
61.9893 346.11 li
@
62.207 345.894 mo
66.0654 342.034 li
@
67.1646 340.936 mo
69.3911 338.709 li
@
71.8628 336.237 mo
73.896 334.204 li
@
76.9189 331.182 mo
81.8984 326.201 li
@
87.9102 320.19 mo
92.1621 315.938 li
@
56.8604 352.938 mo
65.8862 343.911 li
@
67.6187 342.179 mo
69.8545 339.942 li
@
71.4058 338.392 mo
73.4692 336.328 li
@
77.7847 332.013 mo
80.8345 328.963 li
@
89.894 319.903 mo
93.1777 316.619 li
@
56.6782 354.816 mo
57.7158 353.778 li
@
57.98 353.515 mo
65.707 345.787 li
@
68.0728 343.421 mo
70.3179 341.177 li
@
70.9487 340.546 mo
73.0425 338.452 li
@
78.6504 332.844 mo
79.771 331.724 li
@
91.8784 319.616 mo
94.1934 317.301 li
@
56.4961 356.695 mo
57.4727 355.719 li
@
58.1865 355.005 mo
65.5278 347.663 li
@
68.5273 344.664 mo
72.6157 340.575 li
@
92.9194 320.271 mo
95.2095 317.981 li
@
56.314 358.574 mo
57.229 357.659 li
@
58.3931 356.495 mo
65.3486 349.539 li
@
68.9814 345.907 mo
72.189 342.699 li
@
93.9355 320.952 mo
96.2544 318.634 li
@
56.1318 360.453 mo
56.9858 359.6 li
@
58.5996 357.985 mo
65.1694 351.416 li
@
69.4355 347.149 mo
71.7622 344.823 li
@
94.9521 321.634 mo
98.0757 318.51 li
@
55.9497 362.333 mo
56.7422 361.54 li
@
58.8062 359.477 mo
64.9902 353.292 li
@
69.8901 348.393 mo
71.3354 346.947 li
@
95.9683 322.314 mo
99.8975 318.385 li
@
55.7676 364.212 mo
56.4985 363.48 li
@
59.0127 360.967 mo
64.811 355.168 li
@
70.3442 349.636 mo
70.9087 349.07 li
@
98.1274 321.853 mo
106.786 313.194 li
@
55.5859 366.091 mo
56.2554 365.421 li
@
59.2192 362.457 mo
64.6318 357.045 li
@
105.852 315.824 mo
108.94 312.736 li
@
55.4038 367.97 mo
56.0117 367.362 li
@
59.4258 363.948 mo
64.4531 358.921 li
@
107.492 315.882 mo
110.74 312.634 li
@
55.2217 369.849 mo
55.7686 369.303 li
@
59.6323 365.438 mo
64.2739 360.797 li
@
109.155 315.915 mo
112.536 312.534 li
@
55.0396 371.729 mo
55.5249 371.243 li
@
59.8389 366.929 mo
64.0947 362.673 li
@
111.022 315.745 mo
114.181 312.586 li
@
54.8574 373.607 mo
55.2813 373.184 li
@
60.0454 368.419 mo
63.9155 364.55 li
@
112.889 315.575 mo
115.733 312.731 li
@
54.6753 375.486 mo
55.0381 375.124 li
@
60.252 369.91 mo
63.7363 366.426 li
@
114.712 315.45 mo
117.285 312.877 li
@
54.4932 377.365 mo
54.7944 377.064 li
@
60.4585 371.4 mo
63.5571 368.302 li
@
116.524 315.335 mo
120.851 311.009 li
@
54.311 379.245 mo
54.5508 379.005 li
@
60.665 372.891 mo
63.3779 370.179 li
@
120.218 313.338 mo
122.91 310.646 li
@
54.1289 381.124 mo
54.3076 380.945 li
@
60.8716 374.381 mo
63.1987 372.055 li
@
122.902 312.351 mo
124.43 310.823 li
@
53.9473 383.003 mo
54.064 382.886 li
@
61.0781 375.872 mo
63.0195 373.931 li
@
124.477 312.473 mo
125.949 311.001 li
@
53.7651 384.882 mo
53.8208 384.826 li
@
61.2847 377.362 mo
62.8403 375.807 li
@
126.049 312.598 mo
127.602 311.045 li
@
61.4912 378.853 mo
62.6611 377.684 li
@
127.55 312.794 mo
129.259 311.085 li
@
61.6978 380.344 mo
62.4819 379.56 li
@
129.051 312.99 mo
130.918 311.123 li
@
61.9043 381.834 mo
62.3027 381.436 li
@
130.613 313.125 mo
132.581 311.158 li
@
62.1108 383.324 mo
62.1235 383.313 li
@
132.43 313.006 mo
134.242 311.193 li
@
134.246 312.887 mo
136.301 310.831 li
@
136.432 312.397 mo
138.438 310.391 li
@
138.684 311.843 mo
140.266 310.261 li
@
140.517 311.706 mo
142.036 310.188 li
@
142.333 311.589 mo
143.888 310.033 li
@
144.162 311.455 mo
145.846 309.772 li
@
146.001 311.313 mo
147.652 309.662 li
@
147.713 311.299 mo
149.028 309.983 li
@
149.125 311.584 mo
150.404 310.305 li
@
150.537 311.869 mo
151.793 310.612 li
@
151.854 312.249 mo
153.252 310.851 li
@
152.931 312.869 mo
154.711 311.089 li
@
154.007 313.49 mo
156.25 311.247 li
@
155.083 314.11 mo
158.039 311.155 li
@
156.442 314.449 mo
159.828 311.063 li
@
158.388 314.2 mo
161.488 311.1 li
@
160.281 314.005 mo
163.129 311.156 li
@
161.834 314.147 mo
164.7 311.283 li
@
163.388 314.291 mo
166.077 311.603 li
@
164.723 314.653 mo
167.454 311.922 li
@
165.722 315.352 mo
168.821 312.252 li
@
166.721 316.05 mo
170.142 312.629 li
@
167.719 316.749 mo
171.462 313.006 li
@
168.757 317.407 mo
172.783 313.382 li
@
170.063 317.8 mo
174.044 313.817 li
@
171.367 318.191 mo
175.303 314.256 li
@
172.672 318.584 mo
176.562 314.694 li
@
173.897 319.056 mo
178.67 314.283 li
@
175.11 319.539 mo
181.39 313.261 li
@
176.324 320.023 mo
182.513 313.834 li
@
178.542 319.502 mo
183.636 314.408 li
@
181.647 318.094 mo
184.759 314.981 li
@
182.584 318.854 mo
186.039 315.399 li
@
183.521 319.614 mo
187.838 315.297 li
@
184.458 320.375 mo
189.638 315.194 li
@
185.395 321.135 mo
191.495 315.035 li
@
187.112 321.114 mo
193.359 314.867 li
@
189.083 320.841 mo
198.4 311.523 li
@
190.968 320.652 mo
198.4 313.221 li
@
192.796 320.521 mo
198.4 314.918 li
@
53.6001 386.585 mo
57.8589 352.64 li
62.1177 383.372 li
66.3765 338.78 li
70.6353 350.432 li
74.894 329.237 li
79.1528 333.327 li
83.4116 322.274 li
87.6704 320.225 li
91.9292 319.608 li
96.1885 322.462 li
100.447 321.123 li
104.706 315.784 li
108.965 315.933 li
113.224 315.545 li
117.482 315.273 li
121.741 312.261 li
126 312.592 li
130.259 313.148 li
134.518 312.869 li
138.776 311.819 li
143.035 311.543 li
147.294 311.214 li
151.553 312.075 li
155.812 314.53 li
160.071 313.985 li
164.33 314.378 li
168.588 317.356 li
172.847 318.636 li
177.106 320.336 li
181.365 317.864 li
185.624 321.32 li
189.882 320.73 li
194.141 320.425 li
198.4 315.434 li
198.4 311.305 li
194.141 314.797 li
189.882 315.18 li
185.624 315.423 li
181.365 313.248 li
177.106 314.884 li
172.847 313.4 li
168.588 312.186 li
164.33 311.197 li
160.071 311.052 li
155.812 311.27 li
151.553 310.573 li
147.294 309.579 li
143.035 310.146 li
138.776 310.321 li
134.518 311.199 li
130.259 311.108 li
126 311.007 li
121.741 310.51 li
117.482 312.896 li
113.224 312.497 li
108.965 312.731 li
104.706 313.636 li
100.447 318.348 li
96.1885 318.639 li
91.9292 315.782 li
87.6704 316.029 li
83.4116 316.643 li
79.1528 326.885 li
74.894 321.949 li
70.6353 342.022 li
66.3765 330.68 li
62.1177 346.219 li
57.8589 342.63 li
53.6001 386.585 li
@
53.6001 386.585 mo
57.8589 343.872 li
62.1177 348.669 li
66.3765 333.08 li
70.6353 348.414 li
74.894 325.914 li
79.1528 330.173 li
83.4116 319.722 li
87.6704 318.521 li
91.9292 317.76 li
96.1885 320.829 li
100.447 319.815 li
104.706 314.607 li
108.965 313.811 li
113.224 314.129 li
117.482 314.218 li
121.741 311.228 li
126 311.549 li
130.259 312.06 li
134.518 311.998 li
138.776 311.017 li
143.035 310.713 li
147.294 310.386 li
151.553 311.2 li
155.812 312.803 li
160.071 311.791 li
164.33 312.345 li
168.588 315.327 li
172.847 315.482 li
177.106 317.48 li
181.365 314.633 li
185.624 318.646 li
189.882 317.515 li
194.141 317.319 li
198.4 314.297 li
0.858823 0.85098 0.788235 1 cmyk
@
grestore
gsave
47.8081 456.192 mo
204.192 456.192 li
204.192 299.808 li
47.8081 299.808 li
47.8081 456.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[4 4 ] 0 dsh
true sadj
53.6001 450.4 mo
57.8589 446.78 li
62.1177 443.16 li
66.3765 435.92 li
70.6353 439.54 li
74.894 428.68 li
79.1528 432.3 li
83.4116 417.82 li
87.6704 410.58 li
91.9292 406.96 li
96.1885 410.58 li
100.447 403.34 li
104.706 392.48 li
108.965 385.24 li
113.224 370.76 li
117.482 374.38 li
121.741 352.66 li
126 352.66 li
130.259 330.94 li
134.518 345.42 li
138.776 305.6 li
143.035 305.6 li
147.294 334.56 li
151.553 338.18 li
155.812 363.52 li
160.071 378 li
164.33 378 li
168.588 392.48 li
172.847 403.34 li
177.106 406.96 li
181.365 406.96 li
185.624 410.58 li
189.882 410.58 li
194.141 410.58 li
198.4 410.58 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
grestore
gsave
0 504 mo
504 504 li
504 0 li
0 0 li
0 504 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[4 4 ] 0 dsh
true sadj
204.192 425.06 mo
204.192 316.46 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
204.192 425.06 mo
210.168 425.06 li
@
204.192 388.86 mo
210.168 388.86 li
@
204.192 352.66 mo
210.168 352.66 li
@
204.192 316.46 mo
210.168 316.46 li
@
OZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf225.706 430.599 mo(10)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf225.706 394.4 mo(20)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf225.706 358.199 mo(30)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf225.706 322 mo(40)[-5.53906 0 ]yshgrestore
gsave
47.8081 456.192 mo
204.192 456.192 li
204.192 299.808 li
47.8081 299.808 li
47.8081 456.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
143.035 456.192 mo
143.035 299.808 li
false sop
0 0.945098 0.937255 0 cmyk
@
grestore
gsave
299.808 456.192 mo
456.192 456.192 li
456.192 299.808 li
299.808 299.808 li
299.808 456.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
305.6 315.673 mo
309.858 316.494 li
314.117 316.417 li
318.377 315.756 li
322.636 326.672 li
326.895 322.435 li
331.153 322.079 li
335.412 319.096 li
339.671 312.768 li
343.93 314.937 li
348.188 325.095 li
352.447 325.616 li
356.706 330.123 li
360.965 330.132 li
365.224 327.5 li
369.482 322.351 li
373.741 323.595 li
378 322.454 li
382.259 318.198 li
386.518 328.069 li
390.776 333.098 li
395.035 330.45 li
399.294 342.22 li
403.553 337.451 li
407.812 334.875 li
412.07 329.313 li
416.329 324.801 li
420.588 321.33 li
424.847 324.201 li
429.105 317.508 li
433.364 316.862 li
437.623 319.479 li
441.883 318.788 li
446.142 318.397 li
450.4 316.427 li
false sop
0 0 0 0 cmyk
@
grestore
gsave
0 504 mo
504 504 li
504 0 li
0 0 li
0 504 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
299.808 441.666 mo
299.808 302.737 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
299.808 441.666 mo
293.832 441.666 li
@
299.808 418.512 mo
293.832 418.512 li
@
299.808 395.356 mo
293.832 395.356 li
@
299.808 372.202 mo
293.832 372.202 li
@
299.808 349.047 mo
293.832 349.047 li
@
299.808 325.893 mo
293.832 325.893 li
@
299.808 302.737 mo
293.832 302.737 li
@
OZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf285.466 444.437 mo(7)shOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf285.465 421.28 mo(8)shOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf285.466 398.126 mo(9)shOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf285.465 377.741 mo(10)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf285.465 354.585 mo(11)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf285.465 331.431 mo(12)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf285.466 308.276 mo(13)[-5.53906 0 ]yshgrestore
gsave
252 504 mo
504 504 li
504 252 li
252 252 li
252 504 li
cp
clp
false sop
0.858823 0.85098 0.788235 1 cmyk
OZLZKE+Arial-BoldMT*1 [11.952 0 0 -11.952 0 0 ]msf301.952 280.182 mo(Mammaliaformes \(gradual\))[9.95605 6.64746 10.627 10.627 6.64746 3.32031 3.32031 6.64746 3.98047 7.30078 4.65137 10.627 6.64746 6.64746 3.32031 3.98047 7.30078 4.65137 6.64746 7.30078 7.30078 6.64746 3.32031 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf355.315 501.61 mo(Time \(Ma\))[6.08398 2.21289 8.29688 5.53906 2.76758 3.31641 8.29688 5.53906 0 ]xshgrestore
gsave
0 504 mo
504 504 li
504 0 li
0 0 li
0 504 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
305.6 456.192 mo
450.4 456.192 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
305.6 456.192 mo
305.6 462.168 li
@
326.895 456.192 mo
326.895 462.168 li
@
348.188 456.192 mo
348.188 462.168 li
@
369.482 456.192 mo
369.482 462.168 li
@
390.776 456.192 mo
390.776 462.168 li
@
412.07 456.192 mo
412.07 462.168 li
@
433.364 456.192 mo
433.364 462.168 li
@
450.4 456.192 mo
450.4 462.168 li
@
OZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf297.291 477.706 mo(170)[5.53906 5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf339.879 477.706 mo(120)[5.53906 5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf385.237 477.706 mo(70)[5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf406.531 477.706 mo(45)[5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf427.825 477.706 mo(20)[5.53906 0 ]xshOZLZKD+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf447.631 477.706 mo(0)shgrestore
gsave
299.808 456.192 mo
456.192 456.192 li
456.192 299.808 li
299.808 299.808 li
299.808 456.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
305.6 309.294 mo
306.115 308.779 li
false sop
0.203922 0.14902 0.145098 0 cmyk
@
305.6 310.567 mo
307.981 308.186 li
@
305.6 311.84 mo
309.848 307.592 li
@
305.6 313.112 mo
310.809 307.904 li
@
305.6 314.386 mo
311.764 308.222 li
@
305.6 315.658 mo
312.72 308.539 li
@
305.6 316.931 mo
313.675 308.856 li
@
305.6 318.204 mo
314.747 309.057 li
@
305.6 319.477 mo
315.919 309.157 li
@
305.6 320.749 mo
317.092 309.258 li
@
305.6 322.022 mo
318.265 309.357 li
@
305.653 323.241 mo
319.156 309.739 li
@
306.486 323.682 mo
320.018 310.15 li
@
307.319 324.121 mo
320.879 310.562 li
@
308.152 324.561 mo
321.74 310.973 li
@
308.985 325.001 mo
322.603 311.384 li
@
309.818 325.44 mo
324.139 311.12 li
@
310.816 325.715 mo
325.702 310.829 li
@
311.824 325.98 mo
327.181 310.624 li
@
312.831 326.246 mo
328.385 310.693 li
@
313.838 326.512 mo
329.588 310.763 li
@
316.846 324.776 mo
330.791 310.831 li
@
318.519 324.377 mo
332.295 310.601 li
@
318.758 325.411 mo
333.928 310.24 li
@
318.997 326.444 mo
335.585 309.856 li
@
319.236 327.478 mo
337.484 309.229 li
@
319.476 328.512 mo
339.383 308.604 li
@
319.715 329.545 mo
340.804 308.456 li
@
319.953 330.579 mo
342.138 308.395 li
@
320.192 331.612 mo
343.473 308.333 li
@
320.432 332.646 mo
344.401 308.677 li
@
320.671 333.68 mo
345.118 309.232 li
@
320.91 334.714 mo
345.836 309.788 li
@
321.149 335.747 mo
346.553 310.344 li
@
321.389 336.781 mo
347.27 310.899 li
@
321.628 337.814 mo
347.987 311.455 li
@
321.867 338.848 mo
349.134 311.581 li
@
322.105 339.882 mo
339.249 322.739 li
@
339.898 322.089 mo
350.448 311.539 li
@
322.345 340.915 mo
337.944 325.315 li
@
340.603 322.658 mo
351.763 311.498 li
@
322.584 341.949 mo
336.641 327.893 li
@
341.307 323.227 mo
352.887 311.646 li
@
324.737 341.069 mo
335.35 330.456 li
@
342.012 323.795 mo
353.806 312 li
@
327.159 339.92 mo
334.277 332.802 li
@
342.716 324.363 mo
354.725 312.354 li
@
328.53 339.821 mo
333.204 335.147 li
@
343.42 324.932 mo
355.643 312.709 li
@
329.902 339.723 mo
332.131 337.493 li
@
343.998 325.626 mo
356.562 313.063 li
@
344.247 326.65 mo
358.151 312.746 li
@
344.496 327.675 mo
359.867 312.303 li
@
344.744 328.698 mo
361.503 311.939 li
@
344.993 329.723 mo
362.999 311.717 li
@
345.241 330.747 mo
364.495 311.493 li
@
345.49 331.771 mo
365.855 311.405 li
@
345.739 332.795 mo
367.088 311.446 li
@
345.987 333.819 mo
368.319 311.487 li
@
346.236 334.844 mo
369.539 311.54 li
@
346.484 335.867 mo
370.557 311.796 li
@
346.733 336.892 mo
371.573 312.052 li
@
346.982 337.916 mo
372.591 312.307 li
@
347.23 338.939 mo
373.608 312.563 li
@
347.479 339.964 mo
374.912 312.531 li
@
347.728 340.988 mo
376.26 312.457 li
@
347.977 342.013 mo
377.607 312.382 li
@
350.331 340.931 mo
379.537 311.725 li
@
352.69 339.844 mo
381.709 310.826 li
@
352.977 340.831 mo
382.971 310.837 li
@
353.262 341.818 mo
383.924 311.156 li
@
353.548 342.806 mo
384.877 311.477 li
@
353.834 343.792 mo
385.83 311.796 li
@
354.119 344.779 mo
386.915 311.983 li
@
354.405 345.767 mo
388.344 311.828 li
@
354.69 346.754 mo
389.772 311.672 li
@
354.977 347.74 mo
391.163 311.554 li
@
355.262 348.728 mo
392.466 311.524 li
@
355.548 349.715 mo
393.769 311.494 li
@
355.834 350.702 mo
395.057 311.479 li
@
356.119 351.689 mo
364.852 342.957 li
@
369.148 338.659 mo
395.829 311.979 li
@
356.405 352.676 mo
364.147 344.934 li
@
370.393 338.688 mo
396.601 312.479 li
@
356.69 353.663 mo
363.443 346.911 li
@
371.346 339.008 mo
397.373 312.98 li
@
357.869 353.758 mo
362.738 348.888 li
@
372.299 339.327 mo
398.146 313.48 li
@
359.098 353.801 mo
362.034 350.865 li
@
373.253 339.646 mo
381.268 331.632 li
@
382.466 330.434 mo
398.918 313.981 li
@
360.327 353.845 mo
361.33 352.842 li
@
374.732 339.439 mo
380.014 334.158 li
@
382.728 331.444 mo
399.707 314.465 li
@
376.768 338.678 mo
378.76 336.686 li
@
382.989 332.456 mo
400.513 314.933 li
@
383.251 333.467 mo
401.318 315.399 li
@
383.513 334.478 mo
402.123 315.867 li
@
383.774 335.488 mo
402.929 316.334 li
@
384.036 336.5 mo
404.853 315.684 li
@
384.298 337.511 mo
408.26 313.549 li
@
384.561 338.521 mo
409.179 313.902 li
@
384.822 339.532 mo
410.098 314.257 li
@
385.084 340.544 mo
411.018 314.61 li
@
385.346 341.555 mo
411.937 314.964 li
@
414.034 312.866 mo
416.604 310.296 li
@
385.607 342.565 mo
418.21 309.963 li
@
385.869 343.576 mo
419.816 309.629 li
@
386.131 344.588 mo
420.857 309.86 li
@
386.393 345.599 mo
421.376 310.615 li
@
386.648 346.616 mo
421.894 311.37 li
@
386.897 347.64 mo
422.412 312.125 li
@
387.146 348.663 mo
422.931 312.879 li
@
387.396 349.686 mo
423.448 313.634 li
@
387.646 350.709 mo
423.967 314.389 li
@
387.896 351.732 mo
424.485 315.143 li
@
427.773 311.854 mo
429.674 309.954 li
@
388.145 352.756 mo
431.46 309.44 li
@
388.395 353.779 mo
433.246 308.928 li
@
388.644 354.803 mo
434.021 309.427 li
@
388.894 355.826 mo
434.722 309.997 li
@
389.143 356.85 mo
435.424 310.568 li
@
389.393 357.873 mo
436.126 311.139 li
@
389.642 358.896 mo
436.828 311.71 li
@
389.891 359.919 mo
437.53 312.28 li
@
390.141 360.942 mo
394.605 356.478 li
@
395.051 356.032 mo
440.929 310.154 li
@
390.39 361.966 mo
393.104 359.253 li
@
395.105 357.25 mo
442.716 309.64 li
@
390.64 362.989 mo
391.602 362.027 li
@
395.16 358.468 mo
443.827 309.802 li
@
395.215 359.687 mo
444.938 309.963 li
@
395.27 360.904 mo
416.097 340.077 li
@
417.841 338.334 mo
428.936 327.238 li
@
429.354 326.819 mo
446.05 310.124 li
@
447.738 308.437 mo
450.4 305.774 li
@
395.325 362.122 mo
415.816 341.631 li
@
419.664 337.783 mo
428.335 329.111 li
@
430.231 327.216 mo
450.4 307.047 li
@
395.38 363.34 mo
415.536 343.185 li
@
420.984 337.735 mo
427.735 330.985 li
@
431.108 327.611 mo
450.4 308.319 li
@
395.435 364.559 mo
415.255 344.737 li
@
421.787 338.205 mo
427.135 332.858 li
@
431.984 328.008 mo
450.4 309.593 li
@
395.489 365.776 mo
414.975 346.291 li
@
422.59 338.676 mo
426.534 334.731 li
@
432.861 328.404 mo
450.4 310.865 li
@
395.544 366.994 mo
414.694 347.845 li
@
423.393 339.146 mo
425.935 336.604 li
@
433.604 328.934 mo
450.4 312.139 li
@
395.599 368.213 mo
414.413 349.397 li
@
424.196 339.615 mo
425.334 338.478 li
@
434.167 329.645 mo
450.4 313.411 li
@
395.653 369.431 mo
414.133 350.951 li
@
434.729 330.354 mo
450.4 314.684 li
@
395.708 370.648 mo
413.853 352.504 li
@
435.292 331.064 mo
450.4 315.957 li
@
395.763 371.866 mo
413.571 354.058 li
@
435.854 331.775 mo
450.4 317.229 li
@
395.817 373.085 mo
413.291 355.611 li
@
436.417 332.485 mo
450.4 318.502 li
@
395.872 374.303 mo
413.011 357.164 li
@
436.979 333.195 mo
450.4 319.775 li
@
395.927 375.521 mo
412.729 358.718 li
@
437.542 333.906 mo
450.4 321.048 li
@
395.982 376.738 mo
412.449 360.271 li
@
443.021 329.7 mo
450.4 322.32 li
@
396.037 377.957 mo
406.55 367.444 li
@
410.892 363.102 mo
412.169 361.824 li
@
444.646 329.348 mo
449.513 324.48 li
@
396.092 379.175 mo
405.167 370.099 li
@
396.146 380.393 mo
403.784 372.754 li
@
396.201 381.61 mo
403.491 374.32 li
@
396.256 382.829 mo
403.417 375.668 li
@
396.311 384.047 mo
403.343 377.015 li
@
396.365 385.265 mo
403.269 378.362 li
@
396.42 386.482 mo
403.193 379.709 li
@
396.475 387.701 mo
403.119 381.057 li
@
396.529 388.919 mo
403.045 382.403 li
@
396.584 390.137 mo
402.971 383.75 li
@
396.64 391.354 mo
402.896 385.098 li
@
396.694 392.573 mo
402.822 386.444 li
@
396.749 393.791 mo
402.748 387.792 li
@
396.804 395.009 mo
402.674 389.139 li
@
396.858 396.227 mo
402.6 390.486 li
@
396.913 397.445 mo
402.525 391.833 li
@
396.968 398.663 mo
402.451 393.18 li
@
397.022 399.881 mo
402.376 394.527 li
@
397.077 401.099 mo
402.302 395.874 li
@
397.132 402.317 mo
402.228 397.222 li
@
397.187 403.535 mo
402.153 398.568 li
@
397.242 404.753 mo
402.079 399.916 li
@
397.297 405.971 mo
402.005 401.263 li
@
397.352 407.189 mo
401.931 402.61 li
@
397.406 408.407 mo
401.856 403.957 li
@
397.461 409.625 mo
401.782 405.304 li
@
397.516 410.843 mo
401.707 406.651 li
@
397.57 412.062 mo
401.633 407.998 li
@
397.625 413.279 mo
401.559 409.346 li
@
397.68 414.497 mo
401.484 410.692 li
@
397.734 415.715 mo
401.41 412.04 li
@
397.789 416.934 mo
401.336 413.387 li
@
397.844 418.151 mo
401.262 414.733 li
@
397.898 419.369 mo
401.188 416.081 li
@
397.953 420.588 mo
401.113 417.428 li
@
398.009 421.806 mo
401.039 418.775 li
@
398.063 423.023 mo
400.965 420.122 li
@
398.118 424.241 mo
400.89 421.47 li
@
398.173 425.46 mo
400.815 422.816 li
@
398.228 426.678 mo
400.741 424.164 li
@
398.282 427.896 mo
400.667 425.511 li
@
398.337 429.113 mo
400.593 426.857 li
@
398.392 430.332 mo
400.519 428.205 li
@
398.446 431.55 mo
400.444 429.552 li
@
398.501 432.768 mo
400.37 430.899 li
@
398.556 433.985 mo
400.296 432.246 li
@
398.61 435.204 mo
400.222 433.594 li
@
398.666 436.422 mo
400.147 434.94 li
@
398.721 437.64 mo
400.072 436.287 li
@
398.775 438.857 mo
399.998 437.635 li
@
398.83 440.076 mo
399.924 438.981 li
@
398.885 441.294 mo
399.85 440.329 li
@
398.939 442.512 mo
399.775 441.676 li
@
398.994 443.729 mo
399.701 443.023 li
@
399.049 444.948 mo
399.627 444.37 li
@
399.104 446.166 mo
399.553 445.717 li
@
399.158 447.384 mo
399.479 447.064 li
@
399.213 448.602 mo
399.404 448.411 li
@
399.268 449.82 mo
399.329 449.759 li
@
305.6 323.213 mo
309.858 325.462 li
314.117 326.586 li
318.377 323.763 li
322.636 342.17 li
326.895 339.938 li
331.153 339.632 li
335.412 330.32 li
339.671 321.905 li
343.93 325.343 li
348.188 342.884 li
352.447 339.002 li
356.706 353.716 li
360.965 353.868 li
365.224 341.912 li
369.482 338.383 li
373.741 339.811 li
378 338.216 li
382.259 329.635 li
386.518 346.081 li
390.776 363.551 li
395.035 355.684 li
399.294 450.4 li
403.553 373.199 li
407.812 365.02 li
412.07 362.367 li
416.329 338.79 li
420.588 337.504 li
424.847 339.996 li
429.105 326.707 li
433.364 328.631 li
437.623 334.009 li
441.883 329.947 li
446.142 329.023 li
450.4 323.285 li
450.4 305.6 li
446.142 310.138 li
441.883 309.52 li
437.623 312.356 li
433.364 308.894 li
429.105 310.117 li
424.847 315.67 li
420.588 309.469 li
416.329 310.354 li
412.07 315.016 li
407.812 313.377 li
403.553 316.696 li
399.294 314.225 li
395.035 311.466 li
390.776 311.563 li
386.518 312.026 li
382.259 310.599 li
378 312.36 li
373.741 312.596 li
369.482 311.526 li
365.224 311.385 li
360.965 312.02 li
356.706 313.119 li
352.447 311.477 li
348.188 311.61 li
343.93 308.312 li
339.671 308.509 li
335.412 309.913 li
331.153 310.853 li
326.895 310.607 li
322.636 311.4 li
318.377 309.367 li
314.117 309.003 li
309.858 307.589 li
305.6 308.943 li
305.6 323.213 li
@
305.6 314.386 mo
307.515 312.471 li
0.301961 0.227451 0.215686 0 cmyk
@
305.6 316.082 mo
309.748 311.935 li
@
305.6 317.779 mo
311.104 312.275 li
@
306.752 318.324 mo
312.414 312.662 li
@
308.143 318.632 mo
313.725 313.049 li
@
309.532 318.938 mo
315.567 312.903 li
@
311 319.168 mo
317.64 312.528 li
@
312.493 319.372 mo
318.768 313.097 li
@
313.985 319.576 mo
319.375 314.187 li
@
315.688 319.571 mo
319.983 315.276 li
@
317.41 319.546 mo
320.591 316.365 li
@
318.6 320.054 mo
321.198 317.455 li
@
319.107 321.243 mo
321.806 318.545 li
@
319.615 322.432 mo
322.413 319.634 li
@
320.123 323.621 mo
324.496 319.248 li
@
320.631 324.811 mo
327.267 318.175 li
@
321.139 326 mo
329.308 317.831 li
@
321.646 327.188 mo
331.413 317.422 li
@
322.154 328.378 mo
334.137 316.396 li
@
326.542 325.688 mo
340.68 311.55 li
@
328.42 325.507 mo
341.971 311.956 li
@
329.954 325.67 mo
343.262 312.362 li
@
340.872 316.448 mo
344.196 313.124 li
@
342.117 316.9 mo
344.749 314.269 li
@
343.361 317.354 mo
345.303 315.412 li
@
344.183 318.229 mo
345.855 316.557 li
@
344.649 319.46 mo
346.408 317.7 li
@
345.115 320.69 mo
346.961 318.845 li
@
345.581 321.922 mo
347.515 319.989 li
@
346.048 323.152 mo
348.067 321.133 li
@
346.514 324.384 mo
349.63 321.267 li
@
346.979 325.614 mo
351.477 321.118 li
@
347.445 326.846 mo
352.856 321.435 li
@
347.912 328.076 mo
353.722 322.267 li
@
348.896 328.789 mo
354.586 323.1 li
@
350.638 328.744 mo
355.45 323.933 li
@
352.379 328.7 mo
356.314 324.765 li
@
353.014 329.763 mo
357.636 325.141 li
@
353.603 330.871 mo
359.333 325.141 li
@
354.192 331.979 mo
361.154 325.017 li
@
354.781 333.086 mo
365.869 321.999 li
@
355.371 334.194 mo
369.646 319.919 li
@
355.96 335.302 mo
371.203 320.059 li
@
356.55 336.409 mo
372.761 320.198 li
@
357.758 336.898 mo
367.693 326.963 li
@
369.65 325.006 mo
374.432 320.225 li
@
359.188 337.165 mo
363.504 332.85 li
@
371.109 325.244 mo
376.294 320.059 li
@
360.619 337.431 mo
361.459 336.592 li
@
372.567 325.482 mo
379.023 319.027 li
@
374.254 325.493 mo
382.672 317.075 li
@
376.882 324.563 mo
383.236 318.208 li
@
382.485 320.656 mo
383.8 319.342 li
@
382.96 321.879 mo
384.363 320.475 li
@
383.434 323.102 mo
384.927 321.608 li
@
383.908 324.324 mo
385.49 322.742 li
@
384.383 325.547 mo
386.055 323.875 li
@
384.857 326.77 mo
386.715 324.911 li
@
385.331 327.992 mo
387.822 325.501 li
@
385.806 329.215 mo
388.93 326.091 li
@
386.28 330.438 mo
390.037 326.681 li
@
386.864 331.551 mo
391.687 326.729 li
@
387.557 332.556 mo
394.427 325.685 li
@
388.25 333.56 mo
395.469 326.341 li
@
388.942 334.563 mo
396.025 327.48 li
@
389.635 335.568 mo
396.582 328.621 li
@
390.328 336.572 mo
397.139 329.762 li
@
392.604 335.994 mo
397.695 330.902 li
@
395.278 335.016 mo
398.252 332.042 li
@
395.736 336.255 mo
398.809 333.183 li
@
396.195 337.493 mo
400.7 332.988 li
@
396.653 338.732 mo
404.908 330.478 li
@
397.111 339.971 mo
406.736 330.347 li
@
397.569 341.21 mo
411.665 327.115 li
@
412.376 326.403 mo
419.688 319.092 li
@
398.028 342.448 mo
421.518 318.959 li
@
398.486 343.688 mo
422.611 319.563 li
@
398.944 344.926 mo
416.283 327.588 li
@
420.766 323.104 mo
423.705 320.165 li
@
404.047 341.521 mo
413.323 332.245 li
@
421.614 323.954 mo
424.8 320.769 li
@
425.091 320.478 mo
430.469 315.099 li
@
405.729 341.535 mo
410.717 336.549 li
@
422.462 324.803 mo
432.367 314.897 li
@
407.412 341.55 mo
408.369 340.593 li
@
423.31 325.652 mo
433.871 315.091 li
@
424.157 326.502 mo
426.8 323.858 li
@
431.194 319.464 mo
434.938 315.721 li
@
433.366 318.989 mo
436.006 316.351 li
@
434.302 319.752 mo
437.072 316.98 li
@
435.236 320.514 mo
438.636 317.114 li
@
436.172 321.275 mo
440.729 316.717 li
@
437.106 322.037 mo
442.682 316.463 li
@
438.635 322.206 mo
444.458 316.383 li
@
440.896 321.642 mo
446.449 316.089 li
@
442.921 321.314 mo
450.4 313.835 li
@
444.763 321.169 mo
450.4 315.532 li
@
447.785 319.844 mo
450.4 317.229 li
@
305.6 318.069 mo
309.858 319.011 li
314.117 319.595 li
318.377 319.532 li
322.636 329.503 li
326.895 325.344 li
331.153 325.798 li
335.412 321.134 li
339.671 316.012 li
343.93 317.56 li
348.188 328.807 li
352.447 328.698 li
356.706 336.703 li
360.965 337.495 li
365.224 329.702 li
369.482 324.979 li
373.741 325.675 li
378 324.167 li
382.259 320.072 li
386.518 331.049 li
390.776 337.223 li
395.035 334.358 li
399.294 345.871 li
403.553 341.517 li
407.812 341.553 li
412.07 334.215 li
416.329 327.515 li
420.588 322.926 li
424.847 327.193 li
429.105 319.922 li
433.364 318.988 li
437.623 322.459 li
441.883 321.396 li
446.142 321.061 li
450.4 317.909 li
450.4 313.29 li
446.142 316.307 li
441.883 316.499 li
437.623 317.306 li
433.364 314.791 li
429.105 315.244 li
424.847 320.794 li
420.588 318.446 li
416.329 321.497 li
412.07 326.782 li
407.812 330.27 li
403.553 330.574 li
399.294 334.178 li
395.035 325.453 li
390.776 327.075 li
386.518 324.807 li
382.259 316.244 li
378 319.907 li
373.741 320.286 li
369.482 319.904 li
365.224 322.373 li
360.965 325.14 li
356.706 325.142 li
352.447 321.04 li
348.188 321.383 li
343.93 312.572 li
339.671 311.231 li
335.412 315.916 li
331.153 317.521 li
326.895 318.237 li
322.636 320.032 li
318.377 312.395 li
314.117 313.165 li
309.858 311.908 li
305.6 312.93 li
305.6 318.069 li
@
305.6 315.673 mo
309.858 316.494 li
314.117 316.417 li
318.377 315.756 li
322.636 326.672 li
326.895 322.435 li
331.153 322.079 li
335.412 319.096 li
339.671 312.768 li
343.93 314.937 li
348.188 325.095 li
352.447 325.616 li
356.706 330.123 li
360.965 330.132 li
365.224 327.5 li
369.482 322.351 li
373.741 323.595 li
378 322.454 li
382.259 318.198 li
386.518 328.069 li
390.776 333.098 li
395.035 330.45 li
399.294 342.22 li
403.553 337.451 li
407.812 334.875 li
412.07 329.313 li
416.329 324.801 li
420.588 321.33 li
424.847 324.201 li
429.105 317.508 li
433.364 316.862 li
437.623 319.479 li
441.883 318.788 li
446.142 318.397 li
450.4 316.427 li
0.858823 0.85098 0.788235 1 cmyk
@
grestore
gsave
299.808 456.192 mo
456.192 456.192 li
456.192 299.808 li
299.808 299.808 li
299.808 456.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[4 4 ] 0 dsh
true sadj
305.6 305.6 mo
309.858 314.65 li
314.117 323.7 li
318.377 341.8 li
322.636 396.1 li
326.895 378 li
331.153 387.05 li
335.412 332.75 li
339.671 323.7 li
343.93 341.8 li
348.188 405.15 li
352.447 405.15 li
356.706 423.25 li
360.965 423.25 li
365.224 405.15 li
369.482 378 li
373.741 387.05 li
378 387.05 li
382.259 359.9 li
386.518 405.15 li
390.776 432.3 li
395.035 423.25 li
399.294 450.4 li
403.553 441.35 li
407.812 432.3 li
412.07 405.15 li
416.329 396.1 li
420.588 378 li
424.847 368.95 li
429.105 350.85 li
433.364 341.8 li
437.623 350.85 li
441.883 350.85 li
446.142 350.85 li
450.4 350.85 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
grestore
gsave
0 504 mo
504 504 li
504 0 li
0 0 li
0 504 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[4 4 ] 0 dsh
true sadj
456.192 441.35 mo
456.192 305.6 li
false sop
0.858823 0.85098 0.788235 1 cmyk
@
456.192 441.35 mo
462.168 441.35 li
@
456.192 396.1 mo
462.168 396.1 li
@
456.192 350.85 mo
462.168 350.85 li
@
456.192 305.6 mo
462.168 305.6 li
@
OZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf477.706 446.888 mo(10)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf477.706 401.638 mo(15)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf477.706 356.388 mo(20)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.96 -9.96 0 0 0 ]msf477.706 311.138 mo(25)[-5.53906 0 ]yshOZLZKD+ArialMT*1 [0 -9.6 -9.6 0 0 0 ]msf495.633 432.966 mo(Number of tips and nodes)[-6.93262 -5.33887 -7.99707 -5.33887 -5.33887 -3.19727 -2.66699 -5.33887 -2.66699 -2.66699 -2.66699 -2.13281 -5.33887 -4.7998 -2.66699 -5.33887 -5.33887 -5.33887 -2.66699 -5.33887 -5.33887 -5.33887 -5.33887 0 ]yshgrestore
gsave
299.808 456.192 mo
456.192 456.192 li
456.192 299.808 li
299.808 299.808 li
299.808 456.192 li
cp
clp
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
395.035 456.192 mo
395.035 299.808 li
false sop
0 0.945098 0.937255 0 cmyk
@
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/OZLZKE+Arial-BoldMT*1 uf/OZLZKE+Arial-BoldMT uf/Arial-BoldMT uf/OZLZKD+ArialMT*1 uf/OZLZKD+ArialMT uf/ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Thomas Guillerme) ()%%Title: (Main_results.eps)%%CreationDate: 10/6/15 4:33 PM%AI9_DataStream%Gb"-6LKZ4=Q3MYB_!cdS"3qXO$-&r\K?6.6"F/s[6_DijNTN7``NGM+.]LRU*4S.Q^Y/QC@$aJoC$F6,P0]I:9`(qes"cn7G@jQ7%s2B[/r9s1O.\4cVf]II!d%'g`rQ4kKctnc`KgBo:)J@V.J(OR5-hU:-UqZQLmWJj8>0D-Uc#<"bA^I'BU:F.!hEAD=%t`m2E.6/N%i@eldX6FTUmBg)XDrdqg2l4u?.t^^&5$:NK"Sb`VhX],j[rjb!2;4hL>"hK)fCBmKmEHJj'D34A-=9jOc0hsh5"GQg\#MU`GRP+G%Dtre%p1/bgJbgOa*Y_?jNqoq)qF"6O<(`>D+$r#BIOF)qHqdl#H+If&s80Q#W1'&1d8-4CDYJnAqP9+M/&e>U*;pTA:[N).,T7RR%'pb$H8Q_3TCN15L-K8bP2BV>$3phE.cm1G0rQ/IF77MX\BbE2_7['muJ'c!=\V+lSVqq(1VVdf'iT7(Ro%M3YeaBGEiHLQ)*Cq=2%s$ZRE'Y(<,52-ah3J6aAdM_[5CFMPtKI3Bns1:F'%@dm^rTh9OmVOqKPh4?>GiG/;`R->!*a=g@.atLG'5C/aDGBL.;uj,NHBW#K%c4PoZ7\.k#580&':q`ia/B211*m:<RMbR\Z>"au"GQa-CpOAY2:V)EQ4di\SC=a&)'i%joJe0rQ+q7e,+]dp\4$YPX8+;!8FXl9<%r@-;FFnBf=SP$"agAbL&s#gD^'$rjGL7a;*r(O$IB;%T*Q"B_BbOAJsiMeAlVhtOoPID/2.$[?=VaLSY,na$(O\c`qB0$K5dV1+n%7fVE6F;dcJdngDNJtGl>:k2Gt!k_Ya^lq(cas[TZ<KolQhGt>8Xsi?OdUU^4dN?m]Gm\K<kHaIE_+uH_@tL=L$H>J(8tNkTi$Xb?%&]%6[2l-Y&(WHSBi=h.UIR6b^:8DJ=&c@<%_f,;c`WU,kC6J:a'T<EK65`4Cn*'[7cO#R;'a^/`-[Co7SFiEFSb.oK%R$_26q`Vk%:^Y2I5G9DZK4NKm)4<5S%AdH[FG:*%aLa,ip^*R#FCbC0-g<X="$`InN":B#=X76=kXsQa(+BbZcRJn@3@"JI</4A)DNlbajJ;Os%F4)_i/ub8a(F_ZM5oCL[j\-L3]M1jiT#19\-^5hQ%HAZi+n*9D-j-79paBe([6l?4=s2TpH'n.0jYl<_i=s-:FC!6R-$1NJ,?-&X%'"UBTl&<uoOhO13g,c4(]MG,_J#)7<AJ/l-F&$C9C/FCa_S9opPBT,Q\m!e0U3'kW:Ulnb4l\bOS+.%ql"lY7Q.\8bO!l=5D+4ug%=5%$8/ub2M.>e3+#JUQpMX!Dt,#?j0nh1b'T@n/Rcf9r(aZ&QFq3Od<cg3UdQV*CdW>'22V>e["a:n9:r6+9FBD.hmoD"23ndYIj%rfp+:1]'oG$/.Uqk:h,LPKYQQ9L"ZsBRE^Z&;r&-"mDrb'G2@L78b=r;Mmf(r"]J/GCfZ]D5?]/>"LHPrlurb>`t7i.9VU&n6`Il%r^mrI.JPEMhBq.--b0pAR4Ls%e,rs:P_B'M=]uGacI^?j6V/[lJ+MRHEmQ`:%Z_*\5t^.OM_K0r!rp/fMHU,L!IXA+8P)l>:-Og?%dH;>rc&J7nT@?-`VY.2,XR=c1iBQ+]U6(!F6Zbm#D4n(/(?j*E%mOK5qX;O=,[./(!,Y8FNUL*O%kEc\J^hkX2n"NgQ\YBh^L4d`%pPQalkVjOfq4#TP9SU;RhrGK"=,<j90$5J<#N8F&-KSYepm\">+>k<GiI<>RE6h+*6pQl>:8G5!rEg7MXWDpR759h-1IoHZV_cO>%>p$/GCd$_N,t^$gogDPS.?cHm+34?!28E!k0:joRFs2WfOYc\4hLkjl3i+qJhlmhfkCfr^np`4:edS7a&0p*%o1__)8d$#&Bu5:_%f,-/=?7X)81)Tk\NNf'QNq#epnerrG7`RIsIUZJ/\3tr"7V@b>RYDq/D3n]>ja[!5nUHpE`$M`c0Q#<G()YY$C(#%$CQu\hWq_R`%>*$a'`OLNH\5b.Zku(nbfisC^'N+CXJGG4f(<Q=75IAB)<]",S)!IUCGV-qEU<QYpdQOMTZ092]g'6ulqEb`_d8=,;:\$-aGL/6D%F02?dqPuDDlG_7SFRr6&93ZspbM9*6\MXXl95*WkeDgQ+Xk'P4J]ocr)m9=Y'gcR(<,4:eEHVug#":+2p'e7H(p2F0j?%5>g7F8&%K[HE2M^VN\eGV:uZGq[Rgu^j&'tK`ED8dC#nW'D!<+\3UoUO0g2V/iS_)K_BSr6HaPB;e`lSkte2SqH%X&tt=)olFp4Ukg1<So$7%P%&j4o;@Qp:S/ABg3fq6N0r,DS3q$iCe2O<m2XQe%2;J+r(/?76O.`DLt'=c7p:+fc<c&D$(GXdWTq3pnMdofO>X/6"@aJ1jo0L"%h>MI9WQm#>#A0EP`t3fr5IVRG"\%7*'V<$$jln2G50W%*LP1n<A9LDY/_l.A7&HU?DF>cNqO:morL<<gUH*3DVao6':?-mfWtAkI%1*=LNC/00tN\c'92-/_52#]Yl'(%cCD/hRYO!JM"Dh0+Ib.e#B^\LP7R>LFZ/3`QOVGuMeJC9s[0u![`%3qe60P1k[f2J3h@\boC%$*6ornmLdAi$juJiZ-YhO9$b#HEQF?Z5;9DXXG*2@)d8(D<Ff]:'R`(]nE%KMK0;))2_+8X->*0D4X+ooV17A)3sjh#&iNbM!NYD%L%t>dkX1Jhh^>BkUWT,RPsuCMX/Qk#jE$>WAnYa@1`]a$&!?\=,C!If4_+M51Q#rKeC;"I5W8d;bfhN<KurLW>2l-NGhO#H;B]oK%fUtS8g^BBnPY9FeVbtQ'Vea=ql]UfW>K&$<6U9E(b0rr5\t7qG)!6RUD_*3XCqcm=T_0^&\V@!pd3PjXV!2M1pT+6jWM%L<9'oi>%n['XR9BIa`b"Va5KLTF@Tg#N4XZb);]Y9TpkHm6d-kFVs6X:uB4Cmc;b(/4?\f/D*5WNM$\)h<,X[:>Z;8ZI(gC6hiU>ottTsXVe%CV.>JYu$p<L>Y+?VnWO&@&gJ7VKAU#CN:+T/;*S\T>C-/g.,#L#Gl]VUO?+(8^X_'Ad+j>Tai$ig<*'%]LK#*9]jO'p@PDH;30WR%5s9j*(Y@,@YNM$jL":GhUQeM'k4qB?S>aPXX:@@&.O*h,D!t''h3W,eNg=M:"hj:gD)\TiJ02+P1LqS;d_C5_)<=?$Iee,Fob'<k%)9mbl8u&q7<5^i<br3<lfK*$e'.&[^</mDgMn2eYr(>@u,/NCTFu)`^bu2K"5M)oENE2itcq?@C;3Tg=qdealr_r!D7gGX3BhR18%`S'J*[ERu2lIblO;CP>*brL[n>OQfb.m-hr^;08p8G,D]n"FT1G@MC/3cAJdnt<oXm0(BW?F-#aG0Kfb;*r4P)RR4(Q.rNs0+\$2%Y:=Fe&fOd':8G$:(pDXh;89t]O&aAbVLRnC<NDTt.Bb\/1lYFEkG0/.3>^4h"A40:+jUN1V9*VjqP4g:3d5jINc?oC($-Npk=3S9%n67_r:?U*d,F2iG2k=`[D&XadP."tDbSJ>4P@>$T"f\St6W8^=9;S\_/md6Vhn$!actqA0*DYA;@8ktHHfH_,c;asQTuJH+AmZqW%Nibo&\d,;.9[MU&q^0F$2h[fjUeLM]bcC#9<.edB2G[%@&(N5n.Jf@qfhg90nV&B[Zq[A<iWl1@6GD&fdRh'^W3f'1Z`ac+6F@i5%16Z<UeQ.h+4@r&b`iC1AiH+9[S$sI02Er/!4.",hM[\]S[PQ"YB<&qr5%S%HCoL#U.R3N#@4*gW:1p0jSU&fY:WY5fJ'Rp-AZFce%fimEK8`W#U\:hEq8MN9,e5sZe1!$F.]*%^112e877E'cIQJNjb@"0+E:#@:?o"G`')=f_)R9+Z1!+$k@4mMR4jb\2BHL[@mOSm%8%QcLZ(qtp"L5glfe]o7(,W6Z##(hfE52U^EB=s1nX_Q[#>5O^\`\Fom^G89_Yf\:^tK)_H6=_>'>liKp.kd?4b&3M#0^.!F%\fI16%#)eH7XF,W(f:o]6/$Y'u;#<uS3E1/E(0XK$:U1`aU+4AVcI!K4DrqckTg(tUMPj-8,3.8+a$sb7&E<^&][)5P%Q_1?'VObqosguM%6GepSX'tm@Nl[&k\u*^MJTNFO'fd:f[mt4POYs5,rif_'Gm"lKc_J!=/5^^gV.1bH+QIO#F?7%`X@H)W>CspcgfG2!d8X*B^%s;*%Y_?g-HF]E-U/k"Rs5SN+R^RcY-Mm\"7r4LN<8Q#G1="`cm0D]$Vs2CS[cc3X8@9FP?R6VUd<ES(AC_R<HNK$Va>fYsS0gCeGlp&W%N%/8*GQ]IToIGIfHmuOd'qW^W0cG=1j&^kOOBJ:Mp4(44)S.GFO!'S<N1O:f'Wn8[mT5"c%-)C251k/`fim!DfQl&N[272?Db0Gs%CTNUj-8b(LZh\%:1@kLoT'PGfbs+euIobF@=hCCL+TZ:b9c9[@e<S6/AENkU(@.d1V=X]Vef*@:=8U<c8fh'tDa#pH*KarJd8kQe%5?^N*\f4as!"EoVMVeA'Cg=>+H4M.aF&'%YE$J<A><$Ongl1OL*^@)ol$\#>_qD35>8@Jln=6NCeJtJB=b:#PHCE;`'V0r5DbE#B%>$W[g_9DAGp\HU]=liiga$eX-?k(\.L%U_UR*gi2cN)j8]r+ZVk0ar*1d%M@='I="Rk[B(Sf_p@$HKXBBnGqalO\U0elc2HhDN:1%ldO<QCJ!7e\Mt^3dUY..[9,4\T5*!9kX)\$g)%1=EeZ_H:DNGe*`MSB)Frr,cc<\U'PhEtW9n*Ga/;NO$Is\f=a%edU=mKEr&g,T%7*=&$'CXhR16b81,ccQjU,FM+YGd3US:*n'40&0nhh\?=\e1<UpR$GheSC7h(`(DApcL`XGB*-B)0^$C7;O$&>))Dhcr7&`h0eg#%/7Q6S&Ukc3T/pip:T1.%)*E<#5*fgL\bGT-D]>Ej.#%"NHitHHqTRpY'+2B"='NG(/scK#``(T/@&Vu.ho?95ED)8bpW`QdFgtrN%p6"/r2d:"p(cb>f1lg!bM/KMm^YO24P1kk_gG0Lj%j/-Me,G_[ph";<<9kOsn`b&6fu"'Td<i*g4FEZpO2%Ud<&4#i4aamoGA[p5%Ms@_@mAY-/W/['4(FRNMLJK^T4j9n"*YkYk=8t/rQUZ,*GK^t@n.heqEUtdR*^14GQS_1(kWF670:MS'nWJY.b?]AfE6eoHdK].]%M8#D:4k2d:@fap9Zk^_6p7=D[-+@p@?><fmT#taR'>Ik:U(M1q9HIeok,%C6]"c.?o(XJ9r0,k+,XE1DR[Wp<WDX6C`G"Dkj.>L9%b"T0qK5ZfJP?8%*+#ffVO3nW>2Qo?+q;#06SU5i-oB&nTe(<im7U6Fj97J"H9;o7Q@6X]-_`%+tR)ahO3DO^:R^GG>eZEjbIieJn%[1k2pK,39(LHgjDK')<ce"=ZqU2nGiSjDA\;^3(?o&h_<*0&F;a.LE;U2_7Gq"'jhNlM"Cj3M5l][cc\kOI`?B:>&HLHgh_75UXk%T?!N957s^nN5Sf_[ic]^r)FU+i8fDC9iO>!%D%0fnkAp"5IkN)VF/[n7nuR(VLqHeh!'<3gM?%AoQ+"3Wt"mmd9Na$*hatABPrJE%7gmRbX4-IeUSW9X3b_)[-_5.U*Bg1:4OG,8NB/Lda0eA%c-E7Jm<s*2s,PZ5)=i4s=5Ka<\+,rZBUcZgk$Dn?YBEJ0*E&cPQ0Dsn%qRCiIF?mtY8D+#FG+b*@OKM8Kd4$M*AOSc0WE-H-s86\oU+Om2G!"DGoT"qZm84Zh0lAr/Y_6\"g?l<rd:%G+'Gu9fd2TcF^X_Nl%.ZMdX^`2ZAZoK!&4mIED9qmhK^")Q$8)I1l#HbO-IkYTE5GG\doPE<bO2!g2=2XHJh!=U1X:Y@/GInsa9oWM,B$/NYK2Ls0NN2:9%g[KEj5&O--n:;@RU[QaaJ#;Tf%'hbc=$PF<GI(NBiBIouFdhtUH9loDUH:`)455b@.@TOFD_UFa5:5_1TgZNIm0mFaj'fXSNonDn%jA]_iJ!H`1i/rHrFXc&4iEqt7&W(M(oE2'+Iq%<!03b!^3kujVd57:VBRbGhl=<@We'S0i'X&4QhtRkfc4g0?TE2+[JQe'D;*0CG%0F47c[a#faEEh`Ord]l$^'<%@@M)Bma0B<7q`@;-USN%86qC6&hcG)HX_NQiUsKu.FN2j$a*gELglN.-Ho3kD;%$uN4RPVJ\&h&1%lHKq1ql!5HeXLeLO<mV%ZmY]-m=3\WdpBLISY1*bkdS=%brU0sF'ZZGJ&IE)Y/f!t40s*f*g1#00MIc.blJegP?E62O,VJHNd6N1%YG1Y$3QgFZO]6ibO1r>O4drg_ruSW3CJ?sV7Xm`6D--ZUeWk7(K-rAsWo1-/-KQYEK_Ea!hF/M!d8']D/],WegsQDDirTLSgN?mM%ptu`_,-5a:0GDrbX7Pin7:YW50s_?[K@[Ddn>CnRS,e_Hl;Qs2=g.d,?h9*<GSIt'XO]6`SW)-Tk_4Me]h#&q`HHH'?^&Eq\jXon%r_L0+fj9kO!Yk's7It]qGHWab^.$.^h8nW0S8X4rkD0f0E#$^`&>#]ScF[$IW&ttlLXlCE^pB5?%2s(O*]W6CF7$(!#=5;<D<D]5%6JsT<"#>=ce2p%4D1,J[39FeZQ6/iA?Ye8G5o8'kJuF8Z\b<ecPC@k<P_=[Dg1rshl*u][ks#+XC?W;oq-(sc&`epa>:;[.@KK8F%$\#:eg1qd,q3\OJMX-jp>r;g$TCkdVDTC=76R^gecisa!M=q:`A,MC(1,kZ3B[0_`7b%GA%2S5B1W9ttVs0r#-7_:7Y5Y,9gIeq=%6IUf667)+5rN=Y^!uK,fUIo1S6Z6XfZQ?BTS?"-J@55!HQuZ-)s&Zfo(_36[mI.IVA.>`0%t#4^"7X+=,4oar0Y!Qp-61tK^#<?-%ornI];!\'7Wc=$3k$j<lli$Zn%=^T(P4LTKg*rbAlgK;9LM*j!9cL0Vrdm"^8ncJf@>!Q*3ZPRun$udrP:(<Gg#R(YOa3\AI3^<%%%r3%>W]jg;oX'XW'_4Yq3^'jZd&4b7RE+_@2R;Auf0'34n2L2_K`:b!^A?GbD!bd#ks\]iTl9BQEOgEA?XYFcm<[@17e_I_)`mY6%N_%t%n,N5Ld`RJrn$L!]i'6"\9/g/%\aHb:d:H!U1`;7XNmi&U7iD\3XJ!u4L5Tpf::e@']`4&5GQ?TGdrV,4R]!:3_\P*4B1B2Q%N"?e/KEjqs4<fjfebhYsf;Kn2QPPjerM9bj&UjO.8j=P<J572e.+Cb:PL&tN[F7FBD>J3qD<Ke>Ua`_*@C5?[3Xm?ZUKp"c7<>5$%rVr?:<_u"^Wqh>_Jl0-Ub"-<q.\_mq'RiaT#'bj"4'V[RgL'X$GSdKcWsNGIqP&Ji]2MlK^)pRD6TCtZ;gU:NIJR;C*JB;e(PM#_%Rc!Lu)p6NjTmq5jN=J.)<-0iQ`#MkGaXJ9aoD&+//"6G`.3[DC_U\ECogZFXL@H9sombFWchumNWC,'_R%n)7c09I.kl%hYp3V1S%):q1@JNXMq0t6NElg"WFjaU*.rr92p`uk?X+1rQm_olHCm54jPA$N6R]kl<42H/pV>5r<\%3pQQ-E!@<o=(4*r;BD%##=T0(s'HQ%XiZp!_5IP;nH$1hT!('I9\^&7QMbC9K`EA_(t]7q0pj(4T[s+0O>G)9$uP^/rrG2FL:XG%FOY-e9*>1`/K\h's)]''m7G!F,bS`G%O^>=8)_KV$i.ekR_CGHs%aJ'CEK*.dl\l'fF2;#^4:A)SQ!eTK\&_RuCFAN>f@jdVSCX82?pj,r],ADmqX6UG4U9HXg*a..6;^n4%<IQis$rI'&lKRSe(FGo'IlseWW]'lHolaMSj3E/(E@9ac3R3nlO!]iPIFMG9_Arnt+r]XoD,G9"oj*k(;=ut&`MA`@8Vub`@o9B2%Nb,U.Lq8F&+19/Vd9l:Klh8(@CSb'E;K$ZgS]TdCXJo3oZC3oa#D]D2lM]%CrNj1\4rD_IgNgC.n,K+<Zdp)nh<t$l?mNGMGFF<g%.8u\cVr#)5*g'2lesO0hKQ9(=).Zif[1!JpX,k")6QH[B7P:lg4"=nj.IXWuSI#$@VLF/R2q$8MY.Bpg:'MU][V$F=]f)r&;?+\-%hR$L"bUH^jN;?f;kU`f`BS75]VS[gkhr\+;hQ?OAZd%cA6#-c.1Y*md52DJD:I]tT\q>eSKq$oD&3DAQm=2<*JBFPRnA^Q1f&3b*%BF+<0:"i*Yf,T`QmFLXbY!l+k'A[/\Vf.(#Wa"f]<S%P#VPrj:*LJ/^aDmfYL8NCRg\;B>Z3;(m5ookL5PQL.oV<mDN[XEeYN>Qt%dpXRP>m;rDXFPW3V1PWHf5t+c?E1i;j[S;W]PNQ\\Kca:<]\!99*\AIRLlf:cW'VLin96f(FeL8@&3S1'I.NVPK\Ra[47qFjGFF3%Hf#FB0=G);O,qA<M4lOo'@BS24=lCX][n!X6TgJPOnl:)rCNg8*KE;fg*/='2B54p]o4(3LYJ->ars6)Q/"ku3NCAhr:_m#)Asr[%B?dO=Vm3$d\`TQGQM?+6QtT]a^mB2'UXj)u6';a&4kg!Ml&CTuoGWdm>Aj-Y'\]"h^V?lijpDSF?gX!AadroqY01ijkFsfZFf$rZ%*(>[odX(gfVUb[E:V1ARnT<QnAQ4[g3E%ZSWYDYQm1fTt^ECH$mA+D'l#[.1m7-?V=90(N9ikZMckYk5Hr!G6'FJ:=;XLT7hu4$&%qS(3TfH!D,k\[qlNEVI\kVH]&H*tk'S314dC>>n7gU&TREdud7*#BN:Rt'0D'jRWh+5;nlQ'la*RV$!NQGCFKnFAW)_=6_dVE(Bo%bH/ki8p+'A>%Tm6cr%pI&DD"$eaD.CCnh*eNGXf,q\.)6J(]f#5eTCu*^Q8N>nNaE::k=+nGrJoobI[bg*#L=i$:Z]D,W@nZqar8%!c]J_f^8rr@<:@'?u.W@>bEsF:HL:1@)%B:`\Hj>>sSNE?17Ne5/JSNR8QdFN:n(-V`TS5daD?8b$"Nq-RIB9GH+_WCSI&L-,WVM%&qnoDhnE`J],H'=kTZ57RtQ%6%^d1u`5:0W5Nm8^oXdl8S7uIql-fM6MtqJTF<E-IVNtldjlW+B$`M_F]C+1QjgoIfL"[JTb%_=N%^pTArPil"D'+s6GUjYg05Y)4DlWG`R&.bjc;C"hmgNK;Dfh2dnAnVO`A#hc\I.ln"1*I@M;qk.9NK+0&2RY2=+#c6E?JPg:TI;8L%7XBdUS;O/\JXn>%,rJE*!S=4&DioYaBKZiYJq>'M:qm40s/>9m;$nhuHsILC"mTO*5'3)Re8dJ<!oA9H@^s>P+e(>q5\r@7]S!(t%d[=e?+-Fdd;^dNh2!Clag!ICt6aT*>r=>C2#T"_r4!TN;,%C]W:np2mgCRGi2!VG5Vns??ltWC]0Uh'9q)-NDB.ZMtjo'Kp$"HC4%At9g?M5^Nk6-hIH%e4j6oLFN-V[Z0aZ13$NLmCusAiW.384OPWgX,H2^*IN!F_Y:3PO`D6JDaW>6L&5l8k2cgeiICg$4H%H7i4Qo%8E:pn:S2p,n3-d\&3>#8W)cje@N1UCe/CH*^F+ZegI>.u##><:m+4X[^SKN=77PiL>\JWG#J5$MHBKq1Us%Y\NQ_9HnO%O\d%3kG%rQE-GGC+QJn:i27kOEgb-[0FrcK<RcqWkl^oulH'7'<B"_1T%;.lN\P06#+>m+M8e:jG:J6GHF7K1'+BfH0.PV;Or4Y'=4E?I>[i%mmqO?YJe&4@3GT!Ee.CC]Mo&CcPQO/Lk/fC&GHt<(M_cIGMXuSp:]GKp*K"`pR]udqO$u2^,fV7/H5C)Lc7<<>esO"hQUrC$.8^,%*BXD2;/(E0qhPJ&k>QCNnX/N'mY0P`61Rbd>3r4bH#"3cUP&M7/i5[R3]p/u%m7R*Aa_7G$m&ofV:"n0:jc4`Y*Jt@IM3/Bg#n)j%#R;tZHaSOW>`f$f[5SO`4?iC]D*/a(Niu;)TrJZ`?1%+pJU04L.?e!#Fn!'j['iBXnenKOoHK7g:u/+M3g4[DBQ@#4=R'Pn&*C-;%(VTcDU`CS;5*'#FShJ;,/LOocRHeS+[*dLMe!ct-gksg%U2sSJBQVS41E)1cOa3_bicApAaoop,*H-^._B,>g=Q<aMp$INtH)%X"%HU/5F-`2m+/$6a%o$W$1)YNl-Z\!4G=0uWtZ/IdZb2o]CI2C$FO#Q3\QG\J!hfcC>\Mki(o:L=qD=i4&gG#]!m\JUSN?V\FPk9%n%0RAkA:8(NLDA8(aT@M"]D#^:B7#f1j1T^5[VcYhqn"-XWX;XMM3-sEOh6LX8N@N1@IlegC2EK-saB":$@Y:S6!G`D>(sbh?46,_h%f#Xr?dI^`:q00,?04p1N9"K+Pd:d",j4h5X*UT;V2>6M`-ngiYdugd`j'CPdo_-G7d;ioHar3_?U2P4erHWX"hWUOi3Z8OT2keX7%%!aLj5W3oO4[G&SLPA81_UObE#IW6?n;a3i`)Z4%Q8Dckr`4+cI683Y:SkR8U[+2;EUnJ:,(U^+pl&]G$&gp2N?3P`'lk(L55Bo5%9RCU,W5gi'57Tn"\([O4fiWs/\*U8/USlG'UV'U%"lXY%5(spZ*]&b_[P>JlCp[*;NS`7)JRtT8j_22?egO]TW7b\>FsnH$'=aA$%hnIs\k=ci.b;KEfNP<*f-?lssO)K3CcS=D?m+QC7kipd`TDRVS^pMLU8`[ai;2!'<D!sKrF`0S(B17'Wpt7HAo^'phHHM3TVN$o@%KF&4,raHj_WoC]R'l'PlqYI"h?SpH`o^4.4N<X#2c.U+>s)m%B6]LMp=JMf0h!BCGE`4"EG<0-aBsr\Ydl;5Eg-4/gkSoM?`h,a?%ctIY>*bl;Uo0rd6SSi9bNb>$SH&sA4Ap6ij_lS0*b1S[eoOX1GdZN.2'AT_V+$lZ!egP9%Ku+c`S?-T+6&d?mA##eoeuq!#\VTH>%>.McP[e=[8EqZA2duAJ0BcM%RSV%=a]+S]]I%&nq^Rnb1;5;PJ3fe<@r_:`en!QDbVm[[bC<oE:.DLe#VKM@!:jigK9])Gm[h$FR%pjC!G.@L>bjRqUnMt#4)@4I7c,,oC9n9ft-egk)p\s8[Hm>mEC09s&de&`j]*]te>m$g,@DKuc=mRe92:FEcpeYA,/q9rj4V%sKZ%VsLC#hd8TC]U^)b9XcV155mOf,]CSt:K+0P,2GheO9rm@_PT5XZTMSfCu*U58d?,-pNCE^HZt5\:\0.Lbu#ia-t`%_&pc&RY+Nt2%T&c,#qgR4:rq,jRld,@.'P(#4'Ka#.e!%gLal;^EcQN/A:74=pGWAQ)f#+BR!l\II:E"`/^A[bH9C^BiC&MAl?OnFto;D!Q;e<7`%f!_=*L[alBrMR5EqUB_5dCS0(Sn?6=N^ina(\6P(c42srbc]+9^6Ggm?0$A%4?E(Wm]AGA^2+T[T2+9"3s"61pYG0bg+0)iqu4Ci%?(fK7*t8*p6VZS[@ZWWA=#U(doKl18GsPBRP4koD2fQD[JrX*K]^pkq?]e[jf"1SC4SboEf/[N;"`O22%EUs2hb!Cu_>`@3p#bNN%\&V[4Stu5;80,C9@V#d1lc5UJ.$?0WSc+9b8U0PIV!^YD\2d`Z[eJ+cWk,Msi-3(k%2n+(W(3)C`ocAA")GWuR/\%>8URjLU[-'<%fWn@?aX>@b)GP$ap>t*hIc&a7qs\@LB\=?6DR<Xi4_Tht\jfU5O)O&+0n#qDQFhGE^[R6&Xu:Rr?6!9lNOH:(2HZ`jh<rN:CD<QP%*J&drL?=K8*ZhC%>us2nb=9mZ"Ppn'X@SgK\jOB8dCN&IAKdi'p[ud?M8Z\sO@X8ja;_F$'Q?aFDAd%d$mAaU2imu:-fT7%E`MOD%UMVE7,ZqC9lY$*$(H%5MDr3_g/RZd`$^\GD<SI\'41#[F&&tN#qpAaSOT2>J0Q]Xh'jj/:6o7(6WB[ZiB>.716a>"7::<8Eha6hB%rDZU?;8:=b9A..#Vfcj0-IdE,qUI4pi5^T'5etUfKmN>i'Ee.q$B`A>;?_]dK7f>JqgjikakI"=h$%olLDEaBb;q0o`I0r"$N'sK%\Dq.L[:a.+#`?HNL0W[CaAK[!F,iG%JXAJ-R!"8MqkR/#qbBRA)jq9:60N#tg*@rI9c;'X(!`'-pr=\aPFILa.j!<4`eT"n1g[pM%g<ZF^]tHULR_R4+atH.)dZ"dHJk*<iYU>b6q(#hF%K&fbA!Y'=WU/1nZP-*B-C4/+rH#^rB/.Pl<B1WVS(j3>.'M#]C.<Di?KS)3%@ltP_W4!'in3L=ioo7<sH7fX%#.2e464^?pk\&q`,aMcVAZZ<mS:K_]/QF2TTj?pYCnb:%1]>/B*eGJ0][:kVFsYM.O"Fbo@TE7V%)""^VDse[uQ5LUL_`VisPBr.g+fgV/mJ>Rsjet:*3\LFJ*gJao5D4c9UKDJ#'OaV[`JBQ'[:Q;sF.n"'g!\(/r%oFYT7>)+JiJ$.%_L,m;*j'VM$]SlQ/fh=XADs9pH()K'o2XD("sAukf3Ng<Aif4&\,<h3'p/eLcd$+#'I#ck\J"f%Cse?r>th0-n#IjmD<E5r\\<M:%>#lF;)?feIqj$u^g@lQ7O-G,f+.4p$.)079L"T2BGA;p]7+5I>VpO0W,?q6l$U&&DMo*Jm=!cUgS7P0-ITpAHWm5KTP_pNSe,4Zm%VFsQXlInb!Dg:Z+"lkM%Ft(+BZWFI3\.In$HX@^m>rlM3QH^N&Ot:4l6)8jsDS)H(O3^CnF1XWN;^6.[103N,/PoSc]3^r,?Q*+n%<i4bNQ5V%8Q0rnR7:hc_h'*PC=M"Wlkn.dX6)o)[bmku[miTDm`O,b?V6mUO*'BT.&DY(e`DMmS?O*2<\)Og9B-f'-N10OYX7ETK%./#F@+4$W/a39-<J3$i*-*!tlV$lRu=8QTD6R3tFmdm#SA\i,Ya-NCVn[[ijm>-*(cd38uM3G)%Tn&Vmk[dE@&Yj1,5SL&,DpSn3%Z<rf(oNP;or[g%#:/5&_RYdLEd)o`4q5$hab3frko/0oae>RtN>IKc)bi$BJJKQhoFH8BHOrC6/e#?=I!(*&pq+l-%!.`(u26X`4%3PK=lia`P;NX[Q5(Z5Bg=i$VD/L5W+Ac*j#X<DIVVCFe=/Wmm01JrP$FRhXriBpk"R#>(V(5TPi-.\SZgkJr$3VLTu@d06SrWFlo%^9?N.-cE(OAMLgRO^X)N=@i?oWeJB]dDY'>H_o,lr/Tk!bmYErS<RJ!-J9W=r2pJ<YC1k=[R8ePd(I1t7uq8jjTY!7]d'46rk:/s%8G--00qb<+r&2-S>tj*Ks25ZuN/fH-,6qGF!=FG0e?Q:1n5-o>N41Y]KP:]d(A+?nYu-aoC4NF7$XjqSr5Q%L43$$JDXAD?j'!':%*p^:$,=d"@fEa8L.p+IF`]_ZUQ#-4XF5bYfI^3:gFD%nEZSt'nrW27-+][BEE+*7c"b>R:@CP:kQamBshrlTkJ8TH_qc'"ATha#>%F^3"n=LRkj"SM:(BN4_-F0.MC'c'*>dAjF$&Kcu#@J_d+>jll5=k!n-R93[+0Gu>RQGo*jU?CLb%49j#.\8Nl>Fs\]AZSD*81rVc%LS;btML*K0's&13bBi#7o@X&%q]=MdEFjG,iEVWcbi7`b5*Io_Zp`e4JVIAB)H<QjDY/,O\I:.<>8sK$KoaPPLq(3C8P3=ee0CE2%<PJ>4-AZiO1nq7#\K.aOdDk(@+N/'!mLa=6D=-sM6T".T2cliK121Gj6OL]\qXSG%`W`*I=o1-N,9#-?E'6k;'Y'GDpg.r'DjIQ4%6_QZRM5i\6P6Er,f2()&?tjN*\IN7'DL>Qbg6$7=Gs;QOK";^+HnZH:/QSW`V/[;(Gr2'E5h=t:#IC?a>H-I#AG)=K.U+t1!TJ3[%.O4D/FhO;<cc+gITO>TGW#c10c=Lo<#&DPZosg+e4YH$)?9-:T3U]\XQ&/.5VDi&]6\`:9i7Ql.jSS*^Zb:<QN=U+^LCMID0@VP1%1R5LK+.]/UTW4Bq#.kGAe^rQFbO8na9:N<@ln:$Lhc]B$oBg"20'%Ac>50XD>0eD)TuD\U82g2&q0,13#nIpI65KBk+ofEkiOtdZ%=UgoG&`$\7L?82-cX*MM;kbK_>EG0-2c(80,YH[O/ugD`%f+q^m`\G]af=8#\1,Dn0#V$oIF-'WpFb(.SbEgM"bZ'n@(C:fV_`M<%HBE4fiGlIa78/rQ#IiHNa"`MoWK];5RZ#6E]tXMSN2=!-V45Gh^].VI;7%oSp>`BbE;PR,pBE+:/BYo;'Q[b[k!TWKB0\\FL>Z8d%)m!52KnrT^6u@NoH&d\9KX'j-_%!tPX=>kNPFulYp@s$GS]f9R2tZe+$8UXVhJatBL3)SF1[$s8e`>*1B@(pOX3%'Ac_*(a'!Q<b%SUC^5/mE:O*'3s*3dnHpi]2,S)0El7_*rG/lndif^=D;kfk8YLZ3;&iTsN(<;fgi^cCqSjTOU!pbN7(SD):B,/L5E"d+N'YEOH80%J7RuQ\"O2+=!%N_SI'CO)L^bV9:GR#^,9p<gtlu9\4@,eMfR52aDNU*k?AG$jR+V5Led.)`0+>"h=eEYS<@);)7+/OTg^#FO*?p!%(7^:XXK!0:"Y'n^BRF"?S@8-(,3dmC0B/^!YTpdDPhqfaGF,h`7gCi;%@nJ;k-.#%_051*@37f\9=9hA*-OrIZ;+2=$3`.tI'9AX%bf75fKt3RHRj^.LU!45X@MNVW&/pu@K?TgPW7m/rZLjI<\o"C3AA2"c5L!BoGNj'3ADpRc)b%\7%7-7^k%A+pKk"]j&1jW`Q@jK,%6F#.akJ60TqRr_"a[,/K`qCfuP=uuq9^<%<5DmR@lh64<0:S>#9HmJQ%#;Z%1J+Y6,([h3a6G`tS_3BT$d=^QpGB,k-f!nTl&72@%1%98FJN;j&SIG91GahH&Z:>\bV#/Y.Ck5*IZAsLf,XGN'QejQg^I=k&Ah9=0o4OE1kElqCRMfL>B$WbFR'S>AA2p4#4I+Sfe^%#G%o:23P.;%rSR<t%X7j5C>R,7>%*#V-0+k+I\PKTMIrE4,6?rRrSV;9Q[?d>AQ<e2RTYft.'Oo00#h34r)lF(nZR!V879Y34*SuF+b%jWE'_oN(;RX13Y#UU;eb`b`qVD5s,\)4L5W=R/*#.;hmrh`qV!X>FWDEk'2Q1PtGHaC-I,<1K"3fs%fBlfC\%A_`+*jiFH#<ieTE%[-$G9EIT%9Ki<;f9u`89Ff[Bn>biaZPK-Ltggke83]D3PfZRf<CF+)V2KWX[K#fO7m*.Tr(9k&KiS:qg/.L096F6-"QI.6j>'3E.%D\ob'Ya`f[@i:i_dc)%9PMRLI'p$?jB6VFdl(N`)kJe^0'p">%TI^YNFu6s&`\Ib4GI/QP$l[jnne"8[/hAb!2ecqu>@\j\0`A>"%JFJ]77>AuVFir$7_BM?!n3EAOdW;LREtE1$XuP*?Pf2O&-4_tTiH:/"G9\XLO&qI-R(X+!,6lpQ)TU't@qLLabG[3ZFqHb#EDAmU%pFi($#-jqH-\o6,+1"0jbi<="6KZouq4g@<4'jUID^M[5,)&FW.I8#sJs5N%&#lj:]tA/q#h;9oDep@TWT^r7qhQfPNQsqA.A-?8%SI]@Nk?i?qS?)8%QHk7aUS&&6EN@B?RkI*Nd<mo`>i4((Z:BlLE6Dc"]$H-VX]WRJXsbBPjs01Ji`;T\Vcjd9j`@cLLGM"<?u+m"%E:i3,]26\)o&42&0akH#fMYb3dLjPL@u#Fdf.iDB6\_^S9/eSf1JndCXo4aNe*@$f>Xh&kW+Yg+Mn)!`:ldnf?Ec@2`%R\'"nc!`%c2&9%kD8:?>D&;13WYqA@2YNDnfWd+Nb)m+KK@?Z9uPJ8_A3Ob!Fo_#SiH+d)4$k4?*##/N`e!PddtBQZ<QKDkV(+4_h[2C:'8N/%bcqSYU=>j-'eD_NAQG.hpT,<3O,N@DSR?Am0Mn2:L`*,>VJN?^@-\KXK8-l[ps*:MF/Mi%#1=tV;P/G>R$!7U>?s_`o?Rb!;T3cg%d`k)rWV,qJcs1g.OcbOd=TNE7=uajL;Y@OsT,]Xbh&c`9A(%)0-!29JLSi?9A-DB5@Z+&u-*uVc&MBEDBdt+?Z$EZuk"19%'!.@H%E&FV6*5u19Eu%E&S'Pu_BI]O)?Fce03*7ib470%GiJ:LM7Af<IWGn;Sb[&jAm%4ZU#]I6u2ob[oM$<J8fH=U&/fmGsW6@"DcuA]O%$Ni.`AoWpkr%^rUX?U6?;<J!U@H1,4ENIAnF+Cb&lV.S)KZE7bHf4J[gi8!eF.h)]Z9>-ETF5dUS1-PcDEgpG4FJK5O36k?@<@[9%Pt%tSDu8/*Dm>Cb*o.Pig.,5`D"-`Dj4bZg#8?=ini821>u9s]Q'Se*Y[/U0&N9B(p>ju]]X-+%QI!N*>Sjkhqf&]r:t;Io*FoLQ%%p$eipQip=E&4,"BU$iI_q/X-1n*'ICUINNP20q1m"VfOL)jO"D:p=BWr6XsMrcnY@N"UoMb@<Mq@kW2e[3o+1"d!gaR!)@Sb[+Y%m+.GJ`3N6+3Slj,BJd!QMk(X@XY]>#m#p0_'@r//0/ak')MS(`HtT"6\lFL@V+iT$l1(luUSZCuU9hY1AiIh_"nXH*(N15EO6UB8%U7>I"m)uZgIPWu#2$Pjh8Vq;TBZpuAUEHQsE7f?VjWbT.@dY7(D@L%FJR%!V4@E`;0?tHnA=_G\D]2_ioNA]9oLghD4*Se/jpH72%i"/]L1<XV&*-8O79l_Rdnp0"/Go^gdF)-KIa.BDd:':GQmi9q<cR!Ul<k-+%O`N<BHLI?X=C%gW3SlXORcnX1"^%*bXU6]KO)s2)%0]1O>/85mf]$LV&1R?moZft`L@@#'51WuWT.(5jd3jYN*<h<#u[9cn'9t+s$j5Orm[Nht*S'GhWf50ItbGK?)6HHIcFE?fi94ZN9%Vj$2i\Zf8`R8%=+BAlUY>#@2K=Y?7fCsSj/FCp,u8Sl_9flUKWY*M^nF0<B3flUi:FBG_OBf;MbQam!*7G2cp\TE-hBbf<CB#:NZ%l!7FMS_<oQ).o/eFCsOjU)mY,Cc\o&SF\8oc).hFfW)7Ab];s6TpV$OkWlDLZK]Tg.$cUW$YRq.'ki=f9!Pq-E!..EQO`K*/'XqI%O+CY\2P!tS"HuoT9kTbUL2Y.=Bf;NMo'EV?8M?0"B0m$Kr@'RhjD_B;=eBZCBJuEL8BTi1kB(.$ZN?NM.?4fDT_(#=S9WgEZ$h4k%f:MCOf83;+F)OdS3?0BLke=V1PM>@<^Gj!o^,e(L,hf:VSK)RV[@n8/&rqTe&hMhC5]L7Y%kYtNG1ER;TRc?kq<`4Gn<:"JD^-WD%gb#':DkAm0N(p5(%``FR5pk'9#f;u(SpO!(/\r_3aGjd!BGJok0!DfacW%.cad9a(:3X=?)uoCofA+X+?g3qK\&auqLA5<NMsf^J%d*+@k<bQ3:VDS$)GGZ-Ej$e05AgGT,F6Cchm\19[YIV!^I<4R6P-[*`%2[5rJ'QU6G\).9g!%FDS%3VV]$\k[4%nc-%$+]5@a+D@%0'bNEj)]A#Nl,F[ZUmST^!^11h7U#--@7%L(g7/a\A,M697D#-8#h7CII&kaLc\8Sp4f^@hJ>C'H-bkIkMR//FLB3\(T+;i)X;(&%d83p9mrmi]NsdR(I=@l^3C:f5=gT7IS6Ar$d49)!=[bNPhr@pe"lajpZ(%*"*?r+7ATK6Mnp067`*/?LMU?YFp:I^/;ZWStJh_[b%/dY<TQ/qLr+`?bS,itYA^n-d&pV#;":a9]!DbO\,h`4riACSOLA#O>$hGJ-^R;tAkN?gfi>29XB[fa*r%(9r$r4Tm/[Dl&A5]/O=%=hu+G1T(p?jK6Gp/="OQn$/<AU3P'_l''Th-QK]lARGmVY!`IA%kl"1JXLn[m2q+?E,1#+n$lTI78@d2Z]0c[]aUHL\=;O8l6U>X%1M/g'I4`%p%<m`ePW.LjZ+_Z*-2F(MQ/j7%]]%.qD1)-umYpnR)Xk0tE-&pfgJc??8B',%d7t!Nk2@3dS3%(C]t)4<jhr,a>?WB)%f%1jY9Eqr*b8lU_>!_;GMo0QTcab7m/8<AG[W,9m$5.-J(5kF*K.c:kO(3XN=V?paR:<f]DrLWf=\#h`XNnP/);[$[%(6!i_$7q2%e!M[Wq)5NS=jc5;>bs120;u=KcHH1/N])ZmOP7FYh,7$'Hej)[]b1r@(JJ;tlsl,hG\[c4o*L/u-"F$nS>Yos"iEYP4<k[Y,$]o*%:2P$JT09]omZBU"_YH[40?]Ot*3OWFOiIe@#IVYGd8['E\.cj:kI;9O`j>IVQ=4Cb2s,68kjK9l50"Bjad_,Wbd3mH,\Gc%nRgPr%CsF/4lW8llDdg!GBUW)90H+Lk+%aklc6aWjO35@_nZao3bZ,;-7il"\+))Jtq<0PdEF'+=f&Q)]];Ji!%/7!^%(f<tq/C];-^Hb]%C_s\<^Pg;rcUtcr\DV8rbUNoPrY=qiGm@r@H@1gYAY&]W?<:<-b=2Zs3e(ScBOZVULoI_acOtT6Bs\jTF,_+,@ESeo>,,>;R`C0i%*4u6Nm98TMXm]AhVN%JAU3.)TE,W5+T+#=*_m?mZ0D=mGQhf5h9fJkNC!,B1g2*k#dB-ULX(BgpgF`g$ia.D+`\b?WVm8adWJ^-7%6=Zc,1NSG%ibA_Fh\rD*bY"=ggN?LKp0?)0='Cs_T9F<\2H`\?#b?(r.b!h0h+tJ&i^:&NEkAQti9]]Kk?ER=h-st6$=dcnZ-NCF%=g1O's$#_t>bNk&fiC.*GF=q'Sr-9_D;7^b%[Np^D2/ZZ(K6*3Z)?T/TiF!RC$'tHMe&YE7;0tePLWe=OEG3ZS9'YX@5q?\T[!8u%=jo0&VjqWfZ0[Y1RfI_Xc>d%U]#7*Q)/mbZ,lO.]FS'Me)9fnH6YL-^bKb6Cb%k]WpSBM2e`>LF[pD0[`C^@-fCFS^(CKYIBa%fa%1plFWm:3=GCtDkA5)/4TL!/37>jIYWQ:n6+CjEn-c51QO>+dYL=`H&)q9dR;&2_gs#0*atqKgD8b\e#i+\c%5,9)TXeu&P\n9QUn%0lrl=ViS<oYc>J^ACcNA\M2]NX&?Q1#+l<t$QpiZT=Wr'O"_Tb<OUR#k=['n9apTKadjl`;ZU7mcT.@Ca3#h`?>#8*kRt=a[Oofc%E$:54>r%d/[4Ym5CsH!F4l3eBjg:28^=/+bJF!$C%6J>@mOPWhq9enapQ_0Cf'W?GE@V^&bjk72p\b_+8MTO([MGO'od)g1:b63]%fhAu][</A0!:'<FH*[K&QIJS<T\VURQ;u.WURjbuSMLZ#D%<4rr!V5Bh<"^kaHeHa!8Zc;]"5l)JgTo(e?d73Fccjk2@%T'QAp#&%T_f]Z96/7#%#f$5i*8=KQ1rNe#>iS\R[I]=oX*t]I.fM)Xm/fuq5eOn?HVFcPm4<N[HOH7-9&7/_PMYB34A*Fq)hDs\<9M\Yg`n:%i;Mr;I+Gc<Xn#@RbPNfV\<P=dV-<4gmhOq/6>g&)#1Iqt=<Gb)oipWr.$K#V(5RZKi*JVUMQ+)]Xl=.F\CYZpBNmFiqDlPEXlNeQ%qcj#(T+0n$YFjRUTpE=BO/4)TSdi*g]mfYuMic2gML5<g"a73XU.+MC1CdK9X.Q@cBn:X0m,OKrc3@QUp\NPRc/W$Q]md#l!Q=e?%5PkJ\]@bR+qU'sX]2Qt@^XpdqiljM4EP_8l54h695([:9a]OkDf?Z"WNNKdgZI0_r,&qr2Q.pZalr@=@.4onM+/QFAXa]m!a1$Yj%pP&)/ZbP%/RJZd74&i;&7cq>7cSc1?B;D]i?9cu6@WAFjQc$FOHA]tLI_*%I-1:H4F[ZM:k@MASrCflm6iF#i`P$`o\,*3R.o!8j%o*4C<>O#NZHUl[]Y3:K3qUsck\&<]BF'K>oG9>_jVg)maqQ8gB5"?dQ75fq%Hi<;:`*B\:;YU$Uj?7HPMK5gMFful/ZTNT8hh#!F%F2hj#:0tcMI^]7<!a>IO\_#/6NLo;s^;]R+f%nBUJn8VEX5@C\n]e+-S"8CiH`u=3=7I0/17kGN`4^Wn\,+cg50e;ShpOLHl<Z]%%0o,;OEqfDJqIS$R(HJnFls@F1Cjc]HlXs4UbL7D8hWs?h1U<HrrTn=92Ph(&)uH-c:DUG9c#Ip<E>e'0ojaCiAcoNN^s@5.T:$P3%mp`?.f?^%QE3JITme,$WAnoSY4VuC<cI;-nIe25E(VSGH5%2n#jN.RGT&)s1\,+>a4_So?T=nXRiRh'&qUl721S2Mgn+F"0V0]27%Q"OXaHi<:o2BLajme*oI#<'i0?/T$R98_\%!G>c&].<O?*B<o^g;WORZela]=e(E,lY!ple7'$&3Ts\H`GE+Zp'&&q9X/;5hFrDh%%>J/Lcch=32Xk%F[V.L30cLn]/%9WDI](5U]J)$T(P:R%!La(Tif2c?9bd07]K8pgWAbgQ5/B6[ktP?[2BIjRER#Nu**ktM^<Dmj%G7r6@'>a3?2*.,U[k$iF3fndDHsHDH-[ou/\W![U]I#D'=*GTPhfo+#[b^p$L(dXrT=<m*X7gi6rI4V)nK#*Bdco6Db0TI?3'@2M%qRYm4Dp$Ikl0V^.^[q/"#l=Q``;cA#c@`_N_r0S6AE:AVfcH.6:%.qO4c&rfc*(FQA$("q9F"@:%Xp<_250-t(It6:k1go#.AO.m%V>OIT\D)r_$Asp.&<uKB74<'_:5/8ll.9UuabE=7YCl64G3H:6"8Ag`Q3TXNi-st`$)YY!e)#c+D=VO#r]JmGU1\=\RWqK/3\NJ-%oO'd14t=+3ZCfliZ7@'>4bDGaT1a67FiE"`f?NI(kcg[=p"l5\#Ot>J51?c3h]nVA/`6O&AnnfEpRPZVO1*rLWr''nek%'a-&84/%H7jo8[B2ZL/V;,i?)`RlUWuLH&i_PleoE[sl!e1g0^7lYf@APT6(Cd=Xa)f][eoQ9a<nB?+)Ch-Eqf;,3EM?X:b0*':cJl\j1Ve:%k[a/G0KO+=.d<K;J*ATcE*=/CmChKU1ss@9>>ukE`+,,(&&An;DL<tk62>C'Hn@Fr@`UK.Ft2%B=F/6Y'fu#d#j^TRh(LY#J'p[U%r];[E<E^Oh>5noHDSHL_&Rfo'D4UQVD`N0N*l3jUMXh_@==k/[nX(DJ7'o#qTT>K`reQm5jU\^257E`/?H2@Dr_),'gO!#Yr(kAM%a6V^IiGQn%6N'+13uSb.n(NBos.J:cBFdH)J]FZP\e/0#UBpnFkPg815i<]:2lg<X_5SN;<%QYPle6PK<Z&q4jk!%%HPGW-.1\39%Hl#dAL\RhKWCoCZP,LtA;'L-A?@?#5(I:rp0bhOp1!JV/-=WGb\1-Pa64,R`"fUTN^^%r=c,pq'W)hZ#HkN^$,"*N;@.`OF>=MDl%6hmYA:Ll;f>XrHXJq#R&8DPe'.?sP@*psBERlka9n0HqLFj4&P<o!jSNDY:^-M?VuU"n6JE&EO#NU^?EAp9J!\;?d=OtWpXZEF+d%='j+a5d?(l.G#Ng`jt-A]6D8$P(23^VF/*+YmHVOQ$n`#mg+,1`Q+uLfY6!#MlV>MD^>"Zl-l\JJX9".qV048#Wiul27l*FE<)Z6%8f%JXeil?L$35qL1Bi;;(+o6DUZ/Y0IYNcJ!eB5V?'Q4eH:5G3@-tu:_OAFU?F<(&kk565k>2:.B*Wj4*lHH?Y]P5!!MVcYdEQZN%#D3Du)\[Wn#0>N%Y@#7fh4Ws/B_-i,5#/]ol/E<Bn[Ba[VX=!9*eD_"S'7(qR04\NZcXcO%sT4O[_JQ@NrAg^T:UT3pGf*oq#to@%MY_Qo_"b6g2!g\_`]j$#2(HN`a'"!!#Kb^miVbji6?;-@Y8/R"r%Lhmp_%+R]1<ML&^**p.5]MGB9pC?'1I`P!q^$?e?"r&:IBHo%Gp/ZPfW3MR=Xb%T,Z8[";7RSKp:=,%h1)q4l*R_)TpiNJS35Mg8pg@hWZV>!36`l"Oq&#@o%.Ku.U-l#"'Y:fW>L*,8gX:Qheht*%mOkW_>Cf$GRZASjDl[q_'gCIe`XXseT0Wl)g]uJ\_>K5K&-M`/Om'jhi(1;Lg)hRC^K!4.\B@EPIP$G:g=\([o;@DDR*H"crnRZ2%pg(s4ra%K+DsaCEd8%>T!Si&0P&h?h4.nGQ6rbL2ct-'(Ar"oMVpRTBJI!T+$hJC<jo!\&=_o/%Vtaf,o9`WOH5/I7N^Oi1mXa/7%%ekQiV'BT,a+(4L'jnI!L,,A9329=^Nm<nql+L%V_T"uB];93HE:ZutU8J:a`dZKeo7u:pfSjX5"ZWJ]cDNjfp+#kkATGYsg[X=d%jfS8L8IW:d:L#aF;*3/"r&g'5hK0&GN[O!Z+3.jdc$P'0ZF8""TbWkZZW8"\+W`TfI#'YU$JgZAXEfkfG2W@O=)iNRh[u@.9a+7E%:j$=BhBUbFT+2E/[YfmorFrMf<f:WtNd"f`RFPp%.linGD+X2oVc>7R$r>p=qob,_IhF5aa(.;+a^90ZAO>G(gL`_[qZ8-)BNAer%TC#3g:I<0^`D(S.g,VK<D\ppcCTglo(QTB=c!/ZLO&hWG7&\NoYcq;PCKfFYb:l%BJl_U+/QkONE^M:s\Z]GZ#Ut!gdMmYW.R2b1%Uk+_V(Y<P,kub#/+S#)b!Y?\%H2:;SXc:#YM`G?.<XD5W#<,0Df%[]KAr#>3"1Pqr@oQPj!5UT;L;_[pU2fs-2<:_1ElYBscE.oC%e0:DujUbS,\'D)PKK0:FpF02W'mRrbXKIEVZ#dZ5'q[AlYWc!EF&[F$6/Jm,*.J$,*Nt5(_"L[1Mog64j`iO4<jJ(\p=g1M`9Tgu%;gtj#.M7i$QO-'XOLQ['G'g*-Wk6Yd/$O43m@78*G1=/p)d&f"66"'[?9JaMT2f]t?)J;M-1As`Da2s$pi@u+h)>D6q*6h62=Mb0%):XC"-`/XUs#NQ\iS@I4a-:***pA-!&H2IH'L7K_U(([=6+c)MhK_&5lTP4e,$YFR@(Oh8],1#.;7T^^9X]+JUDZts4Ma&icH'nu%;=!0Z$YI#ETm=#%54*-TOUMr9$lm(lT">6Mg.`?"C*0,31e#OD$7fd[^/QX"(DglcN8N4)TG6D>_d14Ka%;Uq(^NF^<LiK:VX@4q%/_:c+3n$V7l_2M4:8o_Vmp2DJ[/%M6\)o@PhRCK6Q2m%6g5,.>>GK5;B3`gp4=VTBXqtJ-2''3ID!5<GK*;EqM3#9)Mcs*l+d30G%n"Ymn4sZm<IoE$2?hP29hWd:`L%mK0XSBI\C$5*M:i("rUPN7[";q_GM@4q:cNm<l,(LiZT:WTi4Mo/T>-?gbO\C/$eiH'TH[L^!%MPa5RQ4o;^Ye.Q"Gj"b8IIi.RRch;L95Nkk5s%s+/<)]5=i/:>:4--Qae8>k&!?KdNgU2]#'fkn/V#u/JLF_X#[dl,$Y5W)$",I.%cU0MakP'/):eLGhKGn$D058(W/M$q5h5\:TG10Vo!cfgkkkE65r-T-=>PZ<YXu46]01aJ%WqI'e>G<=pd[@1-+&"1-!EC8e3B=k@%m$X>e,QpHm+]?>k]b27Eh?f>eG*67oI'uF1O)>lZ9dB`[gm=kHl(s&@4^3Z%#hGg'G:*EePf3\p?8rj!@PF?d,M3tO[$1)%71c.U%!R:Xc=N0Hm9E*1B(4GOLgoT#FBC?DVbM,t*-uJF&-a>^m[^*cD90<X)^1L/,E$WIiR]/Q=%`Ct-86DCTCJFW<dhB*JTT.<aniY_M%RK5glaseAker*u(QV&WCL>L]*+!O/^+2J+f);'`<&_T@kXu5`$Yi6A4!)Nb5O<oBf#Tou-F'=+l]84E.Bs`Xk>-\G]RgVGoege?G%U3ml]P/:iLD<aoBoJ)i,b5qe\o55@1B$SP'\%S2`D(YjRr((Q^.gSXpqFKau&rK6B5Km>hgcUTgmrol:8B7['odS^mKqlZ:+l^+]%9aqGMQMF<DeU9H%R]iZa?`fS^l=dB^#%7oe(_J+/+I-L3!XPN&DK#C`oijG,M&55X.BLV$;9)h91mn9NP#=$oX[qoWl\o9(?oml&%`.QQY!(_f<T7U#L,g$B@a)bH+r?@7DMe,.`OBi4L5/;u[<31gGo4T;td>C_SXd`rY^TdkrOsB9`&q6#(DOZuMO5g>LfUiH>On@-Q%,>PteYr_>?B8f0/RZ^%_Q]?pj)uMl]7*nkP]kPAd\m#6!]f&M9F=cD7)r"ri7>P9qTRPc@f%nMQ$[hfL:@a)Q6NFB^6Te^2ii:,c%hF4`sFp/2"Y>M[XRV)n+?PPBb-@=jUKIbXITW(kadinFbU?2'4F2;/gI1o.8.*2YVa?H'Kq\&+X&[18%.Vao1":po+&r,a`'agVY%p7ZV\>,c$c1M@Z?=$[ol;UaW18O\*(:V::np30s&IZRYFml^^c,Ku#J@R/jEOG\pg$pD.dMSs,TRmkQjHJlf;GU+7FL'Xrg@lV-a%CCfrR+HN>p$PT;GPs#!t$)i,;eFn)DjMIYT7iQ3F?3%H"Hl8X[_Dm\n)r&a-qjJ>EKps:H*OhQ6U#fOlUGMlT8*BauZ13-=YVc?X%dC.i3U,@\$L;J?NEab/ps):&tIWTT6(lUZcYe?9TU[hj89M7.sM7-4qp\P5)>$(cejF$S0<AAbK]:_',hccKV.fNVf3tY/1%^#>B%_A*]umj><-$S;?s$<=KHC@s>F;9(A40O#5hB^#=^QNQt,(%qj:W6ZE8WetI@4.i-*r5Dq'&(LFC4d+@AM@agdf)'Xi,/@<e@O8*H%83oif_8ep]^Tf.6QBMtn?M&M&9M'0)1oJ2&3S@U2&OSY1[.GCfSRCac)Fd;LNtiH^a,D+Y1Eq_$n7N'@/\@kW(8BIO&H_af1noB$%MYa_f"L%NWZhCC@qXI>H:^l/tT")3#U9um3U=%j0]8u$VDJ%;:qa8HdEAY)gm6790Xke8C,OXU,@"6l-F!19'Rn$T9#JgLjg`.E^%C[gp_oZDX.9^K!HqVM1Dd@O@6dbY?kI/b2(E]lbT0(14V)[q/r\I>AoSY,!d%`Eq]8T1n4%P<r2\qEojknrBLqU(>b88^;ZI-kWL%c?1`hTOGi+hCdKN]Opo@\:i@i6;@pu$a8\1Fui)S5"3G##I#GJ^$E@0!2j[VY.Y5-EA-7qpC]#73Di:2^PFfY%<Bem;@h!0gV$64%SV,]rPB4_?e6EqLk8/1kpL%2:0_)k]WFtAS()M"PEQse6`su".ZaY6]m]ftGd1l@Q9*V@c7@7'_PF/:VJZ^2bTiHZWEcKrUb;n3A%_V(GiYZREghB(h/W,"mK()t0fXq^@HT4>bHaP^4nZ#[k./p8"TYW6D5V\n!@UuGgu":n1gGXm(HA]/eTE"uU9RW7gXTeCfJ8'^aU%"du??G+Y8:WdfeNH/Ua3ZW;Pb\l^d_Cg=!^CTKcLbb:HHbK8[r[U!_=P.->AGEnA_$npdr3;?ZL`7.mU7#-glGG`C.&KjcXQ33g4%MZhmI69&_MA_hYodDYceVB:Z$&P[YI!$ABRSe$lG_JppOP(#5-02LTN%jQ*H2'nCK>Od9]OV3/Q?HB7Df.JFiQ]3i9eQi8DWpoU[%KK:DH'u@b!Q=Rit4EO$G8O(:T@edS.on.&u7o_o,qh"mp:N,X;G[40oX9tZ7*fh5>\A(8SQ.7#LrQ^EU5-EZeOifYR[Ih*NL/ke]%,U1@-(kT8%P2:`(POeIW&b=c$peAcUF\54d8YNoU-7m<&"@83oCS]8amJ`:c#\@A`&(%u)[6Y?2]ag)EoN.u-CBOD?4H8D+]dMtS%)Em>K@.g)W'8.:Db/Og2eB:S-]Ykj4=TlF2*:KHi+la*,4sg]KD+M:rB(N;U]lH[Pp%<?%*Dga'V%)W+pR9P^Jen=1Lq<$5j(^4p%:rOq$h@IQaQg7Cd7)S7FU:MgGh1p3*3Y%R58:(VO4s+Gpl*>c%XH;+a^Tr\%mWNMDfeaQ7ZAC1o&aBB;g/Uu<\,nK?e+\9I<O($*%]R7/f_MY9eI:2T2lLh*1?HglRY[mu_?JJKl=b`.Dq#u[+p*F!C+d[!^$5pup?-KZFXn-4C,VT+ooF@ir6!mBom\)O0O3`hr65"'k%n@<j"f5X)X/fNZZe<bC*%G+d_B1!!-X[@JK='h4QU;B-GbgPpiKHm`R6\RP1otG5YEJapqCo"!_M-S]?FVI9=RPt^jBK5#rXDXD?%=>sc.7!_2li@KRr6irF>9&/cG$FuY.h*0'e\/O@U`Oh,\<q0%4h"dl-q73Hj7P1E!W2mgL>iNtl&BJ1,nlL8<(4s9H$^q3[fCJ?b%lF[DMG\!;(73'0^ho-V/!^ePWOqpO)\j80I+of/pp3LbF\7fe%OE?*PUKg[J$`7e3[%?(iaSg?AXqqsD5;;l_nlfd3)WuUS)KC2;%q9.Mkei]IuG<NLP;[1YF&UhtJA$^d<il4DPnlHK)*5IV[k;b)J$:rgD3I=02!E6NQ^%K5TO`8I;Z7e+BHR^C-kj*t%74KI?3]h)R%?N'&ITC^7q*bKcL=`n\N7Dbdl":r59;5B&kBUa7V$R"i6V9h>_m;/F(3<1<*)p)Td,D2HoFoHMj%/jumfRX9Ff6soL=kNsKcr'H$%6d/FI(.\Ti:CHNS;CDa%b<nBVP51mAAN?C>\qO@Uj64J=JQ-G3N^tolqbOi%VFng;IXVFi8q;&U'5=D*XJUOW%?Ik$Z]Zc_$JB?&%qI6AA$_-JpAq>_KqL`E&F2("gO`Q)e'9"GVMU;*D"=GstM=4/X8dEWE6-H0s8*/Ti*0p"8V(U2qZBDgJ4;EpXhCF!&`-u8S3nSB/%gll3@o)-@N!SJ\Z-<d'<Ip<Cck81OSNICBfan]P\r:66Ob[!q%4!%bnZ#pQRbI+8pEkG$ue(6r%!$:D[%KJ!O8X^j@=dZ;h5V@o3%Y/X18*H'nD&0&$W?RLi>ZZ,+pMmK[=S/"qk^DAe-Si445P,A'f"c:ET3a[@:KXq*m@`m0A_mG[q(j^^AgGX<_ErH1rEA/n]FZ*H=%+7?n]LAG:/M;+87a[trR17GHEn]ZX$E=NJKn8mnX)W)'fFl)`o&h9gnAP\!g]Ha<spFj)[TQ-n[8;=];;fK&0UidQa[>Z.^PT\)e%=-_H8Zu]%q62llE]%DS.J5Ig4m;0]NO;]T4A&_!WT<@FX'@10PS<8Ks<Z-gG&\!SX->=T,(,?1mI6ZR4YpTo@O[ik\d$$M;!bk9$%!<jU@##\WXo)'m9BK<EOk=1$rPs#KD\,Q=I$@$q,#C[0e4?eK%^P;m%37nt>!9S>C$>B7##RB]n!&ijX3tsY<6;(`OX2T)>fs7In%+'\9A@`!tir/e'D9]77eS=hIJ!5@)+Y<#3X("n''dI#R3b_U:#hPq$E^@^9B==,48n'("U@0=_=Sct6Nas"lVQoL6f1[>+'2>?";%BIjYreab]QH'fmY"jD5!4NIaV,[1^Q^kmfALQ%UTr3R*X@p=/T7&J&^SfZ5!'L1GAl)c8]:e+7lL'0CH*^mWmBokUt=Xueh93dbH%G:jt.)KU9'^!-NlbEg6M':iskrp0_#4!Cla.+`T<R=2ZqJIEhb]2,N\@EbX9g;..j)7*$2#,q.2qMXQ^9G?8=TDe-rAZldeOIg;"%Dmm<PY<UWHB:9[1B@[j#Se.V&g5om@Ef<ci38ACY(TXZdYIaKMmR:mS\X'aA?C,B?i8L4uoTbhePatoCbu,:b5mOXMK/Cn)(##?-%'U\D^HJ^Ql,i:)W[?5/dAfik39d_,d[s-fP]:cu0C#mT\%EZ9-CAnWSg&+\ULp1VV^phM3+Mt/K!6[&PLu8aRSqf4KYQkZh`bQVB%4,)9MLBnb'V(E&Aam62h*g@%.qZo4Q7rZ#rXptu:11Zmj&S.[n$kL]kBn?Vk`WPmWD"#s.@tPrAWpp'^(GglOC-;!Q,/UAM5g9sd%:AeH+&+ldF;FDYjGV+RR+Yu6r?;Z\Lhn0+<W*Z*(B@R@Z!1sn^8jZVa&$T[)8j[KP#B)h=G_!+[8TITUqDAh*@P_4G8-h0hZ%/.H%>d_D#f@O<(5(+VQhZ)s.nK<CXTrL+ulhr#A0-Mm!#8Wn!Jd;&=c.1_Qn<c9D@2V1(2/sEF_D6?9ZbPuq+Kk6"oo-DB&BNf_$fOBr%-G%+9TbX19a'Ic6m&pT^!)[P=NPR1fW7K?"2$S8LckpK%$DnG&ku\=h1#`4EqW.1_"u^_qj3?Q(B?5ME7'_,,JCo_16a<'7Q</\D%7!kIlA#Omak/RRbD]+PN/KT.ab@h<%nGqtR95"`OnUOei(=O+rr.A*oJHpL,9LXVj'-8Fnb"0UeB6f@EGbFm`=(jlR_ZRsq>ce1G%$kFJmeqaV!YoOl*?U4T6"Mfg""!0^j926s;]gW#EkiB!@,RrECl(SJ*llpI<%YTn6S&kMPTLPh4AO4tjp-`gY-XV.Oc,ckC,UkbB%Ahd9lGM5qf\^"e.4hegpS*O#7qV^[-8T0!Kk<aecmqReQr?l/5I[RQ0N^tFU0P\'BYo!`-lYQoTK_(FW=0Msn'6J_,YeVrE.(0a2%Yr>(Fflpk^bjL]^Q4=4J6R:GY)V1H<Ss?aY^k2mEj97hiQ"]@>;@tFKLG+r'#oE"8^"ni4,iH=c'J/&inL5M9?GZsY7V@$s!<c4'%pWtZ'a41a&g5U]Ol82pg:D0k0d6[",:%n'"d95_iIkN#L3Qj`9iXscgbt!U%VX`r8!?_j`RRB*1[r*c$iL/rg_,LJ?:b`)gIiUTr%&H!?>ki;(HI,(X'q52SE;\;jh%e7*M:PQcD+HI%n-T_)VW,B_YjHh!2Xt4t5"VNLL-P59a#giH<?(S`"iMa#R6-pRL6EhJ`4l8W&%i-%d'[QCGM+^d/N2SQhsnWdm^,o&#liXY)GMI0-m&]-#m#kTa1-%@n_lg3Qf*gl+kj%tBal/uob\BtddKB`10d-I$\1^f)>](Lb4%*sf,Wr/NFpq*7'Vht)OW+,IB!J&)qYaT?KNK(E%'9?(G@GG?;j`'E;G&b`3ER0Z8787d9;At$Z<Ef98]J[qVeHf+=k9<-2=GFppg%P,05J5X[3Q@##+P]7Be`5Vbd.U4a%.V#lO%X?mFp=F*st=(Mr`h5]%'lD6>erK,$Z<A!]ThUmY(."X:6`$m]ncp&brF>pk\qeg0[%162PD+WR4s].o7*psLQ+3?`<dKp%`&O:XTn]f>j'+"7bV1Y7X0hXWLaE?u&;^]ijSKoJ@;8'rFk.j-(taObBiXVc@Y-ACKsT<)!!%>iQA28^<<UO6EkKPoY$u,^LAg?k9Ff/oL\W1]m*kKd$-qJl_!?rptq"jRWMV:C3^d,5kVk<-F=CPsk3PI7ubr^Cl=tpQLM?0tYn\%b_:du`R<s-o6M7E#RV2r[^2p&pTemB=MHM,1nGcXGGr6q"9-U+6Z51)kD,qFJ-hjIZ3W;3"\bLVTkQ,e!i^*EBS$eeK=QMhc`s3c%E&_t@:$06U3M.-dH6G"?!FJ`I]7^\UJ]o>BmAb3L"Z4I-9R>U^*7-MI0M-l-,J/`.o=H^;]&_d[gr+$)7dCqK1t!]RCM+3q[&-_m%qV9+N<Wo3*YJXL-86Y\i:PcL`Kk0)JRK0gtLu65@i-RXR1eIaGm:*ng4odSM#u6RN*^^ItRoo^-qgN&u]fdFV0d*I4f#d(re=FC7%l4lQ:4'^X*KeaY!QBd=DKd=rU76l-H!LI<8E.T#m.7T:pUFP3F'r4Oc+A!m\$$hU5>;,%!-3)G;"`7hC(!J-=V,gJi@<#6H4hfIY%OCQh.G:T&1rBEO;n+r0!/+=cnZ"u^K%c6$M3K&EZcNIC@pk5Np!g`qr4MG/&/odg2Y\f?-rNfci0F_^o.,=!>O-ArUUIc@\3B1,%%#U.Yg6_'R9ChOVP223W];XE5`6E[X]icdaOqg0S6Q%t.?'h1hUO&<j9'2%_E8ei_aK1;1DNm>u?O]aG+g=W"0[C6t$il6JaK4Ju)%!X4CY!?d\_L]=^SbR4s2C2F=i5eH*onF3?h_ab4MPq2K10-Q'u]UCjrD/jeSk[NZSYr"T$(_S3H=;i6b$mS>)J2!-\eA6d1J=32W%q7EhWpg?M3T+"fC?1V%+dN;HtVjp1;k;Qu2=:>6rJ-Y?0(e"8iKE5Ks$r"/',rpXS:@@:;<:T_lW@GZGW'XtO\Ps<7#.CO"'gaW-%<TR9p<A9Jrg[47E7uJXmChr`T;m-gokI:.@qe+ndV(FYGC4?cbCt"-6(+m3lBIpn6Qcb\$4!S4+3&DVMkME8H$bG!B8#uubYuu2F%,@[jZQe*bs'[uIHBTEr:e@7BJmm!;3.'CUU4ZLhTbX!>67U2?9h=?CeB])BHbqGA3*';7L\d,QUga'`2g+;l,p8j_u.i#WtlX*R?%0[jF%phqVs=Cr\!(e^hOYd@:/7^oa>l!6Ph5]6l91'>8b6S-jWo*1V6q8@bSWF129'e0r\JXOa?nQAKomI*^]Nh&?mQPp4F#XYoA%1$@-HcS#)iTRK$=Z&8g!V>7q9p&mmuhE`JmU4C6]-pj(8R&X,pNh5GqA-`;fd8%5k+<8qH,Vrt=&J=0XYSq&fRK^N^b>mjA$lQi6%p07BHfnn1m)5`:'IrTnR2);*cN&`ePl^<Hh!A=@0S-iqN>Jq02A%cuh:cd?9a_Y-u280(AI6(R<%,:[Mf',Vll03^"pJ=0'TLbGI%9W2uX5^S+/a\5f@)UR1KQ_L%+Rj'k(>f.<C/;=7Lcd6uho<MtJA]@ZTN1WQUWFFtg=XMsq`k_Ul\pI7t@bYgt]42kuj87q[GJ$K"%=PR[(o>dl*<N0[EkkTL#Va^AlHn;UCe@6<]!<oK+X=hQD$l"NZC6^f^Af7aR[_u@frNk@fTK<5)\Bu\^N9Xr1`,D$4(3jTS>6&c,%nfb^g^g.gIgZ(&T8+!+I79gL7[rH"prekKd)>8&^GIN_@%iuu'"V9nCK1IkX&A063@qH6qBAK);5P]23,=OAt2aE+sHUD_RCN$-m%O)Y%Ep]Cl&iE0<)+$@0Gpu+[rJY)VQ=7R2*/9dZNh[siPrtK]XYHD]uGI1R9A%ZK:9kp#VhM"u*i1^3AjP32gE:3o8<q<R!Yjafg%BShpYCoKB)J&Lmd%$/a$'F`e8(k,u1Wq"6*d-EXrVp6>sLFF-9$X.`@YF66bPifq_gu^=Ci;AqtTWMqeHIfI=?W%('lYtb*.mBd_%!=,7[O[=):7aCNW"VPeC)ncPUP83^X^O^a':602/C&*4%>a+%=mOlUmODe-;8NfWE+3Alc5Dq4+T^pb50rX[d"6>En@DciA!M=LE%K+4kI#/%_'@)H`@JXd/aSa1YC4YfDGO9+c9"5bWB%INnQ?Tl,18Tlm4"1'H0QlU%+iPlHI5__R)7.qd],,rV;?&/tR7*#p!YssJP%07`,=ah7a1)kmf[U(UYppB@ht<6>&Jr^u9!\pSV2*Z;>sC_i0Pg`hBk[uAhp()aKlf7g")\&^h?T'`?Y@0pHUoX^FM7>8o-"/#Va%.qrq%7<*$sKInt7@V!jK^)=.`Dm+m?]&CHcZiM&k,!ASWj^Cri7Y^KY&53ggNj-RHL^aZ`8P8PD]`1t!gY%cE5;L%.s"/YN+Tpf>%rK]X`O9)XHInQDAaKTdA\6j?/$o8d#)E*B];F;`3)d$6*FFaiVXo(cmSEI@ePo(B(Ji1T'4"%"9YC_iZY2n,E/^"n(%]?NsE-NCg%3t,LQ_6\Hb^%(+5@V`:M(D;O;2R;LZ2I<G'QPLR,/gFg?>3^ZDcE9cUN5=2T.rnYH=b=Ml^[a=B$jan&6^9?U!n,#:6^9?U!cYF_%/C5'8('fPTT7MSKB>dq\#l/*u6$M":(oiQ'Ec,uCc4gR)&b/NWkV,h`^%/YXd:&]`DU!-i-i^"NMDj7O+n(]S2#Td!K!B9Y_-+$f%<JkM#5]\#B1-Of3"XC^QG2\tg4RlaB?gind<6\p#Eh=3HcK('<Y\/8s#*-1jV/p`X8RXaX^aDnWdQ'A44UEnDDk3Z@glpG0GJA*W%%WbDYX2==qUVklN/:%ltHq<J!(3EBi]7.T]%N9@/XR<gi?O0ra/;h3+a:[c;*-3"e#ZhJtjkT)h`lp`*=L[a1;%#1(UVjKl,ufqQ%K[8'M7#TOcG=s;s(puKY*1jR:"iK`i8[u*!6/V?GoL9`ol5H7p#kPH`T]]34`b8L.\J5bn'G:g5YnAeMiW#td^MHnh'G=YQ'gfaU%XU:bpM,cjVD2!CY8Lam=0:"Ulk9%)]XRn3;!DscN$>1h8<6h7GK4%G;HC'KqjS6uIo^5Db!m!]!plQ;b4fKO`2o'(BM[:7(>]Nu\%[:j-K7[$b.<oK].J-'-LY8S*/."G=V<t,KR'\!d+J'Xe'=aLq6*C=X0JR=Z\//Z^g1U8IbXt5<6LD@-OH2gs9W3_/Vd?*s;l(HNN%_d3E(%Vc+R`:C-t(Rr-X%A0@Dk5o&p"^X4/,+g#BR27ek_Qe>a&3btXJ=/5b(J77Y/gOA/2NUhaHoeCSAPg1*Joe#F.tb\B6AEXP%V>=RD?*#UNRAg]<hs\NJ1\JTEqn:WpVEU(ik`s1P,>g8,bL?dq.5WXkLfuKCWB^G2`t9\o%IE;+5JYbRm,.i>fOq'Fi98!aMLB+%%".>K9@\:-EK"+u7/L#pM0B06\Y?](."=PN!2'Wie7_XI-l5#kM:N[$s+r\L!Q=BZe--RLLkFVj%lh%Q]?Dskk#*86I@\4MnTH/;n%s7H8V9aduIig3@IT&2`+Q_)b'CU)1o):VSAH#0u&pD,Y=gk]ApA:Uq`C^R%nb;/p]s'L%@6tAQ(hq[?l\j-J@E\eg?=@ahu8H-ac%O#4)Z"iCP%%$ac@q++-'^&>3(#.VGF-7e7Kh5gVp!+C96U)4ND"ndc!?a)1chBoEt%D(Tt(ISJS`I?cb:'385\;QUoc=oNJC/nBh%iLHdd5fPR7eF8p^T-"s#qo.L\Loo0gOc&*u:+R4,K(C2hM,7JWC2f(>L(*K1V$=EM!<*dl%>KN)$rV`M?HO>2>Be-<=_'M28$S<O%a5@ge^!SYVh1#iGH&>(jTp!VE%XcFN/<7PfKa\I%eb2m.cPo"A/pTgnYNX$KI18@]^k04Sn#G5`.eMj4Hk+H\S?'[0bMIHG=-5%<%5(VPkFX'.89iYbiOG(86pnfc\]PE.M#5YrQs3.fFX;./bZmCC4pUTJBiL=cRThDr&ZI2-q=g?tah_qW3cgP[M(Up!>b^WpQ-aD4m%r?i-%RrX3tFkOGYb%eYa>B46qbW;5'\B]u'X+L*Fn=16&5E67Hdj>^ue0u/7glnoLHf%U(Y5BtPjR)<0=O7jKGEjB6goR'e77E!T%g=_PVp/sKMG^U*<V\g/8;;1K^:,A\hD*e'acM\+<L`eK3nJ.itMuMH/YXJIQ:"^:b;s7S(Ot,7_(1^5LnqSaqJ7be]iaJ6>o9Z%s%=e`lZ_ogj3ojcT"dTr3YD+LZ9&=f$ZjjU,cDKGa<01ZC$c.f.GY*lcrLO1%SBsf\qa3;E+ft6pH+n+WQ-';0WT)RmK_?&;Gr=7"c%M_-ut-BkYo&@7p.c0S.T;+/*47r&R(Z$+g.nUK,]htZBSlAkoCcLUp@md39"ATR#)gQ%Y0"nqCWr&S?A=(DOsD;s.be%UiQUS"(O%FiLelaDQ;tig2`V&L1g7>s!,!3.>^j>*!$=IVj-;S`f5-`7oC*_p/o;9]q8f[r2n*St"#hR9\?^*_5EC3m>b.D>DND[uR0RS66F!%HZs08SL8$+FIr4NWq0afcZ@Q\NjWcuJSCk)+3nI_E^`Kh/%Y6Eq/]!.aSiZaJ(@lP.3/'WSg"9@iKd_L.oZHeE^a@3amVhEa2'&K%]BWI+N[a$NcY)AFKO27=ekZ$/B)/`>?/43SORi3O['eKBXba?SS[c=]1lm$]E#WlY)u+/hmO[p-=\7K`%hHCuT.D%p'm#,1;`*K"%:?BQ=MBbuiOm!L=GbB6M/HPCtiaG_HXi3Xh.XHuhL`#!FY';AVbaNs0l1:,(=Rcr<fpn15ij@]R&Dluib9_X:4CDI/.3Q4]@;:=;%kY>>P494gO+7-hh*g9)!dnKP]gS-C7hIkh=Qe8=&ja;)S,`LVC3N7CB@`0Q*l,uKmjj-:YCa`B2%AJ*7TgQA:DNM-N5e22Y&4L^O%4[JEK*8U5LJ9&p/l_\.7m3l"D20(YE56\%7j#_C?Q"gj="8IhE7kKgRV?tM*kp)<Y&L>-9in00t?Mu`Gcj<;d8E\2\3me$bq;!%H%gV7!Z1]?E]4dnRkgUqsGP-o'.oOk7Rn'C1bb.E;fBJBp-V0W1r.l'5aZG'SsIWeR,YJ4Rj#i[MTUTs_d^=[E^Q@I_75C^0Uc=9iC%Us_jRV,>Wb'Luk::c/e)AuJ2<?kUZOo8Y_?Oj;r,SN]YU3F<?k$pLN`F0ebmb<%a)<iRcMV5H0ZNKm+aYT'mJgSW.\o>J?m%bCs7%bq0"^]e,sdVq>?9L4uKfj[WEdm*<RGbB!W1g)NLsF[jJl%_q,RRsV&U2c(S8OZh)_L<'i]@Y.fEq]iEp)Tg@1c^g]dG4O9@lXLU+%YUAM`bEH5RJ9%2f2IdJWD\Ck)s2IA]J8:l@@r4<#6B$*Fm(M2hf%:!_qd!P2?l5Q?ff:N`DM$=!cPn:^>^[F)/TT^'&*:CYZQWKa%X3hL*d"YB`kQhK.BLB-Yn^1p-2Yf"=:'gYBnp>hg`q,hAME"4&[<PVDh<k/P9jXuV!jN*1Wht(`Tb+K[_^(lmO:FV>r3I]&*0CI+%ZQ*k=h"[',Y'Ha&4WrMrDkFgQfphGj83nM1dquahg-4)q&9ALSlro53F6?+#3JC:#R9ZM0/W>ZC9<8^4Xf<6`F=kFGncQhI3EW9C%qlEc,`AXo^@:ILJIJK<dRG>INCLqLA6=F\>FBN(4:l)jU+`l!%dm8f#Eem>8>&tW5j"=cCDQO"qERhf$HQ6qI#M3HLq<ZRAqeC"l%[k/JD;ni6Fh+\q)]D0?F^rTSF-9o9@Me83srXMSW!9_73V+U:#Dl/E&o14VG/u)&SUL`SmBoNOL"WihhVM`?okHcTGhoA?S.SM/A%@#cWDh/+XQ_E&+\p$\%PnL^M/'r,;1BW.&iMK(JY/q)DlqrR"$f$KTh4#_[k>9+t,TE4EUe`W!3p*9_jk1$]qDu%kY.DO][L0?>t%62>TrN07Td("g-'Q@gI#&WXJcYhY75N0o-m'bq`4!=^>B$Y_gN/k_`%4tBXV(-@6$E0QWf.iGdfNN]sRS\s!LA/Kh@(kI/[C4/J1%Z5b,-`kG)](uScb8qt<#S'ljnmR[UoTinTQhq_Z:L=WU-o]]@`c8L\TL3_tk>AM8OL4943c-e2k/k-h\Uh$-A1!3=(Zn+ZdWha/r%I!m4I<S!bu[VTpGYUA52Oo_HngN4e[\\K9Qm#8m)d&k,I.[JgT\;PF4g`E4H+N$rcK>JcJ#A=PSW,KC)88Dm1L7L?2+nFQ!D1H/!%OLI@,H+c3NH_MIc3)2A*0&Bhuo#K>VoW,NlitjYsKCS4#rpKRJWg?Z[pSZ&VFp!MA(]Sf?FHJ^C^,8U!AMu]E6M[;Nj@?7^S[Ur]%T_d`%]VFYj:d1gAH0pAIY!RE)3dM9I_k5+jl&U^dbrtjL<o*?PiukB^]OpkDhR\HRnso?^K9_FgZS_o78&+0S+0R3t?spPiAPm!m%m!^Na-I(<DGIsab.6>M?0W0<A^d)NPMDNj]K6qtFiH"ruRfDpQ?r?M[QN,&[Bnj[iV1Yu0paB\ems^;M*/%:L*%2D#\6$\_O&oPG%s'g%K,IapL>=]L1^*1@)E</oH\3jU:=LD[Hc+[D_/'%s@bE[;G=3TDL03g"io'55$'t80:X'dKhWrEbnp;^BL[GM05hh$-c5$-C)%BB*b_o*;=,,T.:;Yqt^$>?LjhYBbjmbaZB8YL\6[@>7:$nFM]sTDtG?&`PFu3C$WJ&$ci,o(I6$N)TR1oCFQRpknIf;WF:`VV/Mi%1>h6WLTW<iP46OAq"_ZP4>M2)fhVRT^.M-?PQdDaqg!Tao>N1V2`<V=hHqq=UZI@]&M%gP?>dWV]AV>s:2-pk.Xu0tiX,c1Z*Tdh%DRml[XWX80IS]=#(Rkj]cG.$WhjkjOOV()Q^-`q])]<XnVTKf"&,J[snA)LZ6=ok.Y:l8%0CSA$Rm6A;a9X'.YiS0.N!tt9n(/(5%Gp$b7Q3aEqY^rGQVWdcn[QJMqN*%3XlS)7pA)tICC\GL1??7'0B7'1Lq(I*(pQpuq[Ia>J=[V2\\2t[UJ@CIe*qGqpNBUGcOJD][%L5;<^UHDB?@eN2!60,l*K,$'km%7,ri*/sS+e2%DFSP]%`i$psH1^W/%70'ke/f5YiKKY@es-JHG,=C-gZo+9a3"KGHgqInJ%^7(%V(WFVTD\p*'pmO,,7h@_d8O0VpO:WS(iaC&OU('Pc/F\doll;I*3KgNlH=hG<t:N]HZ89bo&/lB3PJ!)HuEk^ZcN<h/-]eo^O8.7%*r$cFlW,..&LIJ*`u?nNDK$PM;nHZ1dFLqMj;ahRI6C[jDnbXG"kCR!%#Ac82ZFi^f1X3S&/>;8S_rPir/N>RD\_Var:1)Nk%ImS%LVO>gC3HSqL\8>3Re#bs+4d&;AQ+Sl,sEjljVr:$47;q,0+4Obd;1U+kYWECMe8dD5<XqeaY`p;7FkF?rAu'(_2_';Klouq5On#X%M'W#g_i.rT]NDb"mI53YVJ5_d]9%SK>SYNMWUD>Df@Sn3S%&,&[uViWK,8Ei"If(a,\Tl!KE4q"#t_`GX]r'Uiu=t%&TP&f\.O$Z%6GjDoc;EBCog)Qj9+0UJ^Xc%>Zg`9XFJs!5P=OP#kU?g$-G;4H&\>6oSrtcb"UXe@p;?36oBP:4=%t*f>J%Z:2HFEobYij8iQ]Q2%dVV`B\9CnDR'^Ds(<Q%lq]Dm6q;Uf-@2%q+9HH63Aktu8S+nTniJ^B\7MF'7Rs>nuU#kZ%7SUD$HgRp,;=[r?k3b3TD,#?3RW>_T%+=)G3qP_E[Ik!>7N(O-h5u4[2Hs`us6nYGaBRIRm-9+*YoYm+%LgTTEe-+\TY9Q\M7E!D<S]fi]D$QnRf3eCPH%eil,YY<e]Y3l^%eNKPq)c8'oc*qpCMt8nciQ_/a?M/\nAo_HmI!5M[h=9ak5AuW-F)CLHkM%NY?f!APrNc@uNV+[2:OXAi+p,<Ebd$oCJ(t@.0Jkh:%nrW0c2%g%;8Y`<[eOU8&Iend-\^HKiMk8>[r,Ut<cU:aP6h>Bt$fBG%E%55nr0+9IjA+l#h1!9U:TR%[`,D["_J`X/aWd!s[oY&/%l+r!6>314ncJ^)oM>+dO%\"0,@A<rsMU?[FPtUhR-uuZI9M;Y#EURh,1:fP&0mh!1Q!<t4_4A3Co$tjP1#)0;)_od?B$qD>D8O?\%4&[o?V+it$'=RihC)8O1IU`6spZ1YYJk1fVJ,H,^n#hQ9r8B,>l,\+RiC,<Y(J1)&R^c701S6lK072KfrCNV46s=E>0(u5=\;f1>%fBg\q0BO\;H35"e(#U]N;'mfs`++o`>On9$9t3A7F4#.2e==.@a`#Cl8>:`R!(71cG5VfseDKX6K7dhLKN\pbbsRN1-+S>*>NKB^%WiQ04q_d.'q9@.OFHo)g1d:/J-H7B#(4EnQOkng&e&[X5XrPg7hlY_jPlcD7k%T,A%ZBP2,=noM-o`jiCMY++CY1Ttgm(Bl==<.5%@(I'8Ata5D*1"fG*7hXQ`#ah)NO`DE^&tD#fj3I"6aUCBIMlufFBTOlj"-goE+0m,1$bY3*MBrnFmJe%-J=XjgqNL`3U^MAXo<KL%-Aok;jemama<EZjF[8F3/NN@qs)^$HM`8WA3S6(<Y=rI^d<E%S`ndU7Q#2Y?if[r28(-&:48QHUI484AT;92#GQf3nlZQn?ch7;]%-42NlhOM6lq>"Fgfuj4oZaDi8q!9o"lfu\AZbeq'er3>EK>e9X'"RVu[f"M.gT#^O[SM'cP45Wg](<tENQ58<hNK:A[oR^1?hUq.%Mb?k,g"n=FqpO6`'1jkBo.j4l$QpW_8tni#CM[Iu,^L`LkZLJYm1A'VNt9ffG#cdTE=0nSnU^/>?c<MBg58_FafA&o;B'`QoqYO<%dsFgif<Nb<m!PCj=2k%,.ATlM"$^Spr`[)%=#W'V$n>8/l`L([#j?2f*#0jZ`a<QtW]HiMr97;\a^&G+];Sgr/_3&D3>EnsO+Ye`%RE+h*)muol>:&judFAZ9K!1>-7K"pf41tFfae"ta0KY.@S)!hH.e<)bG#FiJ+gKs#.?a/M^%pRCL(1EPVVX.A?[":WJgM>IjD+eq%jJ`KV*!beQp>R]FnQtUNlW;,F%P"Z(7^I#P7CM7#^,osQp\POmriS6O90[^i3-'HdSCt/ejLgO1K+m5cLq?\b0\FHQI(jB/AI_M0%<rIBbO^J%YFo+8[aB)p]gKUVlId-,`4u`fI.*(5-C&?r4DU#@^Qou=<o^^9o4PXilrYf#-c^4XZAg,m`VJ!\Y&Qq(tOg8Wtik!cO%pTHlk/]s7SZ%#s"*f:3,!Y2^9g7W!2+1sbSkNsF4mJ4]<m!8//nilCKd&CkYeD@DkfBt7JiaHY4fQPjhn^+:u3iiV8!:b"`Dbh&Y%-]*UK+-06Kp81R&"0A:D+N/quo-olKO.%8_di1G>0=1E:ermf?r/\Gu*f2@eGrp#%?LmO;cDM\tG3SDR+:0k%iW;8E%HB*YB8q7c%qkbID>GalfT9LIBDR[jB`$l>[cL$op7aQ'!aF,9r0!Y$hmg$j::@\N`0E:_(bF/=Eo%OY+LthR5IBb?Tc(A4qamR<`LR\"fgpm7-%N$Sq6"C!Fmp,!UH^!f3T/;rADFmo:J]s`]sHg`?&9-M<qdNYc^ZDVk2LO$V?%CF7&!4hYb;!7f.62mY)qgUl%p\`OJ?A%OUkC$em%!2coo'&YO>$2Jc_'ka`ArnY<Bs1pbb%ur!r?Rk.?hHD)3Y?^A=ml$D[k0;)O"^k&J'u7QJ(O(1YIu7.i9R9o$"E9IG9Y=V;3fdeg%*^]NFnt*+CdFf1mA<:^IR6AsCYo9/rd7=IRV@8BWUFR3cGdMp:_,Ju"7qoZ6AiE.5^;$@Z[>i)'2+/:a2dta_R42bU*:&12_qpbt%ZhIONc0Mj/^RDs[[0-]<"+?r5^]7<-4(E+h@+#X$%QX7TomG'uW2%'3J?#`F@$*Gn=2)CNop7kWIt/C/E_ik1i\^W!fOq<5E"Z[U%ZTDY1,7a.iL7m*Vb2=mhLj%!O,f*d?&?19?Bs!1j"lT:),TUe69'i,%MNH`hd3NY64BunG#8^7JQlC$q=;[c/:os=TYqQlcE2@//%3,OM7^L#0;e9><UjJY31gLU#c41!"!m9T?>``iggF7GS9a1E,Pq:=6eLm1Rkc2J&DQ_L`MO>Uu<hrAuENrq.9k^/h+4)Y/^2G@-&%AMhrn)u7A[L_3X2D]iYoSG/^YGAi)4M=KNBE2oCTI!=\20NJ&%[XCc\[bSmgMd'f^ldHm:D$-5TeQfk80q?:ld)1j(aL+9oieXVH%f<sG4^tWp[qWF/[iU-K6/+2*,e4pE>]NeW[P:KR937pN=Km1/-Rp(ZJE-W*PABd9pq"&'l.<MJ8?A.0&i;'iHIBk&@Y2'lDiTVs>%Y%I.rel@hUk5)>V3MXlH^&.bk!G?nlH#A6[_q;o3o@sOA"u>HP2:$-$AE\8bc3CY+FgHD"A/N7)=3H>"&)E)*_98MaD0>=5TAKXQ%+'6;Jm!3K$,_PrW^F.@p/<YQ(h8dVAo3qK+aT*VQ9So&)oqR\d_qK@F@:/EWHIfrnp*UkAb^pZMEWH!"iTo=#U2d7TLE.C`]^jo%%a`,b10T$:k,?;oWOo]oo'lXj)YUPq%Cg+`U,fBMWCM0f0NaMYs-%dV`q_(uYDAW>ig?@]-8=W"%N(ogFCT+tmS1GQ5o>PH3,fA_<%ef*boL;dBg^V@IfkVaeq]JrYA'W@G4-?&n4oHf,<Djt-1gh7tN^RS$aQXSV^NF[S43mtAob(HrrVnGq_aQei1SnKB:;oNR'D#!2d%qO&YI5HhCOg@j_gSTJh7Ll2,^lYJPDJNEfZ6^<lE9r@EAm>:Lmfg[`q\#1SmJpHs1A^O4Yqf5YOQnhl'q=1e$,f?F3$+BtV@+?,s%CEU`R2dc#+`_s!^L]6U\h]D]o1G[rN,Fnu51Y*Em^Q2Hs=(e<k$?5RTG+3c`\oc+i*`RJ2XYY"+[$&ng)*'@R<b+++ar>P?SpTV%%-g&\J[m_J8BaHm_V>U2h6GoR.p28V2^Gc,c<i=r&S8H1p3T&r!D/ecGdjjV::EOK4)6(1)a^3kV.8cTI^Mnd+iD`[s0;%-n6;shj%M\5IB1n'#08gEBDBf(OKM:(kW1n$bUh(]<Z*P?K6OJX/dEXH)<IQcGn,(;oTm;"S_Mo@SZp6V@8\N38[BH^?1cD*0LcXQ*#3fU"e%4H"-Ua?TLk@D"<;m**>_;N!X.m?OdWp[%PeWs!!qBR*:5+.q8O;t,)H=jJZ@Sc4!UH0I@,]\fFZH*rV7q:gF&>I4';pF>aPD]Hrq%1[=8%O+*aprr]9fQLj9*6'k+39Pl)L&u4DLTXg-X@U/7a%g>,OlD:sSNZY;IaK_AnRK$bDXLO7>%^+73f2`QH-adQh]CDFXC-j++%]t]N]e/b?GKs$TsrPYa4bG'ml;Z<V$qS/DmHPk:+bB&b\Q$k%o1t_4S]mf)9MOjS9iXP&?r?lW-rsPinp1/eGm@\kOSdUYhYHK+E%Hlm'l);n'?U4ljeI=c#)qI2mXNJeqRH^*3S($I>p-X<NbaMGqF$Hf]Sn39seoG]XpIs;_-/ZP/'r>LCIk>aKFUTc*`Y$Tnj0AjJ"%po\?Qs%ZmS;,f49P5+bt6Zm2DO%1jH&^>D\al$5ZB2M'uf^DB9ZI%*bm`%3aV$E'"J6']f2Umn`"RGf>HTni?I_TD19(gVKGQ(,*%df4j_V.ID.iHJ9T/W\I2lq.HnEk9AFbo8h&mbq2"4\dd14'"$5jTq9(:GPU<X\/m4-2e3j<Ib<fYp?LSU!gEQ+Tp`^)#qGur!P"_%7th!n3FAlAR>%QZo6*V7abU:jB"R11:[cAMHI"2XRcmt$%X+oD.(`JL."L=f#i0-KB'AS^s!"&k=t#o,VtUllU!)ZW&ILYt"ruG,%lZVFH;V>%eEk=.)Bu`r^?J@QuP^)fmiNd`U@sf6#cE\r<]R.(K[0Op@^G`sGV6t5h:uP<e1P*E>GK-PIs4S<^EEfL(e*jVkcuf8e%ogpfSPWQ4$]RG@7q-`U0hWi=_kI4OT^J8Vshgb4dr+N$cpLL%`F2#8[hX;P8bF[V^c'N$B)-f^RB0ROrnXdiZX^<'-.a9XL@R7K&%SQ^BRd<sZblc7TueO3i:`.Hgg=!>WHgljBEBA;7RR9X??71P$"3"KK>*P!9\DX#i(&dLHO5(UMg!*M*S#YeT32/hkXPDL6bfOZa(%ZdNGsn=OWA_\lRrks`3?2k+T+Kq.3U1>A?D]0aH[Q(;O&a4;#BEE%7GAM0_:k:`q\[7ZgL,S)1pae&ej:9Z?%.2O@fUf]S7G#@ks%J][3M57$!]&ZIE.CZi$*>=&+RAs27e8;>f@k([6m!!m+Q0)t,!;@GE9r>#7qK5)-KI0V\IHOQJt7HW^\>ANd]LDrbY3u@A@-)D:e%h+K-eGE,B+@dk?qJ*5J&+9p/#o63YtmtcfE1s0m.9$6<gnIdA:Pa.KZ_r$<AHn*#]5DOuW8'b1*a3i&h_rU8K_E]skB5-qSFEO*^%o65e+qC%!ZEVuBBaTPr)*6d<NG`DWlgUQG_HMj>L-S(=tbQ9cgQH8";j6oBa6h5HX!uYJArVW2m#<T$"d$Jq]&^3)Cj\V..s*q2e%:3NFS:lVdaG[^t=6ZT.'\sFBdRf'c44$.G-]pCH[1E6l`3OG+k>3@4@.lh]d:r^#HbON]JgTP5E`pW2Q2OpIF$FT#aBqmGpdtSi<%BG[-!3<Kn^].46))U'unP6&_;Kc2::]sMc@F8q0"_4ohOD=Qt-05V\Ulq@Psh^'>t%([,ap<o;t\K;5ZULg+p[WqQo"4ae0?dHq]%L#3q[TX$AgRk9-Sq:c.eXG3*(hNH!YTp.O3GYlDgD[;0jM$NW\qFIc&J(iUJi%kb8W]])Aj%OG4X2Jp)R'n[JkO%Yk`sU[#10OG=%pL$du!E\^(T>>R3\Y9U`jGNqLjGJfu]l\;Ga%<h9o':0f`5<tlr@cip\LCMGI<??rXW+K0%Sh1r*#!f^dJ]cZrqZ>s5kno3m#U[^%QC"#_1Ol6LC/;!16J(np9o^+4o-JWODr.Gt@QE$]4ptZ>U,ukUH[kqW+jr;U!,_8l_NB10\lBR*AGS;jeOFDd1,!7seC:Lc5gT>?%Q.)XAXjf?$=a;NE/dhL:QaM4&cHrt*7po:if8.%9)AV$M=I5-g(&V=f)*'KkjgT>dabbLFjS]KjKD`<!<,B>HZAM=&p`+`im-+r"%(`KAN;<M'jbG[ClL'fem#&4Spdni4)>GT'ABfdsaf8aF/"*_>Ho.>$3rR:FLBkR:+hN85CN%eK_e&8MS5rI<B0\WtA"][I>_ObEd%6d2YREM9)2&_[nXA/LdQ*M[Hr)'E>lb(e"oF&Co*4ir5qaMb/r?%6^(fSm8fFm95-a$uIDg9<CE3DK,o[7#Ma3fLM*f22bJr[L\6%&N_+])Wo"NS,KYW-B!Sl>X?K]/\cJn(#tRS@^L"O0K/GQKZ5]da)ra?du"uQ6R[D"Qr_-J)e*VmaB$6pHnbMbdp!F1-Qeq2Mi+E1%X9aR!\lOL!oO)OfDQgf=^JIb=EgVeAK7lQ%GB)c(Y`n[p@U-#'>1a/3(AR!QYOV?bpS,E;VuKr9qu4*OS84fWgP`l@Zp`'-47g4:%$nJSDg!Et3ha2H,k?@XEK"A4D&Z:I`.&>(OdCL)3ACi58$S!``5W85h4[#BkWpT0kkZX'TpLpLsR^_Snf4>oX?c+d-5m>O[3Iutb%=J;CrfEfqo'=)CuA2D75"]gie(.DM91;&!Y#XXC$%@R9iX5=);*,q;uGL(Fc?C*!Gi-9MHB`='\V3NdP0:H.nhP=M"cZ[$=g[3lO%(]MkFju*JkY,ek5<__G:+ar'-75<oOjGJh*Gkh2:,8p+h)\UiJO8?pbUS.aln*94f/\k;Kc,ai%$'G<oBl@mEC\1l&+<-%[)*6<R%7Rfb1nmB[;?9'SahVBj*8;=l73Pn&9!XH?nP78oD/*D<UiV!S@_-M(H7'$fY$lRN<h:25mgQW,/$[T`J<"7^TbiG%eO:6uND6u-!%>m@<+d886B2bI7X^:mZMFF_rHn`Q<SW8tE[6P]RA"1DnTXl45930N6M6cGSV?YENbl,a,4*]F:;%3VU]%2@:RM3=S%'<_nt.2`[7%l,nbH="eL6Z^mS`cl,APMt:g^CH/G,LiK]IKdnMh:bcUYTh7q3L)"YqTup+Mq5j;.NDCLkO:49F]Ts!c534/+%?o-W[Pgl2)1$3=%5-6C_6a)g#n7c_g)3.bq9X8*h7'.W!ZZp8"Yg+raGNOC)]<KjW#%[u)9tI[cG'@r!f'rCUJUI7hQg<NT)%bmIQ9FbHI!2]>1d8VO%p[\+Gr2$;NM>PBjG`G_e[Vh/PQ8?jK+0mafrV5r#9rs_2Ht<J2fH6^BEpNJ!1R9:N76ts/([!;?IYra<)G<+m8b.mdW%2PPcYrVe%I.J>,b6R&r:Sc&LHFd^tT74=:AgN*29:gsepam<L:70k@7EVEO]DldCLe.>%>I-,Xeu^D@^ONo%N#EL.:Z8dQR6)]S.LfqcNg1P[%VEfgTD"B.5Q-:e+nOt9Aq6HXfB/`?'#Op@@7C#K=4G82aZ-`9rK*>k8+?sBCW$qi0`)"T&PpS`'&jtA(ReG:N0.Wd#bjL&BY#J`?%eN_nCqb&kdmYcb3[>NU,+b*UnbhIi(<DD2'i=T/DQhq#'G%Y]4!Mt?K6mfTZ=%hJs!M]J9bGAu3F-_44Po"=WGi[Bki:(rj'HUB^%;qGK(-GBl4:g3g7FZM8bjWXl;+#&e%V7E)_k0o%'Gf"@3q%/U\CaAakkOhME1XTAaHAfr_r\UMs-)qUm0(oB5V>O+lS<]/jI/M<X%)jRVNl@2"nnqJ@RZG3oZpfuuJ<rZIC6?Bh':t[&=lT\(Ns0+]WZMqa8q[`GglhV-5m6A6fHJ<b(C&Mc>ipQ:"%lYm3V074cV\f$4%kuQj3VfQuIg<J=E+$M8!7XL>%Bp=SP9gc\t(g)oBIa`#g0:u"hIG^ID-8.SdSDu\*Wn>:T<-;hKS%L6%dE<PmY?*VG"$+#8M[s:+%Y9"e<(u0PH2*HHLhHrfgrFI><rY5h6`,p)op\s$fk"IZ.1gL5Y-p?B>V\&^rVsSJ#Iq-C/7e@=m\(A0l=8CJFq_%m6T7a&AqJ8oa%Le8i]:bUItBrs.c8We$t>i?4T7',q^:8MfImo+$H#AlLKCM$XGZKAKs[14ERr7C&F@1c1'Pt(HJ^_LTe!6Ofqj'4][/)sFbH!6i0%O`P_n7V(*0mee.;^Cp0\C&X0]KkUl;_FKV3E8hCYMs2:?#U90Wo8Vf_iNnqZ%[6Q:5Dc%bje_2ujQjD3E"(n6SA=r[]u?%%I^*fb%rpi*f`TstWCMgQ4r\!9[H\^t+RoB"S9r_<2dQ9\mhrV+>q<C;7AcBREh1+:rq0_N"+7K4(E+*AFlIc%"Y-n!g]`,G6q9>C9hYa"L%)]rGcF84n8f*_s&k#_#Rn*ZM;`g^$O?ba-*UGdF3R2^IG75`:2Vk5D;A)hF6rR]?@GF)WP]JYb9#NQ.D+WpK^k_#T5/ri`aHsDMo%pkSe3q:iIMl$jK:NR-C)\1p0_DE.'Q:(h>(ogT\*a2R#t`S'EY+2\2!?FN_^ZT%3+AM#RK>b1\4F)U/dojt\h=aVp4p$m%qlfRBf%*ZIuC*rWCP[(>meCY&W;1s##nePUeBe<=`0YN)sir\_^/"(h6#q"1W?46+e6I_(DTh8@!FN`Rkl0@s@RO.dFU7(2_7I^[\TI.c]R%bdsTZf$Xeq[Pl0aMhf(3Tt\23-m$`FPhu4XfPlZ+^TM5WZeW/hs,cq>Il;hO1JpGi!A<Pj8^hbR&*FlGA6V-$cE9!:5q_j]$gA00%;lrE=gU>,^/?^lKm1V4Kp6X5M[cUbCBRtNkX>GE?^OCN\=70VjAk;7TQ0GmUe+QMN]f"RB5pl*8SEB5;q'_-/D].aHdh2PcIG[n4%[:+fa?DGUNo58R9DstuKSbGo@1q35BfI4UWDr3ECJ@>#u?K46lC:A5(4t%&m9jX?Z9XiU@N'a[8Mn*$;=N>6gqW@&'g\'H^X]mMi%r=%BDGN[^cDSt].>:^[)]m*er]5LMOB/b9gSmf(e]d`rM(-Y$A]EF\N-<q>9s((/gl')=d_T;jEc9=Y35QNS1pSXQ1!<--2%=,E=%4u9aTEL[$=fG=P\bo+4W,Ion*Ro=IadG1;;c,mGRkjE8U+M[N4G@tbCE-F6O&m]]Ob8bDmPo]S1#4]a'iSs"K>dV,T?Q!OBomOI)%FdC7g7JT_ID7qF&\""pq2ZEBl(Nt=5b^I$MUl0&(HS4&U4Z'>i5&>WG]_$3DN>?*Zg#D?-DC,-7gm./eD_=n4<r>'DZ$(,>*T/MB%Y:^j[@Vrj0L#%'bD-MkOH44dd0BY8XLo#><^r>%MYsF\d5LZrGs5l,_fV?daJ)'lSh.WY?/0,W>9NsFN)ihlsVdk&ClJZ#)^\)C_%Is?c6r2bCXqYpK=f%`Pd!E4q;q<.R2k7*<bs#tSpftWb-1qb2bi24*aOaib2Ep_e51GNVnU2RBG<nrl,Hh`Z7o[,s;"`@"'(/N69%`Gg#6o[5s@Ied^DSa!q5_6";6k\9pHgq,Z8EW9$f)Dp`aM5c?NnW1raLsh;hCj`d[L<%DN%<&[][GTBJEt1tA??0:$ro)#CMg'Xa%OdU(0l>o_Sj'MRCGhd[\>_knj0>t8PgL#:LUr_Xr0*HB\aje:]D6;mAK;fZdK=TZA#J=DA(F%k9cEeC]%S[HPK<37QUM+kVE+S2/%5D't%#pYUXp3`KPIpme6#;V$0m28jDqOj/1D$[&WoW^QfgYK?F;8UE-GWh[&b+Z@mkao4eITe\Np%[N'#C#kcC4`^K00a=BX>R2u%4T4)N.@7q_Cq')8D;#"ds#`>%F*km.4gM]tCQE!sm[*1Q_I^g&Vb(s?nY*\CSi&QfgpHNM90%`ekh4R4LZ``Fe%b77aQaB+`B6hn%5O$-_]:\;+e>mo_iITd[q>+@miRWC)jgTY!1RET@<]bXTgOH09^1d=ng9.!7rTW%DF1ptpR<]_-e:3j(s5DH']D<&HCW9+h-f8`e%Xg[\*WP)=kgKprJG?O='\N*0:%\=*(9$klM(A>aBX89ZX[Cc4[4&^"'YC64a)KU6Q.M8j:L4q$fB5VD4a1e!J_SY2uO8bqj]9p#g%Z.i?(m^$+.-CUR+Lm&W'e^9hUc#@'?R;GIog,*qrfA=ieRp*N(lKpcV,JHB0$?+VN=r_"4KCUM5YBejGMPn/uH[[%AVL"^U/X?7W%-4TYLZPl$e?XEc/<lERq4>%J0d+=WH0<*\arp7X[\DqM@R8V37b'pEKc5f8r/Zs+-S[Atd?UR]]Me@kN$qda/1,Fmj%!b)+2J*Js%H-GR&1s;H-Zc9N1XbZF+DdT,1n[>Rq(e!QjQfSai-AA$=0?*t/5D[F?gO-/:/b;Vdpj;l6J4%=ZSCM,J3cXls/r*eXet;uMqAT05%n(6FroO4fh`J%?cgO=MLVn)SN@N6mk_2T.VrpkQ*a2HP^]BIr1LY$BEdFcBj4Lt4KlT_#g+Fgink1q+$p0[alS'PU<K)RtZrt#,g%<#;Vd0=X-2s2a_Ps5hmuob[)sro_N04*b97_q;o6q:3eu2u\'pooG.U?@;b@$O_4OnAbJ+h2MdM(LlE;deN*].l&1;9Ua/^-K1YE%-=_E]AhL1-s*sfN@t2]%g`80e9H4'3ha@=d`^^R>>DBX8s7tg]1DfTis)l/H$TB[X4>@XYUPl`o\XtC2Ynqdbc+0q"0-$#6@BRht%l9]+L>\,C/@=P@tF4Q(b_3\i,iCPce6]k`sS9/$3>TO&)=8:QXaK1Rp"^6UrY,jBm']t!!8j'*8CbAY>8(Qih*_Dul[DdjD]/c'V%"WiB.,05*dT1c3dXXY3IPJQ1>WH*rt.ctOr6dC'+h-7P=)Dd^k5mH;k3H&Iln4`gt$Hm(ZP`NeiEiplI)2FRI2?n*(f$?A>AK[D3%PAaqm)s4HSa[e07c]#n#-\%GCP\2%Iibr,=-:NZWYhmU7]I_a1/003dK?S2ZAj3[-T9XI@'^.]LF+H!/?PoCs4t<[XQ\@F)-RZJU%MN$qC4.#+_kYF!`B:d:"*/AI5JD%AbR5;\CB3$?=50N*$X"Y)0?#U*\D<>BA);A_J_7'V-=(];==m>S-K<1Nh)9N@HJh?A[0=&B+%Q196=RElUC2?f]J][1he:'I7-/tf>P3@emkBDb(YPD-';8jC3-G]lmVlCMhT5@l5Bf7iS.NA6i`dZjHWX"+(giL#g?[[!t`BD]q0%q'Q'\If7aldJK]Pm>q30p0d7)fU];4_Ni4N%j.UBL6I1L^ctLmi`+mOoB*un%Q\V&)s"p0]H+H#+e;W'np:Jnft#PCk"2J=P6'FN%C,JX[3mI4h2O/?cB'Dmb=XYEq>-6e:G,*9k\ZElXVH*Sje'&PJ7;5r/XIjU'V2oP`[ASZVHO+,DP30VD]_M!YM^[Y9]f:DGqr.4;%s.fUBn*A$?s.0/dlI_4^_rZ/,<l>_9IG]3Ehe2<!%C%QN`4iN#p6?/nYMu%"iBQGP&n*&p/cRc-?o%Z;p\ao]o6gBhKHYe?3Q/Y3%;p:6EE<Pf]*CVU[Dh!6.012%M8[2r#kZY@&jQsQG%@]kZ1',Xo.a`!25A;#^NM+h%H.4[ODtWh^RV/aWl%3e3CnA$QVMhn=Y^+f7%R'+VU_rb+&iK;7I9OQ?=465$bL#aqaU`H>"[)8,lG*mm0ITo^A<P%GJ's4U$9AYJj<>kaB4iB>*/nC^:*rX,6#?m.W/YV<)Q*a?f%!jqPS:m3I%TGg)"U;[qKW9;1*>qtLnZnQ2qj<:au=:h2Y6;siP=1/c*\"rFB>'sYV%T%u<,;5q5OB\YEU6YKnb%_^Bm+>!l#F^Jb%lj?9HYr-Q'BKM\r?JC;k&5#eeSU?Lm?J:Z6Ck9I0SThM[V_<%ah.-`Y/`g=d[`cfK[M'UqQdHA=nl1K]<L3KhAQ<?A)$Z_d8nLS8%DJ:F5Pg<<!0#`30btM-ZUkgkuKk#<\>&q#9Hr`\0.JcttRBlAnOWE(!V0l&Co1S^f(["OEOoV9!as7`;5=,c46hOW!3b+&s?%<M4%h^Q!9M0=UF,)]*0/r:M2cK,dI+Wh^+['n,q\)Jq/pfco7k8"UZ9B8(e8U#HZ`edl\CaOdg8m0AHWhkun5V39[?BlG>U6'4>qQDKL%.>mU.BrMk7SqXbHFUjsf=U0=?-&/-&='l9'PKaGn>h)sFF_JaaS.9sa.E5k4-XSI+,6h^*2@A0'F.'q)aNW`mcVhAAG+_B;ksU8O%8/'M50YgkU&Z96nJ6r(+TqX(SlT0iRc"8U'.^em#10t/b'NY+KT!4dq7;pLN6^PuW]R6R!1@6f[C!3oXSA)S.(qXJFEA"cm0NHbN%EWf!;DRPaGAcie]kGN@SU&7h?7!=rQ1kRe>B+,BmTlR`0F4d-F.ofH#e7!;>B89qhB'`>01K6EP!)kt&=N]$V%V;Xjb7VlYjCHGP%7@7%O@*$W9V9tJWHXB8k0/9iIjm,7)qC?Lt^&1.H_.eB?hi?a[>[F6*8e3/sa^Dak:l\IlnIDh(jl8\m0_b.b@ubT#_@.M&cY;h?%`A2mL@bXP2`k&qq0hFJLZ5^KVVbfbcgaRri\anIJr1`1Bbt=J%%`KjA3NnIfi1h\nSg1>KXU"&FKDtA2Q;U(Nba!KR$WG%DjBUY-%^pN7pam;jDQ'VY9[(`Q,`)Q:RnFom!5)#u`K-R+gN(0LW!Lj6-I[(oK\G\2o0+-cd)Bk`-/5#ffl)SA+4+&+4-:GtA8P^,*QC07]%;WYTnD,**RfdO.:4$uhAloI;%Q(2N6S)ipjGYY?1o:gnCJ5=/h+'$#<@ZZrP]RFj7jLE@'1hR0@[_0*U3:R4?id8!l-al!AS5l)s%$<D1b\M8.=I!i3s-A1L&>IfN1eM4*M/S1W=OXi(;$4$17&ild)Tno.fKp&d7'inlJ:-./bnmY\iQrJ*fjZ_l,YZ[J5*4!A$igj=s%GV)sOJlZ2^),mB`ju,W.?RANTlN4d0T"d%/LtjAGLT:s2\=>LT86WQqGk2_t42i7hOMg;D^+X=85K#fN6B('8<ki3\/@LATkm8)O%PRX,PZBd4G-DV]RL`IQk?+cIk748P3"UJ@1+,X6o%li/0n3qPQ82tDoh:Q;(f5kfi<;7U5\kG-iXqra4R29Sda?#//%+KEW9LXrY%gc8ZPd\N'HDh%S#r*9-B<'4W%.W%YA@?-b0M@k).7%J=^O6A7kWB6gljY4c-niNKX'd?:]B8[gqa5\H:?fY(Z1+(Hf/7f+"mpr4R%)p,\6+T;cE,St))c;<:$oY"sg1AeU`?XMdP)FMi'M\Q,T=js#>Me.g`Th+RRbU\(G`Dji+Ul`l$?'GlXJX;QCE`%OWLj\+G&KY@q%:spT=7,/'VE`q``='q[SZJd(GAaBe1j?2(DO7JaV`ZDH+?]A:3L9rESIKQ.[fM$TCHdCs8$$EE;FdU!>>"+]7QT5ZN<t;u@b5s7<%0;=1l-Q2irE^FkN9M"G;h4rcilG/T)%@-u\4@HY+*6Dc2d9!Ae[a;)H4C/')pA0sZOb9[VGmQF9Q`J)*=mAgAU>u!ie/"=0:ekF7%YCKH[?AB_3+VWL:O]<,BF7]^pisNj6eog*j7u&jj<Mn3\'mX_R3@9Sq5^LYmk,-5m=cmN<+"n09JSr"J1`X"A$[$f?HRs0;>O>;5%HpLmb8p(gYZ37<=)??_;C/q"H3LafFAS-6M#AU!5(t,2$YgBU8Wi0B7b!Zn>;]pi`3MbhEY2%Z>BmSrr=p_S_0r+lP*/_i^9CjP:%cWG=l(T!h\QKq,lNJ]k7=]02'*hf<))[W`Kn-B5$?Gt*U6$FfAA"L,^R"+[:lDD'`P6+eZk[>+o]SKh!GtpXS?QW>RMQ^chN[=rk%`5lmXAFQpmhWDpKUFo7,0IojmaVJWn!:^I>e1)js]a3O7[\XIr\oP8MUO`dGBLK^.O!4XR3e>Z4E%BCl:^Je`Y?\k(Mm`u+Q'OYW%!G$s0;amCUB_*kD7`^.^dWI9u8m3)8IuGHEj)0ouk@L/(l-Y5*4Vk81dguoN"+$hY`uHk';hdobGZ=$?KjNg`#+crmGbJo&'^0kP%33SsEM^!&>3/M5"gPbVsEWWB:kRA4hO[F/b;i`4WEYT4iciM:DJ46WM<SlJfLdA!Q(6"hH?W\%sg0k0F:clmQRRp?J._T*p(iJ.>%SSE^bLW[0C`<EMT>`:FG^:[N;5p>qTqkO&tlnC4uIgY::KbBSOi1cP_^_<-T!Tjr_+hA#Np*WACLgTMS^7</tLu+*iTO,\N]_!?o%[];J(o=`S&ROfS.'J[Q<#B#,<MrLELns%![;9CW2B(n4J,gt&=#SYaAf;ZuMY<l,sD=?h:BM&K@Tg7*=(UWOn(pDHgjE0K%(!V"s%_IG"ra_HlWW-UVD9FpJe"@4)N-fnLB>H%RIe`ueO(>"[006$a[pU/der'#9P\eTt`eLF<7<]Q*C%r59c5<)PG.-%W*DZX1P[.jtI%ogF%!9U$`eQ5oS94?5),%]qL]pTn+Ar?44.`pAdAAurX9pTtI1#&'Zuc2i"mTb'*7XR&RbO)n0#m?..QB?W5i7+la\Jm6IZI-AS4%/R'odM<QW[J)_@T>I-iIMe.iL;WmV^a"#!1&V2QT?'fSl0B%>@ohMhAP#]dH831kFCg?hZVe(uB=;Eqc7d$U83VR!-kR_O]?.1%X%q'#HFY_TIV2X-+)OUDEY-WbdO\h#%nS<#bPpD#beguS+deh)huI?1"X'[mPsO3?1L80OuE!@CIhhdo:S,D>aU@ZRfN1+p7!+UX#,%(/[r78+f1m(9SQn<]8N,e"KjFQlV%jV[HLZGjM\r<>_Ar>1fR8C5cI/'Lpa@:QA\Z4&JCA!Jq)!1J>bk[W,@E9KtNkn1+1;kQSV!%.d0t4*poKS(=Jn(W%P`>P$$:)`b3hZXPsq[3)kSA0J?-r,`7k$GR"pPbu-)k?FdEi\B[a$H,pD7OTGEZE58<fb4ffh/,QCrZ*@km%E"$!K_A@?UAVdjY9U0JBS^e)rU=3,>hdOknM&i<;'pgBEFK=>i"n-02k:g,f,ChD66hD5lVjT.GH?ufN9<S`b9sW5U,mF&Z@JWqQ%+2hV"j$']fLh(5o#ar`pbNZaD33d$c*EIJ^_js)O%3:a\XuVEKs32TT0D=SfBD/c3[6&M53<EVs8SWa?RU>8S-Dr5/P"1EN3X\HI%/<mu.Z9uEX13NV-qB8n`\2#SA6[C`'*K$ubH2lf[cRYR;]S\$o,_7W4pjh1u[m264?I5:HROqS7BIZG)d4%i@=0sg;36<3I\<Z:4%(I]\Z3_"@&1S)J>qqe=ii+)?1@t6IfM%)X0WJQlpck:nOWcB,TLtg.n0tP)H0S*\m*V*DhYo]6uG3C)+[)6R<=#o>d(2'nUi#"I\%)9ji!0S<<I,;p,(Zn.X1+mL*.l)S4d;4Xn`E7?KV3D^_!$M9Va-T@b%=d$$H[HO-6.D\ZMJaQKP\3s\5JGZD%Tp7LQX;[QR/F6a!%RddZI"H)uK7?">ok%*6Wn-dsc;t$jS^:%i/>rqi*c<CCf4=-mT:[/a&9;.==k/Km,%f\7IbSSYOC10Oe%O(9mbHglU!V^GI.-(%a%Tt^5B2@X^3-a[<<<jFQH9qHJHAu[7p9DP_Q?9[0<SX.d\;bP,KEg>?]eU+j^@6T"g/-7RQQ4N^YVLHpi--Ya%+lm/^^ro5(ZeZ6P%HLbBNa(r0k/M"68S!LAD2I-NmQZGegbh%m8VBo\)a`CM),1(FF0&EJ!oMQr9$(R]H#4uua,&\B3$!sK[FlOSs]i3[ne'd7`m)dW"%*hm1ZTs8?KUb#ZBf4P.T_OqC1G=DX(_Oi#Ff`FZiGk`a<CGe(L%L-F'/T;uNM-8C18)ejFn5g'Z7(gJ-6YgWdY3!;qcsm,I_?h</%41;qe(@EWgneuJCLK7(/?O`%fL!'ER3"d8mU\Me4*,5')N8R6@;RjApN^SCsnX)0p')#%".Uo\Q7m^-,HgjRop52euJk(^X@C^5Z%n46F>/2-c:+6d5/E=#hD8?_;W)]snW="%UbL.>FT;qg_3M#9S(5/AK&WXOgn2=O-I%8n@02*B=a3ORT[F<h@!iIPajOWN\CDU?s(%FYF_=k8DM1TU==8=UB"NmiAo'.\3J`.'PQZ?*4CZ=fM,C#(F_Ga;!]<:B2)D2'SKGJmjf-B/Fj3R2+'.g<;WTY!2<k=2fd<H"n*,%@F:g]epn:XS(cR0Ka&)MHO&CC"gg/ngan..>C3W*qNIcCWij^]];#b$40Gp]d?P)&porP4'trAH8HMlD-kNmPE<t%5-*0lh@`B.F%de*XdC6)MGbi.@:P?J`40%g<6`./CX*O3KQ6+&0CZfMMdUDA.pG,M/]YJtfSf*lpD#S(j=.A"&(Md*tFW9,'#Q1#f[V%Bl84"Q>!%=KiBj,/P-W57f:f98Kq259?uElOl&:-6r*Hk)a?\_,#_k?+f=XCP?W_W8CEUE^&FEU65(Z&@OrJ\>[oYKPH18iXfLRhI.O7'Y@\g%AK9_;@T>h4O>$\=<!?O/(9nelSPEb4T)pGTj2IbQj],,f/BrJFB7(T)E??*<"sb&$)+JO&.*>L@A^8!8)i0?+AgA]kl%h'F-PJ*A%IT\)AoNIGm[*i`cTL:nJ<VDMCV*i``#/)1TA>_5@SfnrS!`Z>s)MsV]R!#.M>"c4G]h!j;Np["0c=pr"GS:"CUSF#E1_rs%U9PK(%3__U*-!r0D#F?k:8suerlj3QcJ;$B!9K&C"1D&Dcd30LXOg+nk<tRBYjU=tt-?^IZ:,I-$H()"R)eAS)ad6T3CD#2h>a@.)Dlke3%D@4>!dn;.h0p4XI('tKDGTD]1d5_^,KCI=+dHr?Z;GeRf%4.s/.N!81:O#VC`R<)T0I%@F$IS;PkGsRb!h"W7?=1]D&Y1kh_fZCh%mr8;'T*/K9&rfng)ibI>W8bH0$V'7in7M_?*k<hI!"(Rs&X1HqN?mP%^od\,-k?o\#tKgC;6:t:Wq(HbU;&*p'eFuN*+H3BDIS*)%/`eI+>_>5%X%P,7BZ>m8=aD)0=!`#;6hZ2UKKPLHO\QH)CsORLE>=!k7QiLbV\jqhVI+r/9\t.M;%J?0i1ab;h!#[[^1dZBPYns>%$O0r=7j)[P+M+jp&2itW+b3`"RSpGS]H5$k#qgPQjI0`Z:"9:;Y8XUD2N6D%)@[lk?cM;D"<0pV)T4=tHIJi!,K`gGRP,;J!0A9,%T'<^:=o]Bbjq%M[LC@WEHKnGSb<6>iho*d5U&\SS+u;Xr,pY.TCsTtb`4m_'"^_06'9Ic5_o':hao`.smCGZ:&T!7G/=WAWYjG'f%3gl5LmX,Mr8HjMfM@<h2\0#+8A<h>),m[*NBE>Ruckct0'$nB(%A8B1lK<jq0ELC1<bFWV%;Ub:0K(6_j]PIT88Z;3pc^`77/6;T%6!QXX_cJhBL"2)A<)l8c7*(G@fPTu;*]Sg!K@<@_WG3B&=h0A<+Oj@g5cjJ?BEWq*HIZ=?6s58Fa(nf*EL!@j7b4f-ZB/Of!(UEC%1PS`VD?W9snI;e?Wc[_ceR3dGoG$g:$ufQ^-T/V2dBG*#=TE56gY,)G/hQ&1f05t0!Z6N5R#=*_<e\44k"kniWW60AA*t'RJXaNr%N2]W8GX>CU^kK@8"0Y5]-D,Gk^^O5:6,56STR_Yk0(b?5=g^Sq2JPE9d7^4""O[%TRs^@8MDCPqQ8+RQMp%:O6c=EEIcM/^X'D!F%/kOknhNqr8#hfH2Z1mNKnM&uRbp=lVg%/o8kQk$fkeG$`e*5$cna!8UUhF<ahEk6m/%*EHbYEJh"ToNrk!1s='iV!tCqOjD^nT9F%A=7gEHY#/1d2'eRU:`soK]+'[ZD;bJMH-GFU$Pm8Dr<J6H<;rOG76B;#/hYrX@KMHeknL31i/k@7?2nY&\!7KM>=mS&rN%Xl!W-7%XME.fK>9T-;\_$^p]<lSjB3?DJZ^(L&#s]W6Xiq)ROqI")*]`J&]IB\A+4NEXcKEdc;*^-&)^9=T,b+=)L^ra^FlTS-pnc$#@8".%$oiOeLKd$h'/)p?'[TQ^3dbtO!iJYG/ULGm^J(4#561uUq^urf\8QMEk)a#%rFRCqi3NPAn-o1DmXXM<9p7.*b>P)<EWFJG1miq2%7Spj?Ko]GBdBd!&6c[YW$gq%l^Jq<Ml8\9,Qj1,L[E"A\qQ:#(dutd=:$S>+*bA\Yl:71"=#_gX9,k^N#oKL8FGuC2+LVmM'J6kH%@=99!+`N9Un9#j-B%A]'[IW%Hr):A@0Lrhp_QbSu5EV<n#L1nTp4qt;MC6!8&l'QU<e*@+6^@2iAr"qk,b:u2W#^1Y>c#PXF=UhV%MF,_?H-sZk2.:anaRDoFe9Qqg,Q0FM%V'G[&_f'Ehr[Jj!,_lgSBtu<!_Hopg=ah0W[q`h(e+4/og6;$Mm=GBJcN#SXah+0EQlGS%iSGb&PG(<fF^*"[/W2%"$(()R=9m+B6?@9(C-%Haa.T:N?*hob>=<!-?,4R7ht2_,6\o5ofGKG=qBTYZ]I;:]S)S5a!&.1L+)OA@%LuFY=<5bFZ_`C:q55I;s4I^%=Q$u(@,!ZZmMBQb%5AFNF\-YA9nVZgP'-eu7+&psh/<GmsLmB<5m)(E*Q?8QT!Bb#WplaR1)2dqq%m)lLAH<oL4."*"DeaF)r;\d>T_"i_OPTf"+M]-tn\7U]d=#'4HK#m]F;b^(lH:.`9JTR+*?B'FQ`J!``e$-A7Ot)_@p?eMpVM\Is%G7i_p<@K>%7^WO&!j<[T=Hna.m9+l`DJmq3`S!Lm%kjpT+afsH&./anS:[:3<sticXn"M?i^an(C,iM8n;aT)XhZ[nn<-gt<Tlrj%<>P-R.f1`5&`f\h,H#%i0`kP%&k2to;)9W&9;(FJDIu4']0-deV]@7/)ZXE4,"c!qf#V-7]YYm)R>mqB#2P>j2DJPeRME`*A]j])%@$m1/':l1o/Rc91XlrC7]:n2@b\;%YR;.A!<#_A&FhCosr"Sh[8rWn9p[o/7Pq.AJ17\O;8l7XEe.Le#5f.:"8=,#K\^OrP&,g'R%"_m(P7TKTl937@[J=Eh/_9X<qW8pW?'u$XC@@C*g4qgI[i(<Ge1M%5f$eE;0Yn-p<L`_t0",^@KLOG*ApqS,/pJ'&r*$Kt_G))+*%j]4`?<g@]cZ%gcMHQ&!;\cMlI[^M.g8D9%<p33?+_aFTd,V)WX>Rr8kMYrr!@_c9P\=P/WE%YT3V'pf]dc.c5BM6,lNS];!R4tE*%T>9.#QH"./E]aa&3!2DKqWT3`]7DtI\#&tF'FfC\]gHoV%@3Q[%TGsG@-/k@]QR1_@FP`c;iKY7-S2<l(kHfqQ[\<8GHdnm'cW#B%5H"(U@2SO'a4"W;JNkZrmq[Z?6D=.E+<"Kn4CtW;=rGf)=qLh"dZ@Xp"PDnG7kb#3bgnL*0P:Lt>dYG=N6:rsHir6nZH"XcW/\en%l?EUh8td%gMagbqr8LUl?P>f-d`p@#TuD4u@VC:D467ZcK4lE>h6].2$CuoPW!QONiHl.cUcW>0Yi-FuJN9h<(R':Bg*RGEdP:%j%\qpRS4S,#TdeRaG>fs0mA1?c?23pq@l^]at=XZ>'7TH_W9E=52.>LV27"^.Hh$MWgH9j@f]M0cnM/,CE7'1$Rd@bk?c#P%?8LL@f%(/SAn&V?IWb^)Z84s_qk[UZ1SRC$HI<GaBCSCR/XB(J@n/UCh^*87L;eq;^G:O29M<LB4mJ=H?NgeQ*+"sARldiA!(ftiY)#RTtV%ck6A8aTL<hQAV?*7f'p2OjWH-=HMI7UMm9n8qPNF41^9D!@pZNGWUqO.JEK-EO8Z+2#La-qSDgrKB[+"9MZH7A83cZ?gU8V&FtoW%kJ/guSuAPjnUW-b]=<S+=_OVUH%SCR_m_XEKX;ZH(1D:rBQ?j/DfccJNnskNO_K`t<h&rm1!;lUjSH6/@e/8dc%i7:[a#f^g7h6D%5&3^eU/Rk9edu'9M;VNPrF^Q2>cqDHp0g>RG!,?g@;CEtlI4=5Q;/AM9ODos-O@?JbbjF?N;(V+oC;1dF-ce]*jK<`dK+.0?9DWg%XOkLnoctT]p-PRmeUEeo=6E^K>chX/%TanWr6IN8ooS+DWB<o8Asd\Io=G79_ps[L@=$F?LhtS"LUM)f*d&CPqm1"hg9UI5%&_XW%);fX7`XF-2)RQMWB;HImhj#3/iKZP8j4-0bEb(M:$#3H8TJW86,aPK7XL)-!)GsG*PCK3OX\T]nkc8Z4j],;K4c3+6kc]iZmQa>K%a-F&3*'uCcl#$lDWoXTA6V9`I%1qH\&/^h4\$X<-[#R0mr5R.IMYo5=;;pr/>9W-Z)/TR3PDKu3"])9s$6%G:bs+P=-:2)`OS'@!%93NRMI]*l&fiPRNdEeRNJ4QAKNOW^c[=8<Q<GR7lfBMeghfK2PNg_D%(j_Cfp[DM)Z]b>+*,RILK(UIC_k<eA)ZacgaT0-`1c>qj%f:,HG5PbfiA's]*&5f:_"6>G7kc2MKSq%N42]:$Qq=u<)YVm\hP]?jjOits=o7WJjJ=1(LOgIu`)#?HoC4qFhh2,[(@JHQdN8r78%jDe`o<FWO=MTeTFT>REk=Om/5gWVW0iG((FNID$4I@6(d"?"_LKi9A$o=5)H0KfauT</d(-`0W9[bj2_SZqt"XWr"r^S,`2eZXKY%(b'0&6ZL6P^ftAX9-o:m+*ANKnkjKIVFTHsLui6-WRVI,UM`Hg!,)qFDO;Jf)T#]kF,$>d_tm6>TkkaH"gf2F8)8o6/m8_=e+4T-%S>5/`F$jLK*@</*)^Zr()^Zr()^]p1qfe\DFi2_,gpcsU7/!TeV<"5mG9m=;pFT:i+cEU/IHX5Y.'l"jT7^=USi%d[[CX_&fK<q,%9UC4?@IpSN0\tOOL<[&*_fQ-m)`H$2L@n!hrp8cMX'rRKgC9WbXbK=mXYZ)Pi;e!&<TkUJ4$QQ/T!bn5$;WlchW8/Q:]G:jq<u3%%g)(#fTj\3ARB0*T@2<BG")bO=+>:g!#sk+(6kj3cTsRua9jX'M86o4f,1(Cb,CP^rM[cd<*,%kUUM`GRWB;,W;T,LrF#B_4hD',H%O,f(12Y+iV+2*u]/dV=E9N`Xndc@jo&r\*S$.*OU>#sK#BpiZ:/m="ZB4s,t<_KXdRR7usAJ*C_6APpTXd25m(YTKe1a`&7F1+(!%kseAT85p6o<.Xp>0^#=06[fG2^!''G6B@+f+8L"5@5:/B!T)0c&qnW;QJ=+nhEZ%qC%a6^6ioC`2AcHmfNnD7>")Sf_Z[Uq="cR:%%^flEKNC"VEiW80Y4t]1_\<%UG#nm<4^-#&L3/iJEG$)EI0&*GJ9?G(Z^GtC]"Cp*W(>u[BGcj/an4k]$/=BN:s'a\]HYRR=l.@>%EeVM`V'.uu0jM`:U=<)5+u?bPFG?;"8>5(NLBu>DN[6"Qjqr0KFN8)BOje,YD-1O.+BFY>8E`tAE\TW=l@t!?ZX=4q=2p7k]TS&I%`t2WT@Y0i;%%+M[MC=qCA@/FSS08(X%Va#i>O%o(7CmH[Oc)#T1eLJ*,3qjelT)E\E/'[engXF]lsKheQpecc(/1Z2&hXN+cCDZs%ccA+X%"MPbdkD.do&1>pqJpDD;Yco!3%S5GbHHK%XGSTf/<;VZM*hV%'siRc'MdO<ZY5o,KZgaT\g=loR1eTfPse:,F$t!#7XuXl%"7uYVbYiWidNhh-HGuDPQ=Q\@;==kJEL<5Oq2H3qD5bB12G[:?"FQA5"B`SlM+qqrk*g!r$o'5B]ujh=3j1;?2p<el3M!$'8P@E:%KSZ`S0IsOVO:3Qu_:/<MfRd7DTTZMk8`Q4qj#)P:.n:Pl3gGQ#n&3EiGr%:O>*uhS61!a/@j=B60$jEJ^+K891+)b<KZnsnQDI`n%.IRGpUcoTW<Ri>YW3!TV&<Vu"h/IY*Q3UHrolZUco10nm5+Wl$$$-PLjCo,L0ZbaF++d*d0Y]B*W=@-?QWu&NH^O`2nguMVq$?t[%Ph6(H7]J8GV"8m=OCTK_4]hlWoP1S:(gILBTYkd3,'_MhXSJG=K6%6U'M?,uQWrZ'=G]kO-20r#[2LM*)**i;!\?q6L`<\#?]KQs%<#h#S%PJ'%\qhcf"P`![K.%9[>;MNMaL,EA!>6f]Ua$Gb&OY-[-.j&`N]M2bL+98$%/`l\Q/tC1UhIUZB@\qg3bHUH6Bc+k;cr,j%e@f!AZW%_8FsKm55Ds`JeI=Nu+Yc'Qc\sul0$7Jll/R0.m9-5(*>t&#"NDo?QZgLC"-X<rR6%.><X*[%7j,W'nN%I8f5t[^`o)f)%V"SJ@WI[8qn\Chknf1K=)Fc`K#Jp:s>ui[s$!i].K-&36"WXfi"%+La3?,BPZF%aT9nj/M)&,N@_b?sE%./S(+kqp3GtCFIWH=QV%mdF#;)R:PSg>l#L=[p%\.A(HWpR)g']i@mD<G4Fkc;$KC<K],]B^das<p'aehO$l2;j;P?MOKq"MH59R<Osp-U2690=Ad66TL(0]%\7,o'93Z/b#NU2#gqRLqCs!uHVJ3#s63qbT9HMNucs2W-Sb25>&6qVXG@_j`p(ef+K^5M2ADA;R8[fs,(dacn<-[PpL.nhF@#q<o%@()ui!'\M*hHma%@Uf0V\1s@2WJ<Sb>9L,F`&/-4/1lueBB#2B2i#%BG;t;Wo'+%^8\Ijee#"9[3@Q_Yg0>in3?l.OL3?mo89LU6%dmQKXbE6-[B.*,**'8t>bUOkF4_F6Xal:^s*^`m[+L=ZT_B=N-UY\7)$;I-2jWNs*T!K&)gaENP,hJ_cOo3jVXj!GD6Ghaj)jp_-%_+I-@):u:6Lc33eBO'@<fqWNUK=C@p=*f*i.$n]6OT8c]>H:XBN:Udc\A[I%?)k7h<a"Xn:X;*AAG/I'9_4XEL1MWr:AZ<=RO3q,%H/0if1DEtA/A[4_BE:So'"N9*1Y.)hoh''h^l&pK>io2<@>P\4#csh>J/?*lJQ8JUd3EQa:.M9!,17G=PB`O%<VKXIrk0ds'7d_6%X:S4-?Dq/lRO3Y+J^^?!Wa#[8A0TKsMp!Ak<E70.Pnfr6"]dQ.[sFna0S_g?h24BH7B466NmnftZ@nsk5Z1b'L.\I?S6RfN(aLP9%bQ_*F?.%&m\@]D2Ht[1b]/!mh"$O2[M$M"PdimOF87UV(`bf>[5Upf6_F`fU*+ari@&boL,D$J0;+4sW,#R&K=cZ8#Ge&emBrUR>%.4+1IqfH]"KFiSFKP-E,3MfP&Rh*h@"OUnL:4Xs]-A-'"5a=*W]e5)U/Of&b0`3>UOR$S)B1%e6>eKf1o0`H$,pP!PWn(XDUc['Y%X"#m"RRGQd=h)B6QSY+'qc&/915D\`-dt-#+3^T[1$Z/_'HT^Vs3rDVq+0o@opd8Y'iGrs9-e-)RnV/LPf"oZ-jcU"64uW,XAYZ]%O]CcZG#3QJJuFgE\Rn6["r(\Q#:j\Q<)3Jtl)Ji&"djjD@Sh)ks&>G+_5l$3M+u-N9#nkJ!;^jKO!c/`fR&c57\Potq!GWSJ7Cu%%b^5Be(ir;g9bLH^\!JfR%5NPe?#%HRTU(F>&kc*Go2JhgTI:GX1Kl7A4n;ESY-S6tMGd[,%\s'VJCu32`p1s%"HC'_2?h7lnZ&?b%B9ArWQPCFEc3$pkBdomL.tVZ"/FtpD8=6;S96E>H)6?nT%BaY13+XA4iAjR`e^GWS`!P"\7!U9hJSeT1'*JdFX$mONUqDlCQ9I.#%e?*HT-EE1%3[bMt@m*R4ZNSeh=EOTqCMn%uRNP\@oQd:bB;s"5fI+%Q[),KlJ4em`C5A)4Gr.o!R>m"n?WM;:XpXiM9=d^#Fn%fD%Cr=.V]n'o9p_u&JMH!qHW'C]83ko7/BpTOfSk:.TE`bUV1C[\0iHSPm_5YS<Q9O-R\;%?$TdBj\69NpR94hgAe'tT%JNlm0C#@;n%k'%GdT=A:UOq;u1+'+pubE/Y>N7&-4Q:/!/[#GC*9"ks[DJE7QdUC.#"k!*IG7nH%M2'lAU`,LD.M&=qW3h'[ZO^`U6>t$4'++Yp%8/tNAIN:_m,RMTNpe(Ms(;L5Kk!54OBc/qZ'lTJBTJBCUJiY1?h5cCt-@lnqg//X.PR5PWq$k[`j;i4#Y\!Dd_:&+`.Jnr*)e^QI%f!5#j-+5D+`:(n<"bik_9_LdZ!^<h4TNX[Z76I8;J<5jE6`\OrN5MBLj\"X.XJ+8dBNY^ZBj'CCF&oCqAW>`c:\(=BJesQkrZH8>%]%NR=V&!+1>=+EJ1fU1'0ISqMC8d(C,nhs&DG(O!<cpcM8O0B@<c=F<F0uYtc/>4Fe_r>rYgj;!&]n72$o&A2^o'b:8?3nWLhS`J%aLI;Z?7K)Ll!WP*P`jfnY"6ePi#?TN[nlcj6`BkbC'.OFU&I1*:9plde\%mB=.sCGD@9/Vk'[I<%HfLD@GKn?/i+\n8Fb&T[qECN%k2!Rg9'!!'X*A']+iJPqR'CA8n:HD`-ZiE%f`&es_(JS:!XY184+d')62hNgS?dm+OG[Tq(r/ud83T`(<[$a3b$5bI]7O47X`k!b%`Tc1^]R\4%M_<=*dsQK0Jip#c<Na&(4O(8j$gTaVfRuPrGl/Voa%:7P]&?95Vg1@?p7ciE,-=.9<2FeC<^/"%,',:>B"?p:K>ecU%(.,egP8DWubA^U+U;he'X]MtK=8;'4>TP#=;o8Z7:3UhW7Z%!'FR:2X21?$niWYffLpW)_a@2$8889'Ph@?-(e!rpGEN&k#H5XLR%9$p2CZ>-8-c;i<EPXUE&Z[1X@Y,Q^X-[g]-QaXBej@!`h?D3r&o"O],ilcD]o<AVF`4Uhk_im=j8/\gk+u1-g^bjPM4Xd'gFO`u:%?$&Z12/@%SgDE'd+V4$7:^I5*A$-HOcD;oS?DYWdW[cS(G&bVRA@EiQ0lpu))?l"5oPia=a;(Dbj-'';En1ZS.)B[_0&@Vd@o,VZ%H=H4SSdQ=REHsU.Sk7MS!D%b[(h=ai_2D"Go%56/@aod`=sGOTX%k2*AEfa9%6a1u2Di<&8uFbWeDa-NUqejHP)bAG$sbV#(FG%t%BonX;gRpMUI+'=mH1@=I2lT.o3#(;YThqc=L\Y"P5+N#6>I8rTZRJo#!=u]Gr(r(lqf)mF[4QMm/'!iD>ht2Y7t^5.j:+`q]7ffX%qlNOt)DX85>!9+X&Nn%2Nftom(jcD5=OHJ>8k"ooGZDIt;R&U*5jb#S\Dp-'U5XgP5D-kIE-fU4_]is'/61Y>%5ZRA$;N%7;jTMC%oK;G_W*of52AS/<h1<^,?/ft!MM:mZC$^rQ.@>c%NBJJK#tI[gLj\hcf.s4gCe^m%])Kf*V"?>(P;Rrrpj$bHPqJ/`7^&,9SdcbJ%]0TJ]ZCK=?djtNaHRk:Wk"OQA[Lk$ded5d7b,/U)buX--]$T`*W62t*2lUuBn0_8<XOe&1)O:Oj^1apLcOA$nFQ3M]oLUAh$pIWZ%lBAX6Z-d5ZV*7Q82(bb)7N:tk(Th??\>ns0DI!^m(a&-GdR932WX`ppF+mt6Z%.N$kR+L,Cf<>0G)7.DRj5pMct>pe*))NLD\g#q%?4rcb6(Q"H%Hs$PLH4e%cTLBr_#^;H!^)'cS',P\=7$Y`RujW=8/GF_R]Me^#A'4abrEgo6;"'3;P+,%dTj2]D"WXsL>da>Vc?gP%/_#,$[af".lcFt"D,[&\J$<ZV<F:cOQ>7]>4`e1p!?)6de.Ya1)YAl!aDED#l7kdd*>2-CZocVZ8a3N!<K&!`jlL;XXr1eb=[`SS%fIV36Tir`h\-a\C!u=U!XUl&gS]tZ2`,m[Sj3)%rbg#<mBO)mC1-t<M>7>+c=2O(>=KjZ^:O;[g)4\IkVcK#*64*sl:NAtPpYB)8%+>UF&f&;HV+S9BM:5<`j;Gbqj`XI7^W1f+W;d:-a6(aD<XMn+Qi"4ss/rlK;Dr#'*'9]u-mP=1>4Nj3O-at0!fs.1^e'`IF8-3Lo%@4E?lb$EU_)9h(SQY"Vl(s*Z:<k^FpS`$O>FF+`sQcuK(9MAMfh*b.d3m)kf6,nd7N+D,:>mFYJR47L87d[NX50[oDc%\Cgp0aO@%pgto<$6qeVO[/,o=$)?"Kk?k!]>Y`pPG^TE7!<N%n7V@4JaK/4H0CGIMdn]K).s_o7oiX31Wd_3;GMpX3q^cg8q]ia;lSPC,>g@o%UaaJI<]Vl+q;O8fTUCJk-mPoS/&(4q7BTI#qQ)'/U`k-83CasobYINQ'RBaRf'LTf%M,;%9QZ_-Q;_3ohC#cK-s1KW0Yq>"atd(4%*L#`fL@L.;UW.#u(QpUiQUJjO2%6\=IIaV(a>?\@b+L7[#2s]IT1*9>$<g)RIF@'T__dW75bG^d8QB!*fHmXTm^GTHbI@])%b,5n%je$ZGIB6L[6ICaT2E)D2fHfi^;[2L:.[qKI/djSn,3kL#_;bl2'iNcpOtK`cR`X)?#ELub+<Hc#`2Q9TF$TotdBRW_E9^Xo1J$(G%oE998Vpe%l!1U(tc0BP`UB$0K#8MP19T-C]Rp=]e[#quJd<J8(@b5&@[D`5$:ei>`'%Fr#5k'S2eC>enEL3TbWa^IR_rFKB?*i,C%2?m!:@6s:DjN`Es);bjbi?,.fo.K^X30)VGXO-T23[HI7'rajg'+noG(e>O$K0U\i:eTY"liCK(7p[J0'VeZIrIa;kL1`!:TJEWR%P;ciDVE'roEi+eDZ6V:>0rA]O)lZZLP>X]pTU7buCu2H1OOTb@'lc#u5J9q\'=V04]0quFRTf_=.q>4:Y@%t,U)>:@!!M_WZL/Ap%#e8Q&T4DM2ko2mDHj]JE+2YT)1_+p8l@Q-'&ZU8Z\OT9b>#^jR[j=/@.T/oo.(GC+CPfEW(?-R(8NW+q)"%p$,(aK2(:lo0i6[bu%Hu[htg1=,jb*6h&bW7J1#(Hq^^(Mps>-_Th;]_Ft?(B5C$E%d`@g2dB&aepWU\UGUg)1<4$=[BGO2fgK<GC!*S^2tR6Et$8MF_bh%2^4iUV1nT+'"9r,!jE"g/E+%k;XVOk.CW4.?+SmTCe<>3X`:H$/?B&#Zg,>!7C%M1m].ho(!r7S>Te?aXsl\`JeB,XoJJb>Hr>Sj%)O)r6BaQVpZV(V]AY*D&>RI3O/\#%5Qhjg[Xd*-`UHqVe-FqVq#Y-teeAdBKmGq/a-<+,,]+dFpNVGBaV'qjC1kd_3Q12HoqeNK1%D(J90c7Ut4Z(Nu-V(B!UhiY3;\Lj&@Z,nUEHQ+b(lf:r[3igMe>`-HqKe57*V1<9G>fAb7<'@+Ic^L#!#bkC]Fe)d[@&OjpXclC^%S25;.BoHh7B]YQ.:Kr+h,E:q@Hric:Cn4d&91L.m9l;EH>>6!;;bLs:T5IP"$)FD\hkZQ!El)*qV3\\:Q-=-BQ@crEf4QVA[!!M"%*.^TF!48@QTV8-]J(r=A2"0?Y>I9.eF%j\sRK3L8SE]P.%tdlT[02s*BL;O>4HToMlHCV1;Mpr^EdF_"CS#=4qjZ,(e4krWapi$<%^a>D8nQb2Y2`\o('r=gUj<g(Q[-Zp/j2<@d=0ioMdu%3EG:\L7-oIJgSOHl4p>.0DT]p&r"2h(f?^e<s[):^Ym`[$7T&shj+Jq#Z%RLF2?gh<CVk,^B;K6"AbE?5b]?m@b=kkAu<(k<EFk%[cCE,[c3n//IZau*o)Yd&;g[/^?r>QZL9S:j2On7*t!VFWO)7n"s3mlAOm%ZsJ@$M@(aVcH0e-\-b_=J(c>/7Ons(fU3aSC+7YG5%G^gVIkp+0^6J'K2BL'l3k"GTnHC-igkh0[Z#DFks6?=SXCO]Gk"0K1eAgs%,PZGKle<">E"U$[f-pa*Q7Up"WlGUmQ.X=H@d&&8U_:q[^>r]re+""q:aST:c'0E*Kk$n*!%"L]21&L(FrU*1E\(`.@0A]iL`n^^%SjV=3PGS>jMS:cW,&Dg(%`r'kWu/Uld8^6SU?.ZtThl*Ze5BGGZ;b.lF[PbnkFMZS2FNj^0=3?=#jR?MEgHbl7$MF?\#]%*YY6of%i1cj!d@[5.^f79?X``m@3[V)'\``IA2*QU#Z+3otWO2FLX4[8JYUg[TonZj(6uY[6H6*CPZ8skd77qT4X!hO39Jg@,&T!V8J?ZD=%Lo2DC_BHmP6:=CsSNOjK6"BO#BiJCj#Q0B`_J<0+9J3n_RJ\+9DK#l7#U=ON*ll<)Y\`RRgH][F9JT.&.kP,&\399V6NX?!Q#GF,%5\6X*)oJ:#jJc]n-;KW7"uNq[57CW#.aP30*EeSSW55lJ97=.l8<q5MQ1!qC'uV>F,&^ulQh$Bj&qbl=jc@QqV'`r#I48+@!0F`Z%FlDsMq"\/^TraUse5Sk;99JPKDLr[T8JAdlYb]NArX5iZ=9GH%+HqO#M&9Engh/@p$b(I:%B>dtAEGIWeP1>q,HY@;H34GWG?RZm%erch">h'KQH0SO.6\bhJR$:]^+pCQEN^8dF<$SCSS&K\,Q?p3PX0cP!\5._!@,a?XeUXbt?io8S'fuq$DtTXYSgCVr)hh@/9B^=p%Q+0a,.h)>5f?5Ra,.5o<BBkG1oF\(MP.@HDg*)N^<eVa(mpQ>VZ9478r33+=C0;$WD($\`e-:V&@>8N8%#]\CjAAWS%&H>WrEo`i%al1$e5<(geNOB.Wc`@dtTc/ZT(Ri-0OMAA&=9M"W9d]kRH\t8:$$NLeL7KNS.,_bg5RPqo"$;5o^^.i3d[eF\;2,eT6VSuR'Ii3S%8dPRIZ#FBI]S/$ZaS[J<[>HkOOiis7$5dL!6`($?Yg8;g^eL/]*(@tJLc+6#k]a:F_')*h5)G%=dB=3<J6gKed>8el-2QbX:oEHM%c7=fZ@I,^t=o*4Yi?qD[A=9YBhBhe/6$S[D';!aj,+RUiR<WB^*%D@l.F3QEX@#uoeSslWbj3(kBIttT\K[l_i^G3G%q<Q#iL#q*%an7eT<"8%cl]*0Q[FAJMXHV0IH]4buQE6j8UQuT=_VJqgP_mHQSq?tS^;f:@&PC>fG>PI&<5+ZUH'W6o:Ms0C+_jQYm#&`5H*;dU%0pa9:";Cu/WgJZI'_N^TQ!cRdU2P_;ZI8;\W+"/p96hlSRKVlL,E5h:c>36de<6s\`GWUJ9Wfd=VTe16$^&=`%cB4.7j_:kN#(>&%)[K)*\@tB\@eDZ&,"CKpb`L8-V1qZ#)_Rj@5a2thqhk5\0Xr0$X.do/.:[OnK,>*#?nW,i^m?"0]HVZK=O#)]%B2&`TN$60S5qcB%SDa8#-'^GROuY+>*SAJd[VXBt&::Hk<Po*AJO:"gle9(q"<3%6Trb$@RPBU,`POKp*C:ctN6&Y'L`ETrcY1G5e0e`7q"05Q1PIll%0M.h.<hL^."gK7(V,o%9iba)oO@cN<<'uY^=J#p[e'm**9QV?h$_F3Y[?CC(nAneL#\&J.`61e\PAdQ1,\k$#;r1!A:%T#J3jXco%M`NO"pEpRNLf9aq_'SN'9]DacdUjrmK=,?$GXF929N)*t1BfO.&nR/)TmZKX;Dmtr7t6)31cjKo3ku?@0_!8O9qS,d5%_SYHkJWd%][/aF7P3SPBeBTB-6(h`jq:]GTubc(>Nt"CM?oju1S)DOCZ/$U1Ka``So/7"&e[jNNQt%?iN!64-9bc5<$T^Yr0[0aR'TQq8k?bS%kSl8A3S-H'VF-Xf79mfkM-,)%J01YU82dSiY+T^ZEY>A\'3gX2A>kmCA^,8E`/7f\TBIX7Crm;2V4-O8%!/bVQ;n[&_$>SGe<F\m%g5'Ht:Ss)BNQ`1&K<Vss)N*+ViUP,LO34Bs2.U&EMc_&U_Z!AoU5Xp"b15D0Zoe\>8J.'oU.M3rYaVaSX,S-%gkr]G3C/o[`-KsV%=Y\b>T>-:mRk-m2i#tl+Hof]-g@.d\5GZ&raV^!%24#s@831EC.^ccn<,dTqo^jjK&7+jcB.X4W'b@]X*fFG$O@iZ]W\PG2Qk,9*%Lcbf8)=8'8@NZ#E8FajA0"VBsVJmjUH&">s&A6[?>muT$l]<a]=p)2"(IrSBoGo<Cb>V__j,AQrWZU'lX:SW;O&Em+#W9]a*>b(R%WbllL(Q7"Rf8qUsb'qc^^#9#'3kX087q(_K9JO*KTP(;ETLHGZCC/@rCClB+VKXmM7-^e\p+kVlo16)fP:gGQeFlELlb\@8?Q9Z(%X_QEH5]PaqFCd:h;M,G7Fc-?H;VE2T,*@$?!S@<RG[g6Vlc6t@[*EcOEtS,OqKm"mY[c6MH(jUi-=9:"Fc97Zk^.*n`?LH+[63Im%VSfh^irE)!U,oOB>g8YeI^`K$Xo2J0q&%_/"[!7)l&5bZXuL]d@iR4L.PWM18XT$:O*&f#EhtorOJ%=l^=ItgFj+'#QgiaOiYGL<%6]>S%^Gsmab3j;fZF"oZ)D4d1Qa3&;IW>##d5ANE$AB5tC$inq'add'cn)#9[YR>b9&:':-u4s1SML>j,jRpe?q%]qM5.?$rRIW0%NGJmf'9)dFQ0Fl^ArB_2J\W07<B$KRpQ#s?Zq+J\FCV`"?],W[Cuc=E6Z!^p@Z:O^,/%g['M&-9=0(Es#:;<M4lFt#Sf[Br&lu^*%VkCTt_2.u@&bcMTm_>8([mfuHSA5hYD4a'oT.iG$W+IT\:S<]$YhH=4][D2Qed5=A]fpgoDptuH6O^Jr@ar&o5'sCJep%5D-KnR\%g$:bYB+Od>coHBR-OD<MqHZ.+EU`56[0Ierc@;]97m+H(oc'DdX63Y.C+;k53.ZBL-_^a*TrqD()ONe=>6>OPhV,aJRK]]%S<$iL%4DXRWWUAK12,b;LCsH4j*;*`U26.6lqcPsrX_7<81TfAfK1Yk<UQ8YCW-\7LgB4R/&,-:;7(*Q?P0M^i)l?VP2/F&>eZbY+VI=,o%Nt/,=YW^"pT]@(`5s3X8$i\o!`8Atq0F<L40FKf6J%L:A[G^>Sq<"S'f^M+MPYY5a+]TIjD&qB6mY,C5eqJ;#0iYOM>2V=S)a[u`%9'aEk@RFgo.oAYb2oJUinOY8jA.a_tcU96A`6t2kk,35e-tO&jMc.)/PR!3@J5X3,.m7!/SuW5/TeiQHZjI;r'TZpm*3t6+'9,hT%*+H/m[@?HE6[0@\Y#CZ,Z:mg:!f,2S.r/mOAR0<^ANf;&DNu2.42"ARMF2VfC$oeC"pBWDM2Q1M*5]$K.J)h^6QAPFWAoR?P+8IN%F3$-"5mm\4\jL.#$JnhR+k0+9Pc(B25@hqCX_u8l=^LkaD5dLIVcP&(FU98iK1$c_&k";?WZLoG";.4["h%E_Lf9lpTcR8?L&Xdk%8lP:+5&+(`d=2_g>aIQEO5:uCCZs")klnV!?1b@M@\NdSLp%]Cb`]"g4_Qc@^;&+N`CB)X]9.fj2-1Tu[]5sARLuZriLAIN4m=fH%9d2hpc-heNZOm)F9saJfdk#one#Y\MVnXgh;:]3tL.Nba%?jOL)^_,#2U#>5fe@1rAH*.I(p[SM9%bmuV<kRh&p!:m%8HX&_uKZN%&,[;6?IC>Bq:sJ:XMsP>!R9mW[OtL?MM0PtdY"Dg?0S\5;a4t7275K76.M$"c0@??9sa[nX'&^hZY<H)C,N'8?T-0o8$-D%fkF5a%e*Q]G,9Na]b_IV^o3k81I$ded+/W#]^F^3#I4@.*'+\>F<0&i4f0\Lfg(GG=*eO=r!am:ETVR"S%MsiiE'\oQkrll"5d_\I-4Nig%KmLM->r!Lmm@<0r/RVg$+W[4<!W!/,0R4(I_mbnf2JYZKjpl+F\d*e)W"Mrb$;^ci%CO_7pok%hnq2KYF=Q%M83fU4`EScsL%7.=%[O=l2U!///#b`+T__<_m(2_"kPEi6c=>h'1,p=hdJ.._#=NlBqJNfinG"&6q_!Fi4&JH:uH(p]9Oo#5Z7JfaSbLM<'rpgV#WuUe,%1RN&;2`3!/J8VTa(!<Sg5OVlQXd_]_dU/[r26L-*D?iE@=:bk\U%21uV5@j5iX%/rrK5SGF71*TnN^IfRQ*s;KnqgnND3A3AaC?=%-\0mc66qU,]CYStT5j9*8s/NQTDX3+IETp47rmAun/ZhmV&FKk/8[WV";%d<H>a?K0c$E'))HjQ^V*E2A7jA9]'80E^B=o%Y'F-!%ICH5X]L54CKNk(>:@ZP/`.#PefY311D,jq<a&Zi#,'IXLq/2T6N3u>a`,iX<D$nRDhW@o+o@aZYec`Soe@><D#J&$D6)$/43;-6Z%\jO^t!5[YMlWuJrbm3M;^4NI2hePD#7-8k<!M0$mmjt_FGo0*SQ>INrjr4:Gi>l%4-0Wp7#COg'J**5Pi,_*U>@;kta$`X0Q2"+d%PSd`u/RcbHIq-5XDjSHKk8S(@ch!ki^to*s/,*4[Ws/2b.LN,2MLWq'7%D-i('@W7pNZGN"C"CR]P0V-ZO"o5q$7BMEosFJ,WCq`%0"CrHMYT<u<4HYN<kmcQ#WUtAf#VpHU;fID7tr`de&,=u36bR:8E0LK*t$@CI"*4,SGA>R$Cm.g%.<:mcncqPYjjL5V21F('YUNt%9>L=35![=L)5419,pjOHRqt=r*'[>@iADLZ>(_0ST]YEJbP)nmKkq:mgrA*Y+iYum@`/]FgmIPr!,U_SkKA#fbZ9&uAC!53:,.h6%5T#T%X<03r@iRJ;]$(G*S6sa-,'))(mIf"@X2O*[SME(/Lie0r/YSFa+.;r>0XLDWHpng`IW^-Cm5gc!D<=qbbn03aq@9bXG9K9e%=XgAE,H'S=0kWOH/;OW;`G4^uCS%JL]":P^/sq\_\sRC9=_.-#o(Lm9=jQHL!pgfelX$@@g8C=p=[_PgNfVMo_"\TC\DN5VlIfA5%cu.oQ!bSEGrU-/6]UP4.V5sn[D%\2-Aq+#=W8C@A]KAbolUO/ZFdoqPbR)s+NX>5!E+\L;[ZBU)rNl(p+E,K.)ION-`o0GEXX-n>%'KKV'ABh?,1#FlEgbW=/ZOK(#)(P`6$?aCB4>\a#(O9g$<jjUW,d+"c-7nHBk(N,5^L%Xdf0B:tqhsnbLP8q%1]*>LaK(b]SeG_6%OTQbI_Q/,+AHWuWN'sT)Uh;H6ZeQfpQpZTP!$D>4`>knFcZ8G$/"*`+!1YR;fUYIZ3]QeqO_92h!?E&jZFt$M.&F(Fn+AH6?$Tib%R@C^nmjM+rVS5Z,D_D]F]?6Im7mIGDcEgBL+Uak*n32)2Fn'#3OFT\/95-%h501P0Eg>SPmCdgb#UW6ABChT%+]+d&Xt'nKQD&-C%,2.Em9W#4`!BMq[+<NF\m2MN%a=Q*=R;cN'I5EICY_lNu',$T,Kt6E,%TH-3o=M%gn/G;Bi3YnY$VnHE6Hu05:Ak)Ej&(%ZAPc]N%*d17[pZILrN8'e`R!tQT/=gOqDD)fC&"@u:r0th+?Lp;M4_'>.Dr$U>!K.g$I"1],o"tm1<:O4hHGYWkW<pk/R>=7+.";HW9$M0'%^4E9b#V7si:pVsadI3A<<#"VZ5h+Yp+kriH^tW3h`<E7N@DXH!4==D"bnT=Uq]=!InCQDkJQaj1qkP_TUm^iZ=:jCII/D!8=\n%]%?h:s#2P-opq/g:A=pd`>AJ6WgCBb@iVlT7o)fIhN#e^4@00CkR'3XjJEU0?o+;[acC,MO.-10!24Z4ah7;sS&4Cn./(DF^.:<SA0%NKBRsd#%A?N)_nuS<;GESA570BLZM1a<ZfkQYRodDX/<T&$=-9`J)AKfUm+AJ7rbG3A<:#-KL+0R)BS(Q7G/,ZgaJ&F)8Q9/H_N3%Usi20l#jmjqM\E1%T1;gX-E?G*5(@W*h!-W(f.Cq9iud%>=Yk0='YRVc#5P.Q=;\r7rI6Y4tO1_k`O)cfh5i`1#<4@mq?XpV*?b2%gN`nS2^Ac]fXE)QJ=@It!8n]7>/5[3qH(@X3PJOu&TYi;!kJ,L\Vb[X^.3!Q.5-QS]=P_\bGb#C=(\3f[_=2F]WOrH>HX=IQe<m(%eNT,<A"cd30>fG<qop+tM3GLUkY]/uL@(A!knG`^F>7_nm.Op5@!8&2V"4&3[u7JJAJ]LjXJ??.>`T]C/>UF=8`91n//Q$*s3CN=%g*Ha#?++1GH)5R<`pl#^%#$TMo)NE&"rgIoBb-Wu/E;"2FA,L<@IiIiY;A1JMo,E1+`o%f^@CpNr9F!5p_.q"jR9sJ6sF*/a2`TG%,a6*5E*2TC:CV*ERIF:"2Qa:OmKi`d*U(Lh73B2u/4?=\lLPKK#<5tZ*V.ul<b@5uV_e`gJ^*$Y'K[-mA@4/_p,[7p_#LtV5)6)o%GRdc_)^&pMp-Mlqn<req=lBQFP"8C]DPaVGqC(';h]Dgu14l/nKr7T\f$uu^dKO2>?E"O+c77[uCkUrU*L/7]h1/352=0,H9>^uF%(HdmEUKH*#M%:T-#ouRH^ZlDVgu$PZ`qp\t;MN@9bqET&9in6!7LV2a2Gs,/,*.9qO)JoP\8WA60:L)GdUT72E9@+UDAKBCP,H[Q%6B)pPQAA39!'S+uj-0'P/`!n`p4ON#@T3X;&+INRFrJ$O8#B^f#*LFK8Z&9I<eGL$4!'(10N]?j1%TrI>2dc<6A\B)gnO/9dA3Jk%:\lR[o)<eRK'\dV#/2`-@hGguWP_Tan:r+=<5n$F*E\;eF)5'2TWgjt1KG+dfe5m&:`YFbU)u3',2mNI9Z`.;nHpp.+"b!tZ$Kbc%VX,&PSF@LenH2Rs^7GN0c_aJ;DCl"GU]g$E-BqUt[A?:@?jHSPN4Mr@$rP&n5_6>iP<_;:%?$W;QRs80hC6dKOmE[E]I?q+7*h!X%'UnHeXXTB,i!IK!n9>![)];oR.H_A&XL6,>1W\42l5NaG4L!>A=CuV$ac#Z(QPLdN8;O2=@,',\=P`&0TYW5H"@U>X^h#ghfGX_K%p50rV+E5;RS]f](YCT@V!Lj^uaP1?D2"[\+D`Q6DGXh%3)i')OiY'.\hL9fSrJ:U/E+:"P8?g0QVkH?C/ibQd#`[eqEKSaqH0DBe%1X>hhM9ML<iN1#p.UZ=h@XPH:&n)["7X<B]T!&8e]bjV/hI$,6!Ke3!nmHt#lUAl*Ls<B:D8.D6,lQ?>#=+T`eEe>NH9Na5Z$#JW%SNf2,_g"cN'*i,Lg:/Qf!*SE*mh(ou-8870Y_3:(-u74Of(Tjn`%7_H!4Dph9sA;YJW-[f#%"h3?bi"eoeFBuU5Lq;YbMsieJX;[%"'b8>dJ)]HU-NjC!hYG=[?_dh]-qkA:e`OpUU'cWhPpfKh)%-3eY3Ie2GSEIo(G1ics*\pVjhQ2X&C77P`?Yi;fX?aF@&>7d^&kK%\5'lP6tDH@Tic9WCfd0G(Cf6sf0r9=iJK@Y%Oq1Q8=TSD?\lU_6d4ed5o:7j7C1P<niWTAF1qbA5ch4"*LN3'l1m1&41p7WLhY);%%Q2)^I[;-9SOA);M.QIEc(cnMel$f8S9%>mPLIo!XaKcNON(1hK->Ec10HrZF2%9YpQ9'QckK'E4)[+>(g5d*R"5!q&lPZ.<4t@3%nAfVqlj1aEKf<8LOFkg2<nFf'A'&LIfX0(kW\]OJCVC:`eZ&?kaN*Fs@E=]+C3nYfmTq2hM_]ElVl.Xf3.i&)Yfb>!"!97a*:jL:%p:C&f#%f-YM&drln3+L?=!p:7M"F!@'_+R4IX>@bq+Re;B++>X"bJDciAD\_#3_WYmg0MgV#K%cDlA_fGYR_5,JEfVe#M?-r3lAs%H&s>,mP$cIBuc=]kEXW$,9&(-k27p6)uoBkT]olHNL\3+(KeC>Z#JA]b)392.$3\'I?b@<[luP(qCLe>Fp8An>Zu9gFE6WN,87b(%<!=0U.Grud+ou7l>nso^C%FDj3OV4_1+Rj?U`IU6e:JpRdhSWf[N6@sP(KkP2o^+fbi'qd0p@[9bj;=g9$[>$=dtdu3Su6gX.cm>%LF6C[,:&"f:%K+!>&``>f5GUbFlqa]V0i/N(rZo]6cfDB2_5_Wjhu`DSQ"u0fTou-UW2G<A4V7#Jqs5jDmGl=DDZW#.(uo-NJ`@8%D)!'Zddi=Tn%K9:=sc2un-kFh@I^lV,7a5lO:W#6>MlGaE8PK,+\I/cA^kmY:M4F!.&'P?)Uf/+iN0\PBC\;Ql_`>Jb4Y6A]U[+_%/G$(Wr"(gf#@L1dVL(KY%m-YVHW=biLQ7oU`*5#UVhjchF=<J[h=0apXDs]XOlrQJ3Y0m5+ST8,7[/$mC#a=(AQ"Xb$/^I0MuU5C%/%.Om.I`DM_9L*Cf0*XGZIc'XLt=_C4I#D_gW0D0/@#NX#j=Pa_M"&MYn"&V:&ZBobk.o_;ks>Ymo2A]NPI(f7j:7D1_&$B')H7`%f:>>O$)\qgVQmG*qstX266CF3:oQ`e@8="Y?3BNV))E&59'Z#]9j"3rVLb]FA_!K_(B66IMm^Vr&r)s&>4h!cnL^:XSJW412jR^6%(-;WM@A)Y;^uX(*<5LM58ikZr.`6d-\a?ka&!8,NA/Ei0O49k!:*(F/bs:!Ik+=b-NfQV!?Ucb_41ltX.nK.0W(t;M%fO%<<;1U_%'+?9[,')M!qY&uMKS2OP/D<4t/2[YZDnZYp`B7kQYEcUU]#[Q!'!.9s$YqdZ#n('mo>"_;dK79C7l6?LdRVRai'3kj>946L^4s<G%CI,IR@mJ85h1Hm^%(3b("3gb&BT_NP+PA^:MJ`r8O`A:qlN($7<W8`EK+d?lr+Pag(0#R_B_@`)ksqepS5r"9:(Oun[8',b#:k-`%d]Z-$.W*kNd0#pFM^dehd:8^(U=$l;dG=#;=H`Ui`QB6uWMRMe4NNAulU@-F!Z_Rp>\tP'gX<F<g-"<+E7jFG8E-^rFEo,b,t40@%)P4l/>oq12kO1<i,ncG4QU_\ef\PY/<`F0di8)tn/e>Grid3[k*^&YS-9PQT0VS4<dH(D<1DTj(gBanMO'b.2Ud]J+'&J5]][%=;%C@12T`&W0^)!Y+25+ZO_6KrrFCc7!'k:JDfTuFThB&K'?U8PDrabJUl3),2%itF=N+!.&c/(aZ#&Ws*+<fZS07itV*/6D^`2epY/%WSk\darX8M9f9A+bnH60ecZ/#:HZWuZW'f4j5+Ri2U)!LPP@Pg#05"PabJI)p^6jO@0HB$g7p/,QF67"KKVWt7.<#l3bu?@7G&nO%=Snjn%Hi@qXCu:b6*1i-fKk`=Lfurd5WF+4/`4f#9^9BE*Z:)>-cDd)D?fNWc@R8YZ&J1E`)7q["/TNI&Z5Ag<=g^33e^*\Tp?5u%c!Kc+oZ:&oT>mNkn>Gi:KJ\#Ijp4_,d;gagrPW4H88a&?$qo7t:hnf/X@a]>%Tgk-5m4`^!'sV598M#!b<`PPFkMVR)1l92Kk1DP%-92V?>h\"JO$ZQ8>do.IEk&gB9hA:s@lInaC+;N?$+r1Kk<"35UrV"gC["9tn_MJ:,9_e98Z\ame%T6@Wt<Y$jn=f57=Hn63t/kH%X%+63\JDJHna<Dc)j"m":^ut@ghT.jGD!N3/i&*"9_'QNJi<JLL</:4e,ZCqUj=DNZTJS'q]\R#oojA?o(GZsiWQ;T(uo^<5[H*2%(efOD^+`DDm)=>81Q$FX\5ZG$_<u)([3?`0NnQr4OSd.1<U^/!P&/2?PRDH![fDUA,0m%g*H@n.)RE<6A'+gF9/oI-gI>mQYk)V(%d&3or6jhjnc%,!;5eC/?75!2Bk?/4+!#."\Pp$lr]ZKL(EuKd/-Y=)rY<@22/h'GKa%mn$7;NF=,D)m(97]d[./'oGE(6A+a4\B(%W.Ik*Zk@Hq;*KnN=J^?J$?FSq&@>4,%aib0e21ZT53u*HQ:3)GXFR]gC(lBVZ;?YEi?_`tJ,ZQMNfQ`r8:(cUe"]QTNfTl#)<UFG%T*"&Pn$o742i-Ff2f.^Y@H?[Ze,:V&eh#=`_L)\V#i9(Q"W/i`*2#&bS?eK(4T<8t6a_7;LaACd7]+:'&V@DH=]#Rm]6H,0ZHs).%="+bqqf;).`br$`OJkjBbcLS><F;j-=\bG2e[(R5[Am4,LGg;tLe+t@Aqgp\n/OtaVZIN2=,=t((8G>E&pVfi#Wl&^#N$>V;6;&a%QcV.QUFHF'S2eTen]>#>Po6_V/A@An2o.rJ*_9Ub`S=V;,BDG:KN!P@1/92s,!jA.V_F7n@04*C><.<[liPBI^6!%1j+sKOc`ZP"%:acpuR35XEr"4[iYR,N'N-KWlgVCenD-1@W1C$T]Yt%;Wa#`WKA]L"I[UQ";kRM..i]35!SJGdKd2h4hL8rNWE!S&A?pPkWB2IG?%b)!EDQ_Y;q$A6MBa$q<CWq`jt]!ms/5uE=@K0?9-,haGKc<^hNk;F#<`CY;m'r="EZ/g#2La.[$,2"_;`&)lj3n#^(LP.U+K)knP%AL[Z!`"YJZg!ThS"d9`qY6(AM/BITIS#81*-@9fj9\3`bQ,bD1/3qK2EYcB70#ONXNZ=f4!-2_Q.09Y_:ufB9maE>F..4ql6(sti%A7B4H$itPi811GSn8+KJEQ^":h6JDZ&KtZ_+p,r^Ga(PI*<^sGk<I"$?b"CE\sJ'nkZ-:0j>SLN<"U$"B0pT7raeVo>^n<e0$BQO%nP*!ipm_%-Wqf1[Ji&AR61!XQr_>F55ak)$"BA\RgD=!24rJ=-:'9V<lqBcj&aQQ,/.uD*Y91u.6rA*QD]1g2BWC=lPdHo\GkIl9%C@jqX6Ioj:plA>jKRQ%r&#(/^27AFnM.lMM'9O5=r5l262)*[X)W2/.Mubnc4l>Rae'"Vf'>f$HFB"mcc'h35!_>_Hne\tD2U/9_%a=b[\503O'i#Pg4fstFk)gJr^Za+1K83$f]eD_TbKD2Bre(37BLQI_@s$LN.5=Jc\?#si$>!/F0egb>9iZ/TYV$dgu[PD-dlkI8T%((>+_g$%dP,HbYDM]f4\%;Nc_`NG,%!)=ci9so4Z9bM#?4CJTd/<MXeJ;f+6VNZUPCH0Q+VLtgs>4mO],='6of2P&<)=e>(@hQ;K%K)CB%+;o(k$Q!TfgB"]*TWRQp&aN$.1E+P<%@L72JS.I]=1/AC?LP7^:/Vd4R&%`T^j0&!Ml=:NURG0k@\G_$=a&rWOW1XohG*I"%5<0PnZHuhsAN4:]hKI>9UnaRj!s5k&`6>IlLHLBOA)-M0/k]0_5h''q$H`f=9&E<11&"X!CTQNYf]oSo_n8PTD:h2YWcNGHW7jL&%N3C-?O4cNnR9$^n)YC>@[8qQ3-628<:fR7,-lMY5i,f#"pLk%l"KJD8FX\m(5$57l:Y:53T1^$NbDK/T-!Z@^e=*W:$;&CGIUT[]%2![j\1fkplCKG\2^d)=Pl'\KDB/uc03(+!d@4Dc=-#sH\r#@5E?NlU&`FB8TQQ0EBHfBsB#Hu\)MNeM,.9P>*4V_(n=4s+]N0c#5%5`F]&.l$0Gp1C9JN9jRkG,6pjQ+X;_c4T)Le6A64:o?X)T`mQ,%e[,4Q!]tO\/6=ml&DEV+#ReXn8Xr7#phZ@nW('HCPWn83=kSW%WYj*h"aD^LCEDgSM]5@6$Q)lTV"&`Cq3'^.TL&BI#V2IS/TNLk_^qU_e^eU1daq%$mf;Icoh)9.C]@CO"-.3RQH4/-)#h5Ufs51#%"l`\(BS&QtSqmo+1m$]Fo)Miof`R1T+-tT@Q)sLM&HEc8b&2BFa&sXeX4HmSXIfW5dGDkmP^RN_pp-+iT6a(]U:40JFhLoTq.,uG%ZAo;98Jik\]5pFb]Sj[k-W40cF=_3Q@a<<'4d6@Fk\%;8A<s/WRD%'J,GtfjM%e<i1[S2rg!L_J%''iQL;F>,s"-mNLLdn-gX[fZ%P$P^lUerRd0?(iP*^oUD#?e?W8@+$%joPe3lqOZ?AB-(E7H80)hj,Qm3TN`aWg(O.7jgfamt87`iD?SG)HdikLXh&3*D!p[2FCOP%3i^'S*GucW&pY^HlDkeuTAA.B=>aW%0;W4\U=j`D9H3tCns!O;Lnf2q&RdD0lrG<7h>tA"ae4dhZ^gN^MP2NW'T6Fs-!]%j)$)p[%iGO2.A(q98(?/&kXu$s_Jbi.l0WXko=a"!oNLuadmFlY]/Bc6oX[\`\%kFf2CX-jaA?khBCI,FJ5-'KMan2c(.^,OZgI.q\-/#Z^%)XkCPD<k>>dT;UD&5YnA2c#,P#:43-@;QBQlsO[G%SAjbD9:JI%Vo;BB!&u)()X'hg(nu9LUA]a:])U\\/0,7ns7`q>d_6+rU*`=%mrbSOa15r1U^^^?k0uW$D[2OuZ<A%d<KuPeQE/Z$]a4+8D)6k&<P/??76a5#V`;f6<=?[%Bb/WM1m!R(ii4OU,pFDl]^6.J=$7(m%+;GY&CKl!rjC)o+?=(0EgP/n*+09=u'pLB&[d)e8Mm][Ep#CfT+Mc.ZO6p=fq";)sah+^\]P_iIbAr2mX/)(GgL]Ee[^W)>-,&A>%R]E6Ne\1W(l+s\VD_E/G?nI9bks:sip#fth/e*)SmNuVi)jfG;)SED&Wfo/"VuaTUGueDeS&f"U[,T9:V?:@ReasEB[C;SGU_?2b%GA;F9mTqca'MIV*c0eT#Z\&?"F8#G#g<6`*;p&pcc'Zq2]IaL"0>D5NoSQ9qS=3bbX3/[O=hX@dYZ+@He6GF*A.9oE+7H'?k4D`[%>lDs4q)_O;e)pYTPkf7=,5o\UV&iOT^=u+j?MS1Xba/.^pDQ-&c:4;NYNG]j.=<^*he"hcFUIstK:UO.p._upB6ACM)0%PO[&A_Q%Q@+>H*318A=C0;PE&JPdD;1Ok8+N^V-`R8dT3_OWf_(lA_,.",;=nZY<'9fEXrV]D2eRnO^\J?a>EF;l*JQ>D*T4ZLW(NSO.&HM,%BZfq*^>;S#XQpn\`pu&1]B]<%>O)&#^8%j'Hpc^SfmYtHr=VEnJ'^n)G;PYFm<.<>="&jnX^U/.GW@hab@?nXr4,CI>l=46kj.dX%Ga@WU?erp`m+gE(6+Q_ama)JUAFCV^%,*q/)79G+8CYPI>TB+0e$VVn,=gCi@8@DV&L*Cg64iE+>d=E6L:RY?PEM>jMpPs7DCEFl%#fS?XKlV/FJ^=3\hM:SX\LO:,_ISdJQ_?-#+28T51mu>hdg;d5oR5YG;VLln(h%K=0X@B,6C3pFHAIOLV]j#0QPj48ldM[bU1DZ#%B`##V`NDepTBloW+Z,pX>(1/^&Df$iH3fMW_\TmA\G:,Oh=Tr:C4nE:.m4TYe:g:19h:9%KMs3\PXa=!TR&mPN;uA3L!p=(&Ot,"%pLA4g"Et6R'65>in:X(8\Imts<'PQ:&U`)7njD/e#W_-TL>3&q54K,9gk_mhXT8BZl3(a8*?g$e+\/`oCosI"E;%jaZ[Fg8E*NDY%+bCi>q`l9>n:kk@X+VYK&!'#4S]"1_U\pJ!0R.?VZCGq)drQW7Wmi(/"9#.\5_'oo"V_(;Vrti%]\0q>,^t%JN43a15$lI:5<m0&%-%YR\8-7c?OT`P],70%D7hQ)gO/,bt^BIg6nWD,GprgsH37+;D,VF1O7K8/$8cN29F`b\W6gK>#=#9A*`gr_3&,9$#42^'UCKN"Z%SRM';2(Z]?cER*.)AXNCB3>(RL)h;Io;G0hoF)+QXY];lDOk5)Ds;^jrt8f5nP-dnKC%=iVU>=.:A0f>EdjgHS0)Gjk?g-1^E$eU%j7.%\j^<]Njf["A;i5]l?6cL,H+Y+t"1Frm-QA0/)@=1eX3?MHLoK:L$WN1L8Ka&FaD@qA(eJ?$k=Chq15j0fN0L(UgXS.Tjr)&n%651r[Eq7f&5il;sV]\bPM(48MULj1QY*%OE;%NhlVF;Lr[CqV0>\hU?.>-S?>J]tN=fo>Do)q@i^a'',^(%Gi_&#RFA2%X0QM8^(%F0HTF3h%]TEXT'Fd*%6+M+m9_87R^`i!rYR)EeSbkFA9BKY).04W):jC+1_6m)tfK[os7r1-=R'MSR;'DRJc4c_b--=>:\(AiLqa%=&!!>a:8K7CuTjW`6-M3>W$')!r']D8\C?AL2%mmr2XHX'L6LZgMK\c5$8j!UC4"mYm6qEV<Tt*e)s^gI;#D_m]oD\T(ab"ZHrp2%HtQN[Y96IL,VXJ!,,Ef.B$1G)$6PX/@-f3ar2ik"ZY;nOZhm"-6-SGLNtm9.`?8#D^l+>."H$cY=Fa"SWA/b>C53]d_4CpWMc>/)%(uNiR(JJrgfk+=\l44A>Ad3A8:tt#h,l9&qH,N0ZTb!c3s*!l,_+4b=m&j;`I"e4HZO>iR1UJQr+X8j&?(:M#e[c#?d[FSuO:(,<%[<.Q3<!)1+FO_"Q8?rp3T\Y;]kh<TjNI5h\EPolbh.]=tJs!*;PJ5#A5B78GTTr*Q=7ec<<*Y'a)C+QW1BqRqg:t^)ZQY;jfP/8p%@N[Fo.=8Odlp;$"Ru^eWnc8OD[?:McX4?u4Z7iat`4'Oo'S[8CPCR?9H\CpfgR<7mOG(K'A?!(Qf`dehPU$WHhpCqJ7.:_\5>F4o%V4d3/<a%\42\IQ':F\(DP>T5tWL.[]D@+KD,01+)2Q92T$`=DQ04O&gaK&BL7^(-q%>m06K@.D@$`rnN^,,j_,U=F!T1OsNS"N7-%IYUks)7C52[cg`L/*@V'H?KuYVGh[Lq$Dm1WrVINAgP#(/)@bUnS,r0Kh]jQ6Ggs:+GoD+\UM[S$lO5/PSlI!>I@k2"=YC8DmD&"%KeRk<%#r4?RutbCW<jU&78EgGQYrO(;<P?G2>VNC<r'K%G`U+\IgFqpYm*sbl]c3)DD,3-dS/:LXc$UfJ&s4:F*6IJf^WY$1B^Nd%"n]_E@#-OX!T/p9VJThY\K9Op>1hf0Ag&E%aUuUVgOP>%8IuA#(2REP=&fJj3M^R1WD*`DT@hC37][hX)feXtLKWT@^#Q,Uda2Bg%Z#te(AdBf`laDBMU)U6l(c!dc;We,KI-PLJ+H6u$F`rFo7ZpB6YXf^8,[6u2j6dDY;b]Sd)=\hIU$S3m(?qn1[!-BQ[&^L!kf;#g%q_H`[O]3?pdE&,EXX$Nl\pA9P"qpMt*/47X.YpUC[+9$54i07:#`/G;o(5Jal)8*iaF]6c)ehe.1jeP=KV`O'KV;*pcn94Vp(q=c%#n>9ZDFlK`Lb`?q:u<!:8mPFJ/e8(87^Ct_&!XPn>dOl71P3SQ4,aY6,jZ)W3-*/TLOFVkoHB;-Qd*HPD'0iT\8qY90p#ORnbgL4%dXS]PbhhrIOa9<l>;pt#eEa"mDjKV=8A1^7*tRmaer/JgDLV#Iqh8qos,^8PjU1J%ERdR<e/JGkP.>jWEnE"_c.dH$j=;Fd-$,DH%UAM*to^e,#B(h7Bq!qr+LmTF[RkH_e_oB$\Ws)<uP"D0^Z_TCR]hS,(OZEeI7`0=gSeZ'@!`M(VPa\74/f$#3>[2@(HV\C'`15B=%!(ceHk;\tOqNu)t.sa^L%"E(nn/f%G"9Njfcs>?^&=qSBRjK#@p$Z;[(SpnaVk12^BPM<gLHn(FD@u)@:0%r`B<#d3X+q+o](opn%gmg.2)9`Vd`R&htnte%"U./3cUm)?7(Y'I*Xa"iB*oOCJh]KR$csX`]M"_i4)J6Io;2q.q(u/f5W0HaY%sePcH#GRq!]aMt:H>Ma%OPJ0&[&+575c-'kA!i*aVaZsK5YK4%mInpkWYQM9f10,&0:u5FgB1oDJbjGX&9?H.@T/(Dn/URpM.O*DU<C&Ui%@Zao\gQoR@,C3%*(Mls)2tW0Ws6JO]dUe)BNZ9b04_/Jj.\AnD]8)b^q^DmH?0An))SQSH,X#%127rlAcm]LpTpC$)U4_;LEp'07Blh=H(-l"g7EiN%iQAr,2C.dW4-t!2bnfUT[VV2JaB$Q1.ZE]!Q;fape>C/,n:I8XLG@+7D)8Q.'q92I\4Zaclm%;]?YHb[-#d@$Rn4n/!WaNW2lN=e%Y/uF^_8:E9W'6=1#VZkAOH"gp0-r\>MFZ$$INU`p^!@l_D4mj$"5;Le.dD;p]*f<D98%kon"dnn9[hX(+!,+u?8'(rKlibK0p:Cr%b]U@FD!+[8a'.sdE:#8e".G*#X@S6ECRM7,5@g0/]8#@HF^9AfJW1bm"_)GtAM=k97'Lioe1Ctr`9J<qh5G&<NR-(\&^WAQ(nRVZ%b@P6A2?I`A-4S4a<9M,g1KO"NDh1$Z`8NCJ]d1,2<;\@gr8<dJksAM^<UsU)7>u26U_X4#W("1PIi0AQ`4OgQj?mEVQAtqLP&t$D%=><S;dL?d_f)(l<IZt?p@jN947on"d^fWLKlthi/U,\^_E$qVKU-8J_!bI.SJEgcB21@AD7Wd^(DTLB==#/o;!"2;`:D4<UH$'SZ%;otBP)7,,+jd;!kp"Q)+K4@@r0_'n=UQ.>D^WI!'YoHZ<b\slN4G+(d8[[p-0aAQ;J0+/mo0@#c<?I*^GHpo!njI,dnPBWGojng<%4Dg#g!m@%7Vp`3*_JF%]eC*j#h?MT#V`QXd6['E%Fn!#R9MK)!UoVC\bpd)hDFP"&kHWiNDLq<!:mB#+gT4Df/Om:*!_JP7$h%AS%P1R[n.22=4aQrqDB,We?\9bZ9Nm-<<q.n)#p_b^KaGiuI!$DDMafVhWGNnBdZ95;H*JCGne"!bb]#hCpY0N>N3mq>^L*<+'M?AR4%)nJ(Y*/=;BbCZe\5(W<e:Ng$W8Y@E5/hN;1&]U6G-gh7:E6G@?AjZ2HIm^CQMG$(EOHf=5n(29Q9i!>o>B/ic[nl.C3%9XTD&4R@%'@)<eX`G**fc8Tj"r1CVS+Ir<*EU"/Kd9A0.8f0>?!#@=4i5`.qu44aX0,4#5TCrb,q*0k.9oF$EOB@Z=)coTR=Qg36W.2ieGe(-%P7jaAD5GO/,uoWNW83"uB"t.QA=^3&qP1aK$.Bj-&]ta=^*j*WX=m`$M<\4m&5CiSPX4]\pDMS>5cErK09:r.o-D\h65c[QVB;F-%]J_P_nujL_Q,7+o`lJED!t\/JR&2J&'[8$T(](6/IDYuomB_H]`C"Xrg<l7flmrQ$';RgeA8K>qhk&#3[6ppP3@Qb?(3(Z5<.`Y5%5X*4[n9HQ>[h![[0Bc(ICi;5.d)T(iVkt1"C,9lIg!"3o2A/Yt<P@P=hHBIq"#jpt'\BO5SV;Z2Tl6CIK1ol46!\$:pM+kkM+\uC%4cQ3<7u7'e!4A')D%OLYY>;8\&%l!rbKFF+\mgAreW5#Aat3h?I7&Lr0K=TBd38\D;qf;IZ6Zm0(EL=1C$kWkq;d7r[)dBjUR!.0%@!EHO(rm1LH]haraO<[,#Zka%8BPD9^/;N"-&igcH^p3$,F.fC;cl)?'^&;,-f^&7[%`Z?'4ij&1AHV,)b%E!\d*@^H8n$dMJX>o%(eRIAl'a9Rb@EHKkcdm!_2$.mT\`H<n8-K47U7@OkD58-[]enj8Qq<&)%YhS((j#f:)Bu]`SPiJRk^NgXVdlQ9+!6UN0>%d-(SOo%LZ(AEoRo4oWq6QIj0FE)b)97\<E-K7O^L;p>fYG]pibShnOOg+Y70h\6uS3[&9gaPN0QjfSq.*dn]3u418VCc/b$SAjG'XCj0_^&%d#nqfA_/HP5kb/?Hm]9@(eK`:F?#6AY?[1=e1\i\=rk\J!.!7ph]td3E9")0`c7ZR"[,c:^+'a4U8SbDjZoVQE&-A-/+nSj?BJ40%=8]XhJWE<3=Z15ACAamnKUAdR0WapBfY7!hQQWQQYRXi:8qTg`.q$n*hIW7YP4"b!iQJ,<3"o_<]I's4gQe>l<MLss"5gk#pI:'l%X@Xnr`\D\^C?do_I4[ZUCKQITj%sR0NEi5b7e@@0p[Te3(AHE=+q5X7"=p3cM9%OU#W$Cp7(rc`@#E(eSG_eG5=cj,E"o0#(V=Dr%U*h21TGC"5j<\A^.YueeO@>U'=n+K+Q>k$/&l\rpE^9gOY:A/Ya0@$_Km5C[8ULs17'Gi[Qhl;MGkY))Q_C;?JnfFtmP0jW3`[Xj%PBh^=UH&gbLSZkRH#-cSR%Ji-&**Yd^H\SC['3F?Op"%$*@\2b%bGFi1U,.fqpDO`0IDRQW@DX&W>JJrN\UbP\KpZ034O^J0ll-i%;@Mm><A5=JN2$q>\tl&OKe3A[!UqNDjM>gA`@5(UcI67U:rR`l)ogt,f\Vgf@GDCRjAW9_YsM"K:sNY*?B,)('<VP&:bT"\fHKIr%R,K.;$/dfPs$ZB'P+WWsQPc,q"7uRfMh2r0NrfQkQcP8ZG/Nm>]T](G,0#1K!jr6S.k:Sp=t7G@XN#*;aiFI?)%8aG>m5@PUmW?9%NR/]fB@Rmn<\5;fLP*k+b17d(SO]r)bT$860o@)u]Lh1Yj@O>2$mN;\f=<H]7Au#55nH6mn;^Cu1SS2`S)c<Fl$soPW;7@*!s4Pp%&UU&aLuaAQdfMgUP4WRA5UB)DQDXlf!KHam6jpr7mV8:.#]p`\r-2BfAuGg'('mm&"K+73&?H7%4!9X4>#"Aoh?&6RH<$G$Zp5b!%04iba"bH#nF:(bZ"KEJWY%8CPia\HA\f_QIBlTatL`VlUF?uSY:5WAU$_g&s3k?FDL[f)1!1B;0cVG3B?.&ke]-*O_C3LK40G1bB%"#5OcCo7L>T.j:<7<f?]A4PUV]*3el$hQf]"TiMEU+&/U&>3JEUZ#p<R*GBX'm1dg14EbPXJPIb/Q+fc#L^-eOq%-_IOg'in74M&%bZl(Dn9H]]\+H-K"X#1mFa[R17CVJ]T%?OkR.5Rk?n.:^oD(L.]?@OG"^0nckP_Yg"]3J;/.,ALWYS_g*Y],bJj,)$:4tU(cXK<A%<"Tbp/)H)&m:T"S=[S0>Z1M1ge5W\A#[luEXgGDf]!LK(GuV+Km*&Dh4Zdm)pB/`:B>/-RLIFJf8.4]b%a)YLrNJ!:Mpa*^9=1bo%`ug5IMf5OJCiJRE:QGD.-GTPtALA@YAc3AM:Fj0Yn-p<EbPSL$*WIHG1em'\<(1q"jbA/#*E$T%C*K+BIg+jP;)j=JBeiTc)?(RA%M(X)e,@^gpO@KB:S=Da$n4;^18M_N7<N_AU0r[Etga5^Pns64,JK^l.95&QhA6+?<Wg[d.P_l7%Z;A1Q!b:0AMX-=r6.RN*?'d^o%h$B;Q*[5Y[?@dD[m:(r6CLC5qQj*nXP[,kr,W,TKSAsM_C*T$FJ=I:9"@\qR4m$nFYe(3d;%,$FdXaZj!R[?p9pI9#)CZ@9;Gg0u%LlpJMC,Ro5CU&O:."%cg"=R\5337a;*Mc+"V[FTf$6>Sr<e*[X7^0)"`5laKeYsMC`rCi5?_BN\S2un[?WR0(6?3es6?dl5K(HPo%-)OfR<127'n01fHfnQ?=9Uo<P90*V.WX($/Ei@X=$Md$<S0;"WTj]<LN0Iu(XM'.M_JIS"H85[2/S>%0V.X+Bo40Fu%3;iU:'YJG%+bIL9B&$\2*S2G`M`?9BSgT?8ee+A6Fd?mK.7.)[1'uQae5YLQQrPq3D?`Z8;'fF\Aa]^$'+c3Y=35=m3K5:E]1@]eA=)AMOhqEc%.1<LV%ne.&.JSKE]GYD5pn,LfjcogR7#=D64OAK6B!*uBIZ<NI9^6YQ0q]mcfd5daI'?U%J$W#uk$Xo-R7KR_)&<d+3I.5[if.98%j=]=k?^Ad%E1$j]"jJNRN"OW%QQKU;>Ug`H"eu=oE)15=4hq;1EJQ<h80qQB34ZZ*e$U8GPY`;icW5V4+<.E%j!EqS+"<-tK#=<W%::frk5-Q&40t!GQ,I.3VNkupdR\]<s)32qqn8^`.p)FIj<TY[;,j>\rD4?#X=k-$*07UNaGpT>lB![H10=ke^&Vb1sO[/b%P1]9*%_tZa9%3`Xrq\/sF9S)u;8JJ!mgegk-bAWEg'6\\-8s4F;(1/bjs%-UoSgZU]<M/EhBp?3YSZkm"0V?"fqgh#Lb>^%.VhWSdCl23q%cGaH8!>($uAM-dR!mI!'eW)iTgXu]jjiF6]Jm;^:`&p\CObPcNH5G(@!UpO!R&c_7d#Z$fl&;]1a(ZZAG^.+!$am@LrCg2#o#.Ne%*Xd6!r&*RRBb2hK`Da#!6'6r$lQ_B",6`^-^4m<)97_(DlD#4$+/W=hG5/g!,aghXTdl`o7$gRLEb_75p%O.i>MZ\$OnmJ""u$5p%dl]qA5TRhm,[LX#Zk1c4br$,;]^.tg/i3p]>r@j\I4%5,`4rBA@hj?fD/nko]j,jN$pjhd];(P*C`%aaa*S%`M*&2''832`C1@<5%g>afPl=uJq*=gIib]_<PQ!d/68?J)P4nHW""@Wp\N+><h9Tn_QkR:k5HFY&SgiP:3&QN/EI?6tT?*EXGV>r-6e6]DY8g(ZRC,rnu%qOEqcOb8g)0N1GW\O%Spc`9mL9mXm(&!M[rm@IJ5gaH>SHdMq[PF=/UHG_p3MjBW\Lt)4(4/2;fQ+*S)TU(NDd9/$VgoIl'&PTK$%J=[NjCClTchW[d:XtZ+edP^Vi:qnr/Zi2sm>mR7Z)?hsk*%9=j#sk:))j"ZB`n8FaPa?L:&b$RDZX4?T#`\$2^;mhfTk<RFlcYeW%]X7l2#NF7GdTP+n67'D']_nB:lL<SnTFmo=1IP5>$]TNsSG_amfYEqlWDhBm7jaE%k1-RH!n)NQer]XW650L=TIhUu#Qm%$Vi6=^%mM0sP!RQlE=#+tK*CAPQ,9I1?86b-T`[cpo":<b'TA)joPqAAN;ahHWI<tPXKO$;-:.J*QF4BZ4b(0S4W_t-,L;dCX3G=:sNrHFb%/E?2!D*j(_mtf*d78t'(Y@U^@k=='[_T6;[#qVOG7hVAh1T;cD'GsI"!pm\"a`o9e'1uU53DjRU5.@0G\l'1DaV:^4Wla7eSOZhi%Ym*?b:e1Yja<7Gpc7mpV'3p@c/7\ic?_](@n<1=:XjZsFWh8-u#*VV75gnqT%h3FV$TNjP"k1)*%Q-roU@plIdt3B%'!oh9I<!^Y%baZqs//,"X511eA.nnaE(H2fYFX:*b@MW6OU;T(I1rH<3/oI-GD"e`)NA\9%Bqf%D`&jMXKA?/Fm5,9.H`*e*'e-s=Be5,D.m5b4%`_3K)U8P9a_$<+tnbg>IXb"StU6d542[iT/kN^Cr<-\%@oJCN^l8/)llo!QI6HDVf-N<#&#o:@8T-h__5PSrI1Yc@81sJ%m07KAX%8(lk!ajfg/d*i\141sckMX*ht(+lZU&'qpDoCFW52pkl3R&joU[kV,En%.7jCl[+7R;;cBb>sH>4C1q[7\oW2=)eStM\Khcl08"'%=?g8Q4WfdqRf/5(BZh]LE#(%I'Krsc_Y_%_fo@Y((?>%"':i$bJC9'i$,YWn\ahb`cc6Mum$W6;,V!_J@idD(-)5L!9_n8Rp0Aie%Ht?lq]X^O5el:BGAn)]Xi*sD=3pn'u=l&nRO0r.7rcs[4fiqphUhhfQil]@YiI`13frQk+_`,f?EjEH3*oqOnYhr$i55e4pp?tHh%G4ApG45$W`O0,ls`qS25ajZ`apF$'aSFG3Yi:Tptmd**%LLT$"+o.!cTfNSOG'QI<HEl_;$i6_f!,B".Hg^mT[N&F%mL=AhYhaL$%;=(d_/E:%14kJ^YA#l<J_(&g+eZOaWV]CBFfP#7hs.?#B`/0^!M`l5qMEQ-cGIH0"-teI'n^q-T$hSr;/i;D;"_2bI:Ct/()A]sN%rloZ=oipdco@ko1bl5Z=@rY<DiN>8WMXE]XF5S1>p\O%(YkXf&h"?NmJc9u!JbL,`qKB#mpDs5J*(JiHB)>E%g%gsPg]!)P5*C2.%IO&dtr6<X?L:+U,chai<Xo3J$_a"(^n%SftJ(O_@hu<.qrp\D:rV96=o/GQTs8@HEkmp#YpHSWKp]'aST>(3?T7?_#T0N;Ha$9R`%5Q14M5QC3(s7u;B5Q1NCfB`G3e"?Zl5Q2c&o(j"Arr)S@qd9BHGQ/2rY7rJ~>%AI9_PrivateDataEnd